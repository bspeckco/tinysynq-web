{"version":3,"file":"synqlite.module.js","sources":["../src/lib/index.ts","../src/lib/constants.ts"],"sourcesContent":["import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { SYNQLITE_BATCH_SIZE, SYNQLITE_PREFIX } from './constants.js';\nimport { Change, SynQLiteOptions, SyncableTable } from './types.js';\n// import pino from 'pino';\n\nconsole.log({ sqlite3Worker1Promiser });\n\ntype ApplyChangeParams = {\n  change: Change,\n  savepoint: string\n}\n\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\nclass SynQLite {\n  private _db: any;\n  private _dbName: string;\n  private _synqDbId?: string;\n  private _synqPrefix?: string;\n  private _synqTables?: SyncableTable[];\n  private _synqBatchSize: number = 20;\n\n  utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date((new Date()).toUTCString()).toISOString();\n    }\n  }\n\n  constructor(initData: SynQLiteOptions) {\n    this._dbName = initData.filename || '';\n    this._db = initData.sqlite3 || undefined;\n    this._synqPrefix = initData.prefix;\n    this._synqTables = initData.tables;\n    this._synqBatchSize = initData.batchSize || this._synqBatchSize;\n    // @TODO: take code from sqlite-example-app to initialise DB\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbName) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        console.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              console.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              console.debug(...args);\n            }\n          });\n        });\n        \n        console.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          console.debug(`open ${this.dbName}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbName}?vfs=opfs`,\n          });\n  \n          console.log(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbName}`\n          });\n          console.log(\n            'OPFS not available, created in-memory database at',\n            res.result.filename, '$1'\n          );\n        }\n  \n        if (!res) return reject('Unable to start DB');\n\n        const { dbId } = res;\n        this._synqDbId = dbId;\n      \n        const conf = await promiser('config-get', {});\n        console.log('Running SQLite3 version', conf.result.version.libVersion);\n        \n        this._db = promiser;\n        resolve(this);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        console.error(err.name, err.message);\n        console.error(err)\n        reject('DB setup failed.');\n      }\n      console.groupEnd();\n    });\n  };\n\n  get db() {\n    return this._db;\n  }\n\n  get dbName() {\n    return this._dbName;\n  }\n\n  get synqDbId() {\n    return this._synqDbId;\n  }\n\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  async runQuery<T>({sql, values}: {sql: string, values?: any[]}): Promise<T> {\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql, // I think we can make this sexier, in Minmail\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) return resolve(results as any);\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        console.error(err);\n        reject(err);\n      }\n    });\n  }\n\n  async getLastSync() {\n    return this.db.exec(`\n      SELECT * FROM ${this.db.synqPrefix}_meta\n      WHERE meta_name = 'last_local_sync'`\n    ).get();\n  }\n  \n  async getChangesSinceLastSync(db: any, lastSync?: string) {\n    let lastLocalSync: string = lastSync || (await this.getLastSync()).last_local_sync;\n    console.debug('@getChangesSinceLastSync', lastLocalSync);\n  \n    let where: string = '';\n  \n    if (lastLocalSync) {\n      where = 'WHERE modified_at > ?'\n    }\n    const sql = `\n    SELECT * FROM ${db.synqPrefix}_changes\n      ${where}\n      ORDER BY modified_at ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    console.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  private async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.runQuery({sql});\n    return savepoint\n  }\n\n  private async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.runQuery({sql});\n  }\n\n  private async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.runQuery({sql}); \n  }\n\n  async applyChange({\n    change,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      const table = this.synqTables?.find(t => t.name === change.table_name);\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          console.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n        \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n      switch(change.operation) {\n        case 'UPDATE':\n          const columnsToUpdate = Object.keys(recordData).map(key => `${key} = :${key}`).join(', ');\n          const updateValues = { ...recordData, [table.id]: change.row_id};\n          const updateSql = `UPDATE ${change.table_name} SET ${columnsToUpdate} WHERE ${table.id} = :${table.id}`;\n          // console.debug('@performing update... sql:', updateSql, updateValues);\n          await this.runQuery({sql: updateSql, values: updateValues});\n          break;\n        case 'INSERT':\n          const columnsToInsert = Object.keys(recordData).join(',');\n          const insertPlaceholders = Object.keys(recordData).map(k => `:${k}`).join(',')\n          const insertSql = `INSERT OR REPLACE INTO ${change.table_name} (${columnsToInsert}) VALUES (${insertPlaceholders});`;\n          // console.debug('@performing insert... sql:', insertSql, recordData);\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          await this.runQuery({sql, values: [change.row_id]});\n          break;\n      }\n\n      // @TODO: do we need last_sync_local per table?\n      this.runQuery({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES('last_local_sync', STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      });\n    }\n    catch (error) {\n      await this.rollbackTransaction({savepoint})\n      console.error(`Error applying change: ${error}`);\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB(changes: Change[]) {\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, savepoint})\n        }\n\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        console.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    console.debug(`Applied ${changes.length} change(s)`)\n  };\n}\n\nexport const setupDatabase = async ({\n  filename,\n  sqlite3,\n  prefix = SYNQLITE_PREFIX,\n  tables,\n  batchSize = SYNQLITE_BATCH_SIZE,\n}: SynQLiteOptions) => {\n  /*\n  @TODO:\n   - check if DB path exists (throw if not)\n   - check if table names have been provided (throw if not)\n   - check if table names exist (throw if not)\n  */\n  const db = new SynQLite({\n    filename,\n    sqlite3,\n    prefix,\n    tables,\n    batchSize\n  });\n  console.log('@SynQLite db', db)\n  \n  // Initialise the DB\n  try {\n    await db.init();\n  }\n  catch(err) {\n    console.error(err);\n    throw err;\n  }\n\n  prefix = prefix?.trim().replace(/[^a-z0-9]+$/gi, '');\n  console.debug({prefix, batchSize})\n\n  // Add a 'last_modified' column to each table you want to sync, if not already present.\n  // Example for a table named 'items':\n  // db.exec('ALTER TABLE items ADD COLUMN last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL');\n\n  // Create a change-tracking table\n  await db.runQuery({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${prefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      modified_at TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n    \n  // Create the index\n  db.runQuery({\n    sql: `CREATE INDEX IF NOT EXISTS ${prefix}_change_modified_idx ON ${prefix}_changes(modified_at)`\n  });\n\n  db.runQuery({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${prefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );`\n  });\n  db.runQuery({\n    sql: `CREATE INDEX IF NOT EXISTS ${prefix}_meta_name_idx ON ${prefix}_meta(meta_name)`\n  });\n\n  for (const table of tables) {\n    console.debug('Setting up', table.name, table.id);\n    const jsonObject = (await db.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    console.log(jsonObject, jsonObject.jo);\n\n    // Ensure triggers are up to date\n    db.runQuery({sql: `DROP TRIGGER IF EXISTS ${prefix}_after_insert_${table.name}`});\n    db.runQuery({sql: `DROP TRIGGER IF EXISTS ${prefix}_after_update_${table.name}`});\n    db.runQuery({sql: `DROP TRIGGER IF EXISTS ${prefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n      END;`\n      console.log(sql)\n    db.runQuery({sql});\n\n    db.runQuery({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    db.runQuery({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n      END;`\n    });\n  }\n\n  return db;\n};\n\nexport default setupDatabase;","export const SYNQLITE_PREFIX = 'synql';\nexport const SYNQLITE_BATCH_SIZE = 20;"],"names":["pact","state","value","s","_Pact","o","_settle","bind","v","then","observer","prototype","onFulfilled","onRejected","result","this","callback","e","_this","_iteratorSymbol","Symbol","iterator","_isSettledPact","thenable","target","body","check","step","reject","_cycle","next","done","_fixup","TypeError","i","length","array","_forTo","values","console","log","sqlite3Worker1Promiser","strtimeAsISO8601","SynQLite","initData","_db","_dbName","_synqDbId","_synqPrefix","_synqTables","_synqBatchSize","utils","nowAsISO8601","utcNowAsISO8601","Date","toUTCString","toISOString","filename","sqlite3","undefined","prefix","tables","batchSize","_proto","init","db","Promise","resolve","dbName","_temp4","_exit","_result","groupEnd","_temp3","_catch","debug","res","_promiser","onready","onerror","err","error","_console","apply","slice","call","arguments","promiser","_temp2","_reject","dbId","conf","version","libVersion","_temp","_promiser2","replace","_promiser3","Error","message","name","runQuery","_ref","sql","_this2","synqDbId","results","row","forEach","col","columnNames","push","getLastSync","exec","synqPrefix","get","getChangesSinceLastSync","lastSync","_temp5","_this4$getLastSync","lastLocalSync","last_local_sync","where","_this4","beginTransaction","_this5","savepoint","now","commitTransaction","_ref2","rollbackTransaction","_ref3","applyChange","_ref4","change","_this8","_this8$synqTables","_temp7","recordData","table","synqTables","find","t","table_name","data","JSON","parse","_temp6","_switch","operation","_extends2","columnsToUpdate","Object","keys","map","key","join","updateValues","_extends","id","row_id","columnsToInsert","insertPlaceholders","k","_interrupt","applyChangesToLocalDB","changes","_temp14","_this9","_temp13","test","update","stage","shouldContinue","_resumeAfterTest","_resumeAfterBody","updateValue","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp12","_temp11","_temp10","_forOf","_createClass","setupDatabase","_ref5","_ref5$prefix","_ref5$batchSize","SYNQLITE_BATCH_SIZE","_temp17","_result3","_prefix","trim","_temp15","_db$runQuery","jsonObject","jo","_temp16"],"mappings":"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"}