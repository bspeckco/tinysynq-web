{"version":3,"file":"tinysynq.cjs","sources":["../src/lib/types.ts","../src/lib/vcompare.class.ts","../src/lib/tinysynq.class.ts","../src/lib/index.ts","../src/lib/client.ts"],"sourcesContent":["import { ISettingsParam, ILogObj } from 'tslog';\n\n/**\n * A {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance.\n * \n * @public\n */\nexport type SQLiteWASM = any\n\n/**\n * Provided to TinySynq constructor.\n * \n * @public\n */\nexport interface SyncableTable {\n  /**\n   * Table name.\n   */\n  name: string;\n  /**\n   * Row identifier; typically the column used as primary key.\n   */\n  id: string;\n  /**\n   * Columns that can be updated by a sync-based change.\n   */\n  editable: string[];\n}\n\n/**\n * Base options for TinySynq constructor.\n * \n * @public\n */\nexport interface TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   * \n   * @remarks\n   * \n   * If not provided, {@link TinySynqOptionsBase.filePath} must be set.\n   * \n   */\n  sqlite3?: SQLiteWASM;\n  /**\n   * Path to SQLite3 database file.\n   * \n   * @remarks\n   * If not provided, {@link TinySynqOptionsBase.sqlite3} must be set.\n   */\n  filePath?: string;\n  /**\n   * Prefix to use for TinySynq tables (trailing underscores will be removed).\n   */\n  prefix: string;\n  /**\n   * Tables that should be synced between devices.\n   */\n  tables: SyncableTable[];\n  /**\n   * Maximum number of changes to process at once.\n   */\n  batchSize?: number;\n  /**\n   * Enable or disable WAL mode.\n   */\n  wal?: boolean;\n  /**\n   * Array of queries to run before TinySynq's change tracking is configured.\n   * \n   * @remarks\n   * Include create statements for syncable tables here.\n   */\n  preInit?: string[];\n  /**\n   * Array of queries to run after TinySynq's change tracking is configured\n   * \n   * @remarks\n   * You might place any insert queries here.\n   */\n  postInit?: string[];\n  /**\n   * Configure logging options.\n   * \n   * @remarks\n   * TinySynq uses TSLog for logging. All optiions are passed directly to it.\n   * See https://tslog.js.org/#/?id=settings for details\n   */\n  logOptions?: ISettingsParam<ILogObj>;\n  /**\n   * Enable/disable debug mode\n   * \n   * When enabled, all INSERT/UPDATE/DELETE actions on syncable tables are written \n   * to the *_dump table for inspection.\n   */\n  debug?: boolean;\n}\n\n/** \n * Constructor options TinySynq instance.\n * \n * Provide either an existing {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance (`sqlite3`) or the `filePath`.\n * \n * @public\n */\nexport interface TinySynqOptionsWithInstance extends TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   */\n  sqlite3: SQLiteWASM;\n}\n\nexport interface TinySynqOptionsWithFilePath extends TinySynqOptionsBase{\n  /**\n   * Path to SQLite3 database file.\n   */\n  filePath: string;\n}\n\n/** \n * {@inheritdoc TinySynqOptionsBase}\n * \n * @public\n */\nexport type TinySynqOptions = TinySynqOptionsWithInstance | TinySynqOptionsWithFilePath\n\nexport type SQLite3 = any\n\n/**\n * Basic query params for methods that read from/write to DB.\n * \n * @public\n */\nexport type QueryParams = {\n  sql: string;\n  values?: any;\n  prefix?: string;\n}\n\n/**\n * Table name and row parameters for retrieving data for a specific record.\n */\nexport interface TableNameRowParams {\n  table_name: string;\n  row_id: string;\n}\n\nexport interface ApplyChangeParams {\n  change: Change,\n  restore?: boolean,\n  savepoint: string\n}\n\nexport interface MetaRowData {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type VClock = {\n  [deviceId: string]: number;\n}\n\nexport enum TinySynqOperation {\n  'INSERT' = 'INSERT',\n  'UPDATE' = 'UPDATE',\n  'DELETE' = 'DELETE'\n}\n\n/**\n * Object transferred between devices to convey individual record changes.\n * \n * @public\n */\nexport interface Change {\n  /**\n   * Change record ID from central server.\n   */\n  id?: number;\n  /**\n   * Table name of the record that was modified.\n   */\n  table_name: string;\n  /**\n   * Row ID of the record that was modified.\n   */\n  row_id: string;\n  /**\n   * The type of operation that took place.\n   */\n  operation: keyof typeof TinySynqOperation;\n  /**\n   * The serialised object in the post-modified state. \n   */\n  data: string; // JSON string\n  /**\n   * Vector Clock holding all device values for the record, as known by the source device of the change.\n   */\n  vclock: VClock;\n  /**\n   * An ISO8601 formatted date and time that the change was recorded on the source device.\n   */\n  modified: string;\n}\n\ninterface BaseLatestChangesOptions {\n  /**\n   * A device ID whose changes should be excluded from retrieval (usually the requester).\n   */\n  exclude: string;\n  /**\n   * An ISO8601 date string. Providing this will limit retrieved changes to this date/time onwards.\n   */\n  since: string;\n  /**\n   * A\n   */\n  checkpoint: number;\n}\n\ninterface LatestChangesWithSince extends BaseLatestChangesOptions {\n  /**\n   * An ISO8601 date string. Providing this will limit retrieved changes to this date/time onwards.\n   */\n  since: string;\n\n}\n\ninterface LatestChangesWithCheckpoint extends BaseLatestChangesOptions {\n  /**\n   * A server-specific change ID.\n   * \n   * @remarks\n   * \n   * When provided it will limit retrieved changes to those _after_ the specified change ID.\n   * The change ID is specific to the hub/root server (of which there should be only one).\n   */\n  checkpoint: number;\n}\n\nexport type LatestChangesOptions = LatestChangesWithSince | LatestChangesWithCheckpoint\n\nexport enum SyncRequestType {\n  push = 'push',\n  pull = 'pull'\n}\n\nexport enum SyncResponseType {\n  ack = 'ack',\n  nack = 'nack'\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { VClock } from \"./types.js\";\n\ntype VectorClockParams = {\n  local: VClock;\n  remote: VClock;\n  localId: string;\n  localTime: string;\n  remoteTime: string;\n}\n\ntype RemoteVClockParams = {\n  remote: VClock;\n}\n\nexport class VCompare {\n\n  private local: VClock;\n  private isGreater = false;\n  private isLess = false;\n  private isWrongOrder = false;\n  private remote: VClock = {};\n  private localId: string;\n  private localTime: string;\n  private remoteTime: string;\n\n  constructor({ local, remote, localId, localTime, remoteTime }: VectorClockParams) {\n    this.local = local;\n    this.remote = typeof remote === 'string'\n      ? JSON.parse(remote)\n      : remote;\n    this.localId = localId;\n    this.localTime = localTime;\n    this.remoteTime = remoteTime;\n  }\n\n  setRemote({ remote }: RemoteVClockParams) {\n    this.remote = remote;\n  }\n\n  isConflicted(data?: RemoteVClockParams): boolean {\n    const remote = data?.remote || this.remote;\n    const keys = Object.keys({...this.local, ...remote});\n    keys.forEach(k => {\n      const localCount = this.local[k] || 0;\n      const remoteCount = remote[k] || 0;\n      this.isGreater = this.isGreater || localCount > remoteCount;\n      this.isLess = this.isLess || localCount < remoteCount;\n    });\n    return this.isGreater && this.isLess;\n  }\n\n  isOutDated(): boolean {\n    // Default localTime to any early date so that \n    // remote always wins when local is empty.\n    const { remoteTime, localTime = new Date('1970-01-01').toISOString() } = this;\n    if (!remoteTime || !localTime) throw new Error('Missing modified time');\n    return localTime >= remoteTime;\n  }\n\n  isOutOfOrder(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    const keys = Object.keys({...this.local, ...remote}).filter(k => k !== localId);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const drift = Math.abs((local[k] ?? 0) - (remote[k] ?? 0));\n      this.isWrongOrder = drift > 1;\n    }\n    return this.isWrongOrder;\n  }\n\n  merge() {\n    const merged: VClock = {};\n    const participants = new Set(Object.keys(this.local).concat(Object.keys(this.remote)));\n    // If the incoming participant vclock is lower, discard\n    for (const p of participants) {\n      const localP = this.local[p] || 0;\n      const remoteP = this.remote[p] || 0;\n      merged[p] = Math.max(localP, remoteP);\n    }\n    if (merged[this.localId] === undefined) {\n      merged[this.localId] = 0;\n    }\n    return merged;\n  }\n}","import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { ApplyChangeParams, Change, LogLevel, QueryParams, TinySynqOperation, TinySynqOptions, SyncableTable, TableNameRowParams, VClock, LatestChangesOptions } from './types.js';\nimport { Logger, ILogObj } from 'tslog';\nimport { VCompare } from './vcompare.class.js';\nimport { nanoid } from 'nanoid';\n\nconst log = new Logger({ name: 'tinysynq-web-init', minLevel: LogLevel.Info });\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\ntype PreProcessChangeOptions = {\n  change: Change, restore?: boolean\n}\n\ntype PreProcessChangeResult = { \n  valid: boolean;\n  reason: string;\n  vclock: VClock;\n  checks: Record<string, boolean>\n}\n\n/**\n * Basic utilities, mainly date-oriented.\n */\nexport type Utils = {\n  strtimeAsISO8601: string,\n  nowAsISO8601: string,\n  utcNowAsISO8601: () => string\n}\n\n/**\n * Parameters for retrieving table's ID column.\n * \n * @public\n */\nexport type GetTableIdColumnParams = {\n  table_name: string;\n}\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq {\n  private _db: any;\n  private _dbPath: string;\n  private _deviceId: string | undefined;\n  private _synqPrefix?: string;\n  private _synqTables?: Record<string, SyncableTable>;\n  private _synqBatchSize: number = 20;\n  private _wal = true;\n  private _server: any;\n  private log: Logger<ILogObj>;\n\n  /**\n   * Basic Helpers.\n   * \n   * @TODO move to a separate file.\n   * \n   * @public\n   */\n  readonly utils: Utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date().toISOString().replace('Z', '');\n    }\n  }\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n    const _synqTables: Record<string, SyncableTable> = {};\n    opts.tables.forEach(t => {\n      _synqTables[t.name] = t;\n    })\n    this._dbPath = opts.filePath || '';\n    this._db = opts.sqlite3 || undefined;\n    this._synqPrefix = opts.prefix?.trim().replace(/[^a-z0-9]+$/i, '');\n    this._synqTables = _synqTables;\n    this._synqBatchSize = opts.batchSize || this._synqBatchSize;\n    this._wal = opts.wal ?? false;\n    this.log = new Logger({\n      name: 'tinysynq-node',\n      minLevel: LogLevel.Debug,\n      type: 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(opts.logOptions || {})\n    });\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbPath) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.log.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              this.log.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              this.log.debug(...args);\n            },\n            onunhandled: (event: any) => {\n              this.log.error('@UNHANDLED', event);\n            }\n          });\n        });\n        \n        this.log.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          this.log.debug(`open ${this.dbPath}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}?vfs=opfs`,\n          });\n  \n          this.log.info(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}`\n          });\n          this.log.info(\n            'OPFS not available, created in-memory database at',\n            res.result.filename, '$1'\n          );\n        }\n  \n        if (!res) return reject('Unable to start DB');\n\n        const { dbId } = res;\n        this._deviceId = dbId;\n        this.setDeviceId();\n      \n        const conf = await promiser('config-get', {});\n        this.log.info('Running SQLite3 version', conf.result.version.libVersion);\n        \n        this._db = promiser;\n    \n        // Set WAL mode if necessary\n        if (this._wal === true) {\n          await this.runQuery({\n            sql: `PRAGMA journal_mode=WAL;`\n          });\n        }\n        resolve(this);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        this.log.error(err.name, err.message);\n        this.log.error(err)\n        reject('DB setup failed.');\n      }\n    });\n  };\n\n  /**\n   * SQLiteWASM instance (See {@link https://github.com/sqlite/sqlite-wasm | SQLite Wasm})\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Path to DB file\n   * \n   * @example\n   * \n   * `./app.db` or `/tmp/app.db`\n   */\n  get dbPath() {\n    return this._dbPath;\n  }\n\n  /**\n   * Automatically generated ID for device's DB instance.\n   * \n   * @remarks\n   * \n   * This ID is used by the sync protocol to identify the database.\n   * One it is generated once during setup and does not change. The\n   * value is stored in the `_meta` table (`meta_name='device_id'`).\n   * __Do not edit this value; doing so would corrupt synchronisation__.\n   */\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  /**\n   * Alias for {@link TinySynq.deviceId}.\n   */\n  get synqDbId() {\n    return this._deviceId;\n  }\n\n  /**\n   * The prefix used for TinySynq's tables.\n   * \n   * @defaultValue `tinysynq`\n   */\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  /**\n   * Object containing {@link SyncableTable}s, keyed by table name.\n   * \n   * @remarks\n   * \n   * A {@link SyncableTable} structure is never modified. TinySynq maintains \n   * its own tables and triggers for tracking and responding to changes.\n   * \n   * @returns Record\\<string, SyncableTable\\>\n   */\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  /**\n   * Number of records to process in each batch when syncing changes. \n   */\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  /**\n   * Enable or disable WAL mode.\n   * \n   * @defaultValue true\n   */\n  get wal() {\n    return this._wal;\n  }\n\n  /**\n   * Get a random 16-character ID generated by nanoid\n   * \n   * @returns string\n   */\n  getNewId() {\n    return nanoid(16);\n  }\n\n  /**\n   * Get the column used as identifier for the {@link SyncableTable}.\n   * \n   * @param params - Details of table for which to retrieve ID column.\n   * @returns Column name\n   */\n  getTableIdColumn(params: GetTableIdColumnParams) {\n    const {table_name} = params;\n    return this.synqTables![table_name]?.id as string;\n  }\n\n  /**\n   * If not already set, generates and sets deviceId.\n   */\n  async setDeviceId() {\n    // Set the device ID\n    let existing: any;\n    try {\n      existing = (await this.runQuery<any[]>({\n        sql: `SELECT meta_value FROM ${this.synqPrefix}_meta WHERE meta_name = 'device_id'`\n      }))[0];\n    }\n    catch(err) {\n      this.log.warn(`Couldn't retrieve device ID`);\n    }\n\n    log.warn('@device_id', existing);\n    if (!existing?.meta_value) {\n      const res = await this.runQuery<any[]>({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES (?,?) RETURNING *`,\n        values: ['device_id', this.deviceId]\n      });\n      log.warn('@created record for device_id:', res);\n      existing = res[0];\n    }\n    this._deviceId = existing?.meta_value;\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @remarks\n   * This method does not return any records, only the result of the operation.\n   * \n   * @param params - The SQL query and optionally any values.\n   * @returns\n   */\n  async run<T = any>(params: QueryParams): Promise<T> {\n    return this.runQuery(params);\n  }\n\n  /**\n   * Run multiple operations against the DB\n   * \n   * @remarks\n   * This method does not return any records.\n   * \n   * @param params - The SQL query and optionally an array of arrays or key/value pairs\n   * @returns Undefined or an error, if one occurred\n   */\n  async runMany(params: QueryParams) {\n    const {sql, values, prefix = ':'} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    const dbId = this.synqDbId;\n    this.log.debug('@runMany', {quid, sql, values});\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (const v of values) {\n          const bind = this.reformatQueryValues({values: v, prefix});\n          await this.db('exec', {dbId, sql, bind});\n        }\n      }\n      catch(err) {\n        this.log.error({quid, err, stack: (err as Error).stack});\n        reject(err);\n      }\n      resolve(true);\n    });\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @param params - The SQL query and optionally any values\n   * @returns Array of records returned from the database\n   */\n  async runQuery<T = any>(params: QueryParams): Promise<T> {\n    const {sql, prefix = ':'} = params;\n    const values = this.reformatQueryValues({values: params.values, prefix});\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', quid, sql, values, '/');\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql,\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) {\n              this.log.debug('@runQuery RESOLVED', results.length, quid);\n              this.log.trace(sql, values);\n              return resolve(results as any);\n            }\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        this.log.error(quid, err, (err as Error).stack);\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Renames keys of a query's value object to make them compatible\n   * with the SQLiteWASM API's bind parameters.\n   * \n   * @param\n   * @returns \n   */\n  reformatQueryValues({values, prefix = ':'}: {values: any, prefix?: string}) {\n    if (Array.isArray(values)) return values;\n    if (typeof values === 'object') {\n      const keys = Object.keys(values);\n      const remapped: Record<string, any> = {};\n      keys.forEach(k => {\n        const newK = k.startsWith(prefix) ? k : `${prefix}${k}`;\n        remapped[newK] = values[k];\n      });\n      return remapped;\n    }\n    return values;\n  }\n\n  /**\n   * Returns the current device's unique TinySynq ID.\n   * \n   * @returns The device's assigned ID.\n   */\n  async getDeviceId(): Promise<string> {\n    if (this._deviceId) return this._deviceId;\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'device_id'`\n    });\n    return res[0].meta_value;\n  }\n\n  /**\n   * Returns an ISO8601 formatted date and time of the last successful local sync.\n   * \n   * @remarks\n   * \n   * A \"local sync\" is the process of sending local changes to the remote hub.\n   * \n   * @returns The time of the last sync.\n   */\n  async getLastSync(): Promise<string> {\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    this.log.trace('@getLastSync', res[0]);\n    return res[0]?.meta_value;\n  }\n  \n  /**\n   * Returns matching {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChanges(params?: {lastLocalSync?: string, columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync: string = params?.lastLocalSync || await this.getLastSync();\n    let { columns = ['c.*', 'trm.vclock'] } = params || {};\n    this.log.debug('@getChanges', lastLocalSync);\n  \n    let where: string = '';\n    let columnSelection = columns\n      .map(c => c.replace(/[^*._a-z0-9]+/gi, ''))\n      .join(',') || '*';\n  \n    if (lastLocalSync) {\n      where = 'WHERE c.modified > ?'\n    }\n    const sql = `\n      SELECT ${columnSelection}\n      FROM ${this._synqPrefix}_changes c\n      INNER JOIN ${this._synqPrefix}_record_meta trm\n      ON trm.table_name = c.table_name\n      AND trm.row_id = c.row_id\n      ${where}\n      ORDER BY c.modified ASC\n    `;\n    console.log('@SQL', sql)\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  /**\n   * Returns {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChangesSinceLastSync(params?: {columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync = await this.getLastSync() || undefined;\n    return this.getChanges({...params, lastLocalSync});\n  };\n\n  /**\n   * Writes debug mode value (true) which disables recording \n   * of operations on syncable tables.\n   * \n   * @remarks\n   * \n   * The value set by this method is checked by dedicated triggers.\n   * If the value is `1`, the active trigger writes the data to the\n   * `*_dump` table. It's worth purging the table data once done \n   * with debugging.\n   * \n   * @returns Result of the operation.\n   */\n  async enableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Writes debug mode value (false) which disables recording \n   * of operations on syncable tables.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   * \n   * @returns Result of the operation.\n   */\n  async disableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Empties the `*_dump` table.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   */\n  async clearDebugData() {\n    await this.run({sql: `DELETE FROM ${this._synqPrefix}_dump`});\n    await this.run({sql: `UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = ${this._synqPrefix}_dump`});\n  }\n  \n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private enableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');`\n    });\n  }\n\n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private async disableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');`\n    });\n  }\n\n  async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.run({sql});\n    return savepoint;\n  }\n\n  async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  /**\n   * Retrieves a single record.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  private async getRecord<T>(params: TableNameRowParams): Promise<T | any> {\n    const {table_name, row_id} = params;\n    const idCol = this.getTableIdColumn({table_name: table_name});\n    const sql = `SELECT * FROM ${table_name} WHERE ${idCol} = ?`;\n    const res = await this.runQuery({sql, values: [row_id]});\n    this.log.debug('@getRecord', res);\n    return res[0];\n  }\n\n  /**\n   * Retrieves a single record by it's ID.\n   * \n   * @remarks\n   * \n   * The column used to identify the record is according to the {@link SyncableTable}\n   * that was provided in {@link TinySynqOptionsBase.tables} at instantiation.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  async getById<T>(params: TableNameRowParams): Promise<T | any> {\n    const{table_name, row_id} = params;\n    return this.getRecord({table_name, row_id});\n  }\n\n  async insertRecordMeta({change, vclock}: any) {\n    this.log.warn('<<< @insertRecordMeta >>>', {change, vclock});\n    const { table_name, row_id, source } = change;\n    const mod = vclock[this._deviceId!] || 0;\n    const values = {\n      table_name,\n      row_id,\n      mod,\n      source,\n      vclock: JSON.stringify(vclock),\n      modified: this.utils.utcNowAsISO8601(),\n    };\n    return this.runQuery({\n      sql: `\n      INSERT INTO ${this._synqPrefix}_record_meta (table_name, row_id, source, mod, vclock)\n      VALUES (:table_name, :row_id, :source, :mod, :vclock)\n      ON CONFLICT DO UPDATE SET source = :source, mod = :mod, vclock = :vclock, modified = :modified\n      RETURNING *\n      `,\n      values,\n    });\n  }\n\n  /**\n   * Get associated meta data (including `vclock`) for record.\n   * \n   * @param params - Object containing table/row parameters.\n   * \n   * @returns Object containing row data from `*_record_meta`.\n   */\n  async getRecordMeta(params: {table_name: string, row_id: string}) {\n    const {table_name, row_id} = params;\n    const sql = `\n    SELECT *\n    FROM ${this.synqPrefix}_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id`;\n    const res = await this.runQuery({sql, values: {table_name, row_id}});\n    return res[0];\n  }\n\n  /**\n   * Returns changes that couldn't be applied yet because they\n   * were received out of sequence.\n   * \n   * @returns Array of pending changes.\n   */\n  async getPending() {\n    const sql = `\n    SELECT *\n    FROM ${this._synqPrefix}_pending\n    ORDER BY id ASC\n    `;\n    const res = await this.runQuery({sql});\n    return res;\n  }\n\n  /**\n   * Creates new pending record to be applied later.\n   * \n   * @param opts - Options for processing out-of-order change\n   * @returns Newly created pending record\n   */\n  private async processOutOfOrderChange({change}: {change: Change}) {\n    const {id, ...data} = change;\n    const sql = this.createInsertFromSystemObject({\n      data,\n      table_name: `${this._synqPrefix}_pending`,\n    });\n    this.log.trace('@processOutOfOrderChange\\n', sql, change);\n    const values: any = { ...data};\n    values.vclock = JSON.stringify(data.vclock);\n    const res = await this.runQuery({sql, values});\n    this.log.trace('@processOutOfOrderChange\\n', {res});\n    return res;\n  }\n\n  /**\n   * Determines whether to treat conflicted change as valid or invalid.\n   * \n   * @param opts - Options for processing concurrent change\n   * @returns boolean \n   */\n  private async processConflictedChange<T>({ record, change }: {record: T|any, change: Change}): Promise<boolean> {\n    this.log.warn('@processConflictedChange START', record, change)\n    // INSERT won't have a local record so accept the incoming change\n    if (change.operation === TinySynqOperation.INSERT) return true;\n\n    const localMeta = await this.getRecordMeta({...change});\n    this.log.trace('<<<@ processConflictedChange LLW @>>>', change.id, change.table_name, change.row_id, {record, localMeta, change});\n    if (change.modified > localMeta.modified) {\n      this.log.debug('<!> INTEGRATING REMOTE', change.id, change.table_name, change.row_id);\n      // Update local with the incoming changes\n      return true;\n    }\n    else {\n      this.log.debug('<!> KEEPING LOCAL', change.id, change.table_name, change.row_id);\n      // Keep the local change, but record receipt of the record.\n      return false;\n    }\n  }\n\n  /**\n   * Checks for and handles issues with incoming change to be applied.\n   * \n   * @returns Result of pre-processing.\n   */\n  private async preProcessChange(\n    {change, restore}: PreProcessChangeOptions\n  ): Promise<PreProcessChangeResult> {\n    let defaultReason = 'unknown';\n    let valid = false;\n    let reason = defaultReason;\n    const localId = this.deviceId!;\n    const { table_name, row_id, vclock: remote = {} } = change;\n    const record = await this.getRecord({table_name, row_id});\n    const meta = await this.getRecordMeta({table_name, row_id});\n    const local = meta?.vclock ? JSON.parse(meta.vclock) : {};\n    // If it's an insert, there won't be any meta.\n    const localTime = meta?.modified;\n    const remoteTime = change?.modified;\n\n    let latest: VClock = {};\n    const localV = new VCompare({ local, remote, localId, localTime, remoteTime });\n    let displaced = false;\n    let conflicted = false;\n    let stale = false;\n\n    // If we don't have the record, treat it as new\n    if (!restore && !record && change.operation !== TinySynqOperation.INSERT) {\n      reason = 'update before insert';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (restore || !record || !local || !local[localId]) {\n      latest = change.vclock;\n    }\n    \n    if (restore) {\n      valid = true;\n      reason = 'restoration';\n      latest = localV.merge();\n      return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n    }\n    else if (displaced = localV.isOutOfOrder()) {  \n      reason = 'received out of order';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (conflicted = localV.isConflicted()) {\n      valid = await this.processConflictedChange({record, change});\n      if (!valid) {\n        reason = 'concurrent writes'; \n      }\n      else {\n        latest = localV.merge();\n      }\n    }\n    else if (stale = localV.isOutDated()) {\n      reason = 'stale';\n    }\n    else if (reason === defaultReason) {\n      valid = true;\n      reason = '';\n      latest = localV.merge();\n    }\n\n    return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n  }\n\n  /**\n   * Creates an insert query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string.\n   */\n  createInsertFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    const columnsToInsert = Object.keys(data).join(',');\n    const editable = this._synqTables![table].editable || [];\n    const updates = Object.keys(data)\n      .filter(key => editable.includes(key))\n      .map(k => `${k} = :${k}`)\n      .join(',');    \n    if (!updates) throw new Error('No changes available');\n\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  /**\n   * Creates an insert query based on the system table name and data provided.\n   *  \n   * @param param0 - Parameters from which to create the query.\n   * \n   * @returns A SQL query string. \n   */\n  private createInsertFromSystemObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    this.log.silly('@createInsert...', {data});\n    const columnsToInsert = Object.keys(data).join(',');\n    const updates = Object.keys(data)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n    return insertSql;\n  }\n\n  private async updateLastSync({change}: {change: Change}) {\n    await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      values: { name: 'last_local_sync'},\n    });\n    await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, :value)`,\n      values: { name: 'last_sync', value: change.id }\n    });\n  }\n\n  private async applyChange({\n    change,\n    restore,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      // Check that the changes can actually be applied\n      const changeStatus = await this.preProcessChange({change, restore});\n      if (!changeStatus?.valid) {\n        this.log.warn('>>> Invalid change', changeStatus);\n        this.updateLastSync({change});\n        return;\n      }\n\n      const table = this.synqTables![change.table_name];\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n      else {\n        // There's no data so bail\n        throw new Error(`Cannot perform update with empty data:\\n${JSON.stringify(change, null, 2)}`);\n      }\n \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n\n      this.log.silly('@applyChange', {change, table, changeStatus});\n      switch(change.operation) {\n        case 'INSERT':\n        case 'UPDATE':\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          this.log.warn('>>> DELETE SQL <<<', sql, change.row_id);\n          await this.run({sql, values: [change.row_id]});\n          break;\n      }\n      await this.updateLastSync({change});\n\n      // Insert merged VClock data\n      const updatedRecordMeta = await this.insertRecordMeta({change, vclock: changeStatus.vclock});\n      this.log.silly({updatedRecordMeta});\n    }\n    catch (error: any) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}. Rolled back.`, {change});\n      this.log.error(error.stack)\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB({ changes, restore = false }: { changes: Change[], restore?: boolean }) {\n    await this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, restore, savepoint});\n        }\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    await this.enableTriggers();\n    this.log.silly(`Applied ${changes.length} change(s)`);\n  };\n\n  /**\n   * Get items that have been recently changed.\n   * \n   * @param opts \n   */\n  getFilteredChanges(opts?: LatestChangesOptions) {\n    let and: string[] = [];\n    let values: any = {};\n    if (opts?.exclude) {\n      and.push('source != :exclude');\n      values.exclude = opts.exclude;\n    }\n    if (opts?.checkpoint) {\n      and.push('id > :checkpoint');\n      values.checkpoint = opts.checkpoint;\n    }\n    else if (opts?.since) {\n      and.push('modified > :since');\n      values.since = opts.since\n    }\n    const sql = `\n    SELECT id, table_name, row_id, data, operation, source, vclock, modified\n    FROM ${this.synqPrefix}_changes\n    WHERE 1=1\n    ${and.join(' AND ')}\n    ORDER BY modified ASC`;\n\n    return this.runQuery({sql, values});\n  }\n\n  async tablesReady(): Promise<void> {\n    await this.enableTriggers();\n  }\n}","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, SyncableTable } from \"./types.js\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst initTinySynq = async (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysynq-setup', ...logOptions});\n  const ts = new TinySynq(config);\n\n  /**\n   * Pretty important: make sure to call `init()` :-)\n   */\n\n  await ts.init();\n\n  const getRecordMetaInsertQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    /* \n    db.is kind of insane, but it works. A rundown of what's happening:\n    - We're creating a trigger after a deletion (the easy part)\n    - Aside from recording the changes, we also need to add record-specific metadata:\n      - table name and row identifier,\n      - the number of times the record has been touched (including creation)\n      - the map of all changes across all devices — a Vector Clock (JSON format)\n    - Getting the vector clock is tricky, partly because of SQLite limitations\n      (no variables, control structures), and partly because it's possible that\n      no meta exists for the record.\n    - To work around db.we do a select to get the meta, but perform a union with\n      another select that just selects insert values.\n    - Included in both selects is\n      a 'peg' which we use to sort the UNIONed rows to ensure that if a valid row\n      exists, it's the first row returned.\n    - Now we select from db.union and limit to 1 result. If a record exists\n      then we get that record. If not, we get the values ready for insertion.\n    - Finally, if there's a conflict on PRIMAY KEY or UNIQUE contraints, we update\n      only the columns configured as editable.\n    */\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n    INSERT INTO ${ts.synqPrefix}_record_meta (table_name, row_id, source, mod, vclock)\n    SELECT table_name, row_id, source, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '${table.name}' as table_name,\n        ${version}.${table.id} as row_id, \n        '${ts.deviceId}' as source, \n        IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$.${ts.deviceId}', IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1) as vclock\n      FROM ${ts.synqPrefix}_record_meta\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id}\n      UNION\n      SELECT 0 as peg, '${table.name}' as table_name, ${version}.${table.id} as row_id, '${ts.deviceId}' as source, 1, json_object('${ts.deviceId}', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      source = '${ts.deviceId}',\n      mod = json_extract(excluded.vclock,'$.${ts.deviceId}'),\n      vclock = json_extract(excluded.vclock,'$'),\n      modified = '${ts.utils.utcNowAsISO8601().replace('Z', '')}'\n    ;`;\n    log.silly(sql);\n    return sql;\n  }\n\n  const getChangeUpdateQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n      UPDATE ${ts.synqPrefix}_changes\n      SET vclock = trm.vclock, source = trm.source\n      FROM (\n        SELECT vclock, source\n        FROM ${ts.synqPrefix}_record_meta\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n      ) AS trm\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id};\n    `;\n    return sql;\n  }\n\n  const setupTriggersForTable = async ({ table }: { table: SyncableTable }) => {\n    log.debug('Setting up triggers for', table.name);\n\n    // Template for inserting the new value as JSON in the `*_changes` table.\n    const jsonObject = (await ts.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    log.silly('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    /**\n     * These triggers run for changes originating locally. They are disabled\n     * when remote changes are being applied (`triggers_on` in `*_meta` table).\n     */\n\n    // Ensure triggers are up to date\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_insert_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_update_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    await ts.run({sql});\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n        \n        ${getRecordMetaInsertQuery({table, remove: true})}\n        \n        ${getChangeUpdateQuery({table, remove: true})}\n      END;`\n    });\n\n    /**\n     * All the triggers below will only be executed if `meta_name=\"debug_on\"`\n     * has the `meta_value=1` in the *_meta table, regardless of `triggers_on`.\n     */\n\n    // Remove previous versions\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_record_meta`});\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow a rudimentary tracing of DB actions on the synced tables.\n     */\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'INSERT', ${jsonObject.jo});\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    const oldJsonObject = jsonObject.jo.replace(/NEW/g, 'OLD');\n    \n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'DELETE', ${oldJsonObject});\n      END;`\n    });\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow comparison record meta before and after insert.\n     */\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta\n      BEFORE INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta\n      AFTER INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_record_meta\n      AFTER UPDATE ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    /* END OF DEBUG TRIGGERS */\n  }\n\n  // Create a change-tracking table and index\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      source TEXT,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_modified_idx ON ${ts.synqPrefix}_changes(modified)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_table_row_idx ON ${ts.synqPrefix}_changes(table_name, row_id)`\n  });\n\n  // Change *_pending is essentially a clone of *_changes used to hold items that\n  // cannot be applied yet because intermediate/preceding changes haven't been received.\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      source TEXT NOT NULL,\n      vclock BLOB NOT NULL,\n      mod INTEGER NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_pending_table_row_idx ON ${ts.synqPrefix}_pending(table_name, row_id)`\n  });\n\n  // Create a notice table\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  }); \n\n  // Create record meta table and index\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER,\n      source TEXT NOT NULL,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  });\n\n  await ts.run({\n    sql:`CREATE UNIQUE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_idx ON ${ts.synqPrefix}_record_meta(table_name, row_id)`\n  });\n  // @TODO: These may actually need to be compound indexes; need to evaluate queries.\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_source_idx ON ${ts.synqPrefix}_record_meta(source)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_modified_idx ON ${ts.synqPrefix}_record_meta(modified)`\n  });\n\n  // Create meta table\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  `});\n\n  await ts.run({\n    sql: `\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  `});\n\n  await ts.run({\n    sql: `CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_meta_name_idx ON ${ts.synqPrefix}_meta(meta_name)`\n  });\n  \n  // Enable debug mode\n  if (debug) await ts.enableDebug();\n\n  // Set the device ID\n  await ts.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n      await ts.run({\n        sql: preInitQuery\n      });\n    }\n  }\n\n  log.debug(`@${ts.synqPrefix}_meta`, ts.runQuery({sql:`SELECT * FROM pragma_table_info('${ts.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, ts.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = await ts.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    log.debug('@exists?', table.name, exists);\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    await setupTriggersForTable({ table });\n    ts.tablesReady();\n  }\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.debug(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      await ts.run({\n        sql: postInitQuery\n      });\n    }\n  }\n\n  return ts;\n};\n\nexport default initTinySynq;","import { TinySynq } from \"./tinysynq.class.js\";\nimport { SyncRequestType, SyncResponseType } from \"./types.js\";\n\ninterface TinySynqClientConfig {\n  /**\n   * Initialised TinySynq instance.\n   */\n  ts: TinySynq;\n  /**\n   * The domain or IP address (no protocol or port).\n   * \n   * @default localhost\n   */\n  hostname?: string;\n  /**\n   * The port number on which to connect.\n   *\n   * @default 7174\n   */\n  port?: number;\n  /**\n   * Whether or not it should a secure connection (wss://)\n   * \n   * @default false\n   */\n  secure?: boolean;\n}\n\nlet socket: WebSocket;\n\nconst defaultConfig = {\n  hostname: 'localhost',\n  port: 7174,\n  secure: false,\n};\n\nexport class TinySynqClient {\n\n  private _config: TinySynqClientConfig;\n  private _serverUrl: string;\n  private _ts: TinySynq;\n  private _ws: WebSocket | undefined;\n\n  get serverUrl() {\n    return this._serverUrl;\n  }\n\n  get ts() {\n    return this._ts;\n  }\n\n  get ws() {\n    return this._ws;\n  }\n\n  constructor(config: TinySynqClientConfig) {\n    this._config = config;\n    this._ts = config.ts;\n    const finalConfig = {...defaultConfig, ...this._config};\n    const { secure, hostname, port = '' } = finalConfig;\n    const ws = 'ws' + (secure ? 's' : '');\n    this._serverUrl = `${ws}://${hostname}${port ? ':' : ''}${port}`;\n  }\n\n  isOpenOrConnecting() {\n    return this.ws && [Number(this.ws.OPEN), Number(this.ws.CONNECTING)].includes(this.ws.readyState)\n  }\n  \n  async connect(): Promise<WebSocket> {\n    return new Promise((resolve, reject) => {\n      if (this.isOpenOrConnecting()) {\n        return resolve(this.ws as WebSocket);\n      }\n      this._ws = new WebSocket(this.serverUrl);\n      this._ws.addEventListener('open', (e) => {\n        console.log(\"TinySynq socket ready.\", e);\n        resolve(this.ws as WebSocket);\n      });\n      this._ws.addEventListener('error', (e) => {\n        console.log(\"TinySynq socket error:\", e);\n        if (this.isOpenOrConnecting()) reject(e);\n      });\n      this._ws.addEventListener('close', (e) => {\n        console.log('Closing TinySynq socket...', e);\n      });\n      this._ws.addEventListener('message', this.handleMessage.bind(this));\n    });\n  }\n\n  async sync() {\n    //if (!this.ws)\n    const changes = await this.ts.getChanges();\n    const payload = {type: SyncRequestType.push, changes, source: this.ts.deviceId};\n    console.log('@sync', payload);\n    this._ws?.send(JSON.stringify(payload));\n  }\n\n  private async handleMessage(e: any) {\n    console.log('@message', e);\n    const data = JSON.parse(e.data);\n    if (data.type === SyncResponseType.ack) {\n      console.log('Sync successful', data);\n    }\n    else {\n      console.log('Sync failed', data);\n    }\n  }\n}\n\n"],"names":["TinySynqOperation","SyncRequestType","SyncResponseType","LogLevel","VCompare","_ref","local","remote","localId","localTime","remoteTime","this","isGreater","isLess","isWrongOrder","JSON","parse","_proto","prototype","setRemote","_ref2","isConflicted","data","_this","Object","keys","_extends","forEach","k","localCount","remoteCount","isOutDated","_this$localTime","Date","toISOString","Error","isOutOfOrder","filter","i","length","_local$k","_remote$k","drift","Math","abs","merge","_step","merged","_iterator","_createForOfIteratorHelperLoose","Set","concat","done","p","value","max","undefined","body","e","recover","_iteratorSymbol","Symbol","iterator","_settle","pact","state","o","bind","s","v","then","observer","_Pact","onRejected","result","callback","onFulfilled","_isSettledPact","thenable","log","Logger","name","minLevel","Info","_forOf","target","check","step","reject","_cycle","_fixup","values","push","array","_forTo","strtimeAsISO8601","TinySynq","opts","_opts$prefix","_opts$wal","_db","_dbPath","_deviceId","_synqPrefix","_synqTables","_synqBatchSize","_wal","_server","utils","nowAsISO8601","utcNowAsISO8601","replace","filePath","sqlite3","tables","t","prefix","trim","batchSize","wal","Debug","type","maskValuesOfKeys","hideLogPositionForProduction","logOptions","init","_this2","db","Promise","resolve","dbPath","_catch","debug","res","_promiser","sqlite3Worker1Promiser","onready","onerror","err","error","_this$log","apply","slice","call","arguments","onunhandled","event","promiser","_temp4","dbId","setDeviceId","conf","_temp2","info","version","libVersion","_temp","runQuery","sql","_temp3","filename","_promiser2","_promiser3","message","getNewId","nanoid","getTableIdColumn","params","_this$synqTables$tabl","synqTables","table_name","id","existing","_temp8","_temp6","_existing","_this3","meta_value","warn","_temp5","_existing2","synqPrefix","deviceId","_temp7","_this3$runQuery","run","runMany","_this5","_params$prefix","quid","ceil","random","synqDbId","_temp11","_temp10","_temp9","reformatQueryValues","stack","_this6","_params$prefix2","results","row","trace","col","columnNames","_ref$prefix","Array","isArray","remapped","newK","startsWith","getDeviceId","_this7","getLastSync","_this8","_res$","getChanges","_temp12","lastLocalSync","_ref2$columns","columns","_this9","where","columnSelection","map","c","join","console","_params$lastLocalSync","getChangesSinceLastSync","_this10","enableDebug","_this11","disableDebug","clearDebugData","_this13","enableTriggers","disableTriggers","_this14","beginTransaction","_this15","savepoint","now","commitTransaction","_ref3","rollbackTransaction","_ref4","getRecord","_this18","row_id","idCol","getById","insertRecordMeta","_ref5","change","vclock","_this20","mod","source","stringify","modified","getRecordMeta","_this21","getPending","processOutOfOrderChange","_ref6","_this23","_objectWithoutPropertiesLoose","_excluded","createInsertFromSystemObject","processConflictedChange","_ref7","record","_this24","operation","INSERT","localMeta","preProcessChange","_ref8","restore","_this25","defaultReason","valid","reason","_change$vclock","meta","_temp18","_exit","_temp16","_result2","latest","checks","stale","displaced","conflicted","_temp15","localV","_temp19","_temp20","_this25$processConfli","_temp17","createInsertFromObject","_ref9","table","columnsToInsert","editable","updates","key","includes","_ref10","silly","updateLastSync","_ref11","_this26","applyChange","_ref12","_this27","changeStatus","_temp22","updatedRecordMeta","recordData","_temp21","outer","cases","testValue","test","dispatchIndex","awaitBody","_resumeAfterBody","discriminant","_resumeAfterTest","fallthroughCheck","_switch","insertSql","_interrupt","applyChangesToLocalDB","_ref13","changes","_ref13$restore","_this28","_temp27","_temp26","stage","shouldContinue","update","updateValue","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp25","_temp24","_temp23","getFilteredChanges","and","exclude","checkpoint","since","tablesReady","_createClass","get","next","return","TypeError","defaultConfig","hostname","port","secure","TinySynqClient","config","_config","_serverUrl","_ts","_ws","ts","finalConfig","_finalConfig$port","isOpenOrConnecting","ws","Number","OPEN","CONNECTING","readyState","connect","WebSocket","serverUrl","addEventListener","handleMessage","sync","_this2$_ws","payload","send","ack","preInit","postInit","getRecordMetaInsertQuery","_ref$remove","remove","getChangeUpdateQuery","_ref2$remove","_result","postInitQuery","exists","_ts$runQuery","jsonObject","jo","oldJsonObject","setupTriggersForTable","preInitQuery"],"mappings":"IAkKYA,EA+EAC,EAKAC,EAKAC,w9BAzFZ,SAAYH,GACVA,EAAA,OAAA,SACAA,EAAA,OAAA,SACAA,EAAA,OAAA,QACD,CAJD,CAAYA,IAAAA,EAIX,CAAA,IA2ED,SAAYC,GACVA,EAAA,KAAA,OACAA,EAAA,KAAA,MACD,CAHD,CAAYA,IAAAA,EAGX,CAAA,IAED,SAAYC,GACVA,EAAA,IAAA,MACAA,EAAA,KAAA,MACD,CAHD,CAAYA,IAAAA,EAGX,CAAA,IAED,SAAYC,GACVA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,MAAA,GAAA,OACD,CARD,CAAYA,IAAAA,EAQX,CAAA,ICrPD,IAAaC,eAWX,WAAA,SAAAA,EAAAC,GAAc,IAAAC,EAAKD,EAALC,MAAOC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAASC,EAASJ,EAATI,UAAWC,EAAUL,EAAVK,WAAUC,KATnDL,WAAK,EAAAK,KACLC,WAAY,EACZC,KAAAA,QAAS,EACTC,KAAAA,cAAe,EAAKH,KACpBJ,OAAiB,CAAE,EACnBC,KAAAA,oBACAC,eAAS,EAAAE,KACTD,gBAAU,EAGhBC,KAAKL,MAAQA,EACbK,KAAKJ,OAA2B,iBAAXA,EACjBQ,KAAKC,MAAMT,GACXA,EACJI,KAAKH,QAAUA,EACfG,KAAKF,UAAYA,EACjBE,KAAKD,WAAaA,CACpB,CAAC,IAAAO,EAAAb,EAAAc,iBAAAD,EAEDE,UAAA,SAAAC,GACET,KAAKJ,OADWa,EAANb,MAEZ,EAACU,EAEDI,aAAA,SAAaC,GAAyBC,IAAAA,EACpCZ,KAAMJ,GAASe,MAAAA,OAAAA,EAAAA,EAAMf,SAAUI,KAAKJ,OAQpC,OAPaiB,OAAOC,KAAIC,EAAK,CAAA,EAAAf,KAAKL,MAAUC,IACvCoB,QAAQ,SAAAC,GACX,IAAMC,EAAaN,EAAKjB,MAAMsB,IAAM,EAC9BE,EAAcvB,EAAOqB,IAAM,EACjCL,EAAKX,UAAYW,EAAKX,WAAaiB,EAAaC,EAChDP,EAAKV,OAASU,EAAKV,QAAUgB,EAAaC,CAC5C,GACOnB,KAAKC,WAAaD,KAAKE,MAChC,EAACI,EAEDc,WAAA,WAGE,IAAQrB,EAAiEC,KAAjED,WAAUsB,EAAuDrB,KAArDF,UAAAA,WAASuB,EAAG,IAAIC,KAAK,cAAcC,cAAaF,EACpE,IAAKtB,IAAeD,EAAW,MAAU,IAAA0B,MAAM,yBAC/C,OAAO1B,GAAaC,CACtB,EAACO,EAEDmB,aAAA,WACE,IAAQ7B,EAA2BI,KAA3BJ,OAAQD,EAAmBK,KAAnBL,MAAOE,EAAYG,KAAZH,QACvB,IAAKD,IAAWD,EAAO,MAAU,IAAA6B,MAAM,+BAEvC,IADA,IAAMV,EAAOD,OAAOC,KAAIC,KAAKf,KAAKL,MAAUC,IAAS8B,OAAO,SAAAT,GAAC,OAAIA,IAAMpB,CAAO,GACrE8B,EAAI,EAAGA,EAAIb,EAAKc,OAAQD,IAAK,CAAA,IAAAE,EAAAC,EAC9Bb,EAAIH,EAAKa,GACTI,EAAQC,KAAKC,KAAa,OAATJ,EAAClC,EAAMsB,IAAEY,EAAI,IAAeC,OAAdA,EAAKlC,EAAOqB,IAAEa,EAAI,IACvD9B,KAAKG,aAAe4B,EAAQ,CAC7B,CACD,OAAW/B,KAACG,YACd,EAACG,EAED4B,MAAA,WAIE,IAHA,IAG4BC,EAHtBC,EAAiB,CAAE,EAGzBC,2qBAAAC,CAFqB,IAAIC,IAAI1B,OAAOC,KAAKd,KAAKL,OAAO6C,OAAO3B,OAAOC,KAAKd,KAAKJ,aAEjDuC,EAAAE,KAAAI,MAAE,CAAnB,IAAAC,EAACP,EAAAQ,MAGVP,EAAOM,GAAKV,KAAKY,IAFF5C,KAAKL,MAAM+C,IAAM,EAChB1C,KAAKJ,OAAO8C,IAAM,EAEnC,CAID,YAH6BG,IAAzBT,EAAOpC,KAAKH,WACduC,EAAOpC,KAAKH,SAAW,GAElBuC,CACT,EAAC3C,CAAA,CA3DD,4BCsmBK,UACKqD,GACP,CAAA,MAAAC,UACFC,EAAAD,EAED,qCAhoB8B,IAkN9BE,EAAA,oBAAAC,OAAAA,OAAAC,WAAAD,OAAAC,SAAAD,OAAA,oBAAA,aA9IA,SAAAE,EAAAC,EAAAC,EAAAX,uCAUE,cADMY,EAAAH,EAAAI,KAA6C,KAAGH,EAAAC,IALrD,EAAAA,IACHA,EAAAX,EAAiCc,GAE7Bd,EAAAA,EAAMe,CAKR,SACeC,KAEf,cADIA,OAAOH,KAAY,KAAAH,KAAcD,EAAAI,KAAA,KAAAH,EAAA,QAGjCC,MACAX,EACJ,IAAAiB,EAAWP,IACTO,KACAP,EAEA,CACA,CAAA,IA/FsCQ,0BAC5C,SAAAA,IACAA,QAAAA,EAAOtD,UAAUoD,KAAE,WAA2BG,GAC9C,IAASC,EAAQ,IAAAF,IAED7D,KAAMyD,EAChB,GAAAH,EAAA,CA+BN,IAAAU,EAAA,EAAAV,EAAAW,EAAAH,+CAOG,OAAAC,CACH,CACU,OACA/D,IACA,QACAA,KAAAuD,EAAA,SAAqB3C,GACrB,IACA,IAAc+B,EAAA/B,EAAc8C,EAChB,EAAR9C,IACJwC,EAAaW,EAAA,EAAAE,EAAAA,EAAAtB,GAAAA,GACQmB,EAE7BV,EAAAW,EAAA,EAAAD,EAAAnB,8BAMG,CACM,EACSoB,CAChB,GAEE,IA8BD,SAAEG,EAAAC,UACJA,aAAAN,GAAA,EAAAM,EAAAV,CAED,KA/FIW,EAAM,IAAIC,EAAAA,OAAO,CAAEC,KAAM,oBAAqBC,SAAU/E,EAASgF,gBAoN5DC,EAAKC,EAAU5B,EAAA6B,MACvB,mBAAAD,EAAAzB,GAAA,KAED2B,EAAAvB,EAAAwB,EAAA1B,EAAAuB,EAAAzB,KA0BA,wDArBA,IADGc,EAAAjB,EAAA8B,EAAAjC,SACWoB,EAAAJ,KAAA,KACLO,EAAKH,uDACbA,EAAAA,EAAAL,aAWEL,EAAAU,QAEMhB,GACTK,EAACC,IAAAA,EAAA,IAAAQ,GAAA,EAAAd,EAED,EAEG+B,GACH3B,EAAiB,OAAA,OACR,SAAKR,GACd,IAEAiC,EAAAnC,0BAKA,CAAA,OAAOE,MAENU,GAAAA,EAAAM,KAED,OAAAN,EAAAM,KAAAoB,EAAA,SAAAhC,gBAIGgC,IAED,OAAA1B,mEASF,IADG,IAAA2B,EAAA,GACHrD,EAAA,EAAAA,EAAiB+C,EAA8B9C,OAAAD,IAC7CqD,EAAAC,KAAMP,EAAC/C,WArHH,SAAKuD,EAASpC,EAAyB6B,GAEvC,IAAAtB,EAAAwB,EAAAlD,GAAA,oBAE4BoC,GAC5B,eACQnC,UAAK+C,IAASA,MAEnB,IADCZ,EAAAjB,EAAAnB,KACDoC,EAAEJ,KAAA,CACJ,IAAAO,EAAAH,GAID,YADFA,EAAAJ,KAAAmB,EAAgBD,IAAAA,EAAAzB,EAAAI,KAAA,KAAAH,EAAA,IAAAQ,EAAA,SAFPH,CAKN,CAEDL,MACM,EAAAU,GAEVV,EAAGU,EACJ,MAAChB,GAEFK,EAAAC,IAAAA,EAAA,IAAAQ,GAAA,EAAAd,GAEG,CACH+B,GACEzB,EA4FD8B,CAAAH,EAAA,SAAArD,GAAA,OAAAmB,EAAAkC,EAAArD,GAAA,EAAAgD,EAED,CAjRF,IAAMS,EAAgB,sCAuCTC,0BA+BX,SAAAA,EAAYC,GAAqBC,IAAAA,EAAAC,EAC/B,GAD+BxF,KA9BzByF,SAAG,EAAAzF,KACH0F,aAAO,EAAA1F,KACP2F,eACAC,EAAAA,KAAAA,iBACAC,EAAAA,KAAAA,iBACAC,EAAAA,KAAAA,eAAyB,GAAE9F,KAC3B+F,MAAO,EAAI/F,KACXgG,aACA5B,EAAAA,KAAAA,SASC6B,EAAAA,KAAAA,MAAe,CACtBb,iBAAAA,EACAc,aAAcd,EACde,gBAAiB,WACf,OAAW,IAAA7E,MAAOC,cAAc6E,QAAQ,IAAK,GAC/C,IASKd,EAAKe,WAAaf,EAAKgB,QAC1B,MAAU,IAAA9E,MAAM,yCAElB,IAAMqE,EAA6C,CAAE,EACrDP,EAAKiB,OAAOvF,QAAQ,SAAAwF,GAClBX,EAAYW,EAAElC,MAAQkC,CACxB,GACAxG,KAAK0F,QAAUJ,EAAKe,UAAY,GAChCrG,KAAKyF,IAAMH,EAAKgB,cAAWzD,EAC3B7C,KAAK4F,YAAyB,OAAdL,EAAGD,EAAKmB,aAAM,EAAXlB,EAAamB,OAAON,QAAQ,eAAgB,IAC/DpG,KAAK6F,YAAcA,EACnB7F,KAAK8F,eAAiBR,EAAKqB,WAAa3G,KAAK8F,eAC7C9F,KAAK+F,KAAeP,OAAXA,EAAGF,EAAKsB,MAAGpB,EACpBxF,KAAKoE,IAAM,IAAIC,EAAMA,OAAAtD,EACnBuD,CAAAA,KAAM,gBACNC,SAAU/E,EAASqH,MACnBC,KAAM,OACNC,iBAAkB,CAAC,WAAY,kBAC/BC,8BAA8B,GAC1B1B,EAAK2B,YAAc,CAAE,GAE7B,CAAC,IAAA3G,EAAA+E,EAAA9E,UA+JA,OA/JAD,EAEK4G,KAAIA,WAAA,IAAA,IAAAC,EAAAnH,KAAAY,EAAAuG,EACR,OAAIA,EAAKC,GAAWC,QAAQC,QAAQH,EAAKC,IACpCD,EAAKI,OAEVF,QAAAC,QAAO,IAAID,QAAeC,SAAAA,EAASzC,GAAU,IAAA,OAAAwC,QAAAC,QAAAE,EACvC,WAC+B,OAAjCL,EAAK/C,IAAIqD,MAAM,mBAAkBJ,QAAAC,QACL,IAAID,QAAQ,SAACK,GACvC,IAAMC,EAAYC,EAAsBA,uBAAC,CACvCC,QAAS,WACPH,EAAIC,EACN,EACAG,QAAS,SAACC,GACRZ,EAAK/C,IAAI4D,MAAM,SAAUD,EAC3B,EACAN,MAAO,WAAiB,IAAAQ,GACtBA,EAAArH,EAAKwD,KAAIqD,MAAKS,MAAAD,EAAAE,GAAAA,MAAAC,KAAAC,WAChB,EACAC,YAAa,SAACC,GACZpB,EAAK/C,IAAI4D,MAAM,aAAcO,EAC/B,GAEJ,IAAE5E,KAAA,SAfI6E,GAiByB,OAA/BrB,EAAK/C,IAAIqD,MAAM,iBAAgBJ,QAAAC,QACzBkB,EAAS,aAAc,CAAA,IAAG7E,yBAAA8E,IA0BhC,OAAKf,GAGLP,EAAKxB,UADY+B,EAATgB,KAERvB,EAAKwB,cAActB,QAAAC,QAEAkB,EAAS,aAAc,CAAE,IAAC7E,KAAvCiF,SAAAA,GAAIC,SAAAA,IAWVvB,EAAOH,EAAO,CAVdA,EAAK/C,IAAI0E,KAAK,0BAA2BF,EAAK7E,OAAOgF,QAAQC,YAE7D7B,EAAK1B,IAAM+C,EAAS,IAAAS,EAGhB9B,WAAAA,IAAc,IAAdA,EAAKpB,YAAasB,QAAAC,QACdH,EAAK+B,SAAS,CAClBC,IAAG,8BACHxF,KAAA,WAAA,EAAA,CAHAwD,GAGA,OAAA8B,GAAAA,EAAAtF,KAAAsF,EAAAtF,KAAAkF,GAAAA,GAAA,IAfahE,EAAO,qBAepB,CAvCJ,IAAI6C,EAAI0B,EAAA5B,EAAA,WAGmC,OAAzCL,EAAK/C,IAAIqD,MAAK,QAASN,EAAKI,OAAW,OAAEF,QAAAC,QAC7BkB,EAAS,OAAQ,CAC3Ba,SAAkBlC,QAAAA,EAAKI,sBACvB5D,KAAA2F,SAAAA,GAEFnC,EAAK/C,IAAI0E,KACP,oDALFpB,EAAG4B,GAMGvF,OAAOsF,SAASjD,QAAQ,yBAA0B,MACtD,EACH,aACUiB,OAAAA,QAAAC,QAEGkB,EAAS,OAAQ,CAC3Ba,SAAkBlC,QAAAA,EAAKI,UACvB5D,KAAA,SAAA4F,GACFpC,EAAK/C,IAAI0E,KACP,qDAJFpB,EAAG6B,GAKGxF,OAAOsF,SAAU,KACrB,EACH,GAAAD,OAAAA,GAAAA,EAAAzF,KAAAyF,EAAAzF,KAAA8E,GAAAA,GAAA,EAAA,EAoBF,EAAA,SACKV,GACEA,aAAevG,QACnBuG,EAAM,IAAIvG,MAAMuG,EAAIhE,OAAOyF,UAE7BrC,EAAK/C,IAAI4D,MAAMD,EAAIzD,KAAMyD,EAAIyB,SAC7BrC,EAAK/C,IAAI4D,MAAMD,GACflD,EAAO,mBACR,GACH,CAAC,MAAA9B,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAC,CAAA,IA5EuBsE,QAAQxC,OAAO,wCA6E1C,CAAC,MAAA9B,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAqFDmJ,SAAA,WACE,OAAOC,EAAAA,OAAO,GAChB,EAACpJ,EAQDqJ,iBAAA,SAAiBC,GAA8B,IAAAC,EAE7C,OAAOA,OAAPA,EAAO7J,KAAK8J,WADSF,EAAdG,kBACAF,EAAAA,EAA8BG,EACvC,EAAC1J,EAKKqI,YAAWA,WAAA,IAAA,IAEXsB,EAFWC,EAAAA,WAAAC,SAAAA,IAAAC,IAAAA,EAqBfC,EAAK1E,UAAYyE,OAAHA,EAAGH,QAAAG,EAAAA,EAAUE,UAAW,CATtClG,EAAImG,KAAK,aAAcN,GAAU,IAAAO,EAAAC,SAAAA,GAC7B,GAACA,OAADA,EAACR,KAAAQ,EAAUH,kBAAUjD,QAAAC,QACL+C,EAAKnB,SAAgB,CACrCC,IAAG,0BAA4BkB,EAAKK,WAAkE,yDACtG1F,OAAQ,CAAC,YAAaqF,EAAKM,aAC3BhH,KAAA,SAHI+D,GAINtD,EAAImG,KAAK,iCAAkC7C,GAC3CuC,EAAWvC,EAAI,EAAG,EAAA,CAPa+C,GAOb,OAAAD,GAAAA,EAAA7G,KAAA6G,EAAA7G,KAAAwG,GAAAA,GAAAE,EAAAA,EAfArK,KAFF4K,EAAApD,aACdH,OAAAA,QAAAC,QACgB+C,EAAKnB,SAAgB,CACrCC,IAA+BkB,0BAAAA,EAAKK,WAAU,yCAC9C/G,cAAAkH,GAFFZ,EAAWY,EAEP,EAAG,EACR,EAAA,WAECR,EAAKjG,IAAImG,KAAI,8BACd,UAAAlD,QAAAC,QAAAsD,GAAAA,EAAAjH,KAAAiH,EAAAjH,KAAAuG,GAAAA,IAYH,CAAC,MAAAnH,GAAAsE,OAAAA,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAWKwK,IAAG,SAAUlB,GAAmB,IACpC,OAAAvC,QAAAC,QAAOtH,KAAKkJ,SAASU,GACvB,CAAC,MAAA7G,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAWKyK,QAAOA,SAACnB,GAAmB,IAAA,IAAAoB,EAGlBhL,KAFNmJ,EAA6BS,EAA7BT,IAAKnE,EAAwB4E,EAAxB5E,OAAMiG,EAAkBrB,EAAhBnD,OAAAA,OAAM,IAAAwE,EAAG,IAAGA,EAC1BC,EAAOlJ,KAAKmJ,KAAqB,IAAhBnJ,KAAKoJ,UACtB1C,EAAOsC,EAAKK,SAElB,OADAL,EAAK5G,IAAIqD,MAAM,WAAY,CAACyD,KAAAA,EAAM/B,IAAAA,EAAKnE,OAAAA,IACvCqC,QAAAC,QAAO,IAAID,QAAO,SAAQC,EAASzC,GAAU,IAAA,IAAAyG,EAAA,WAW3ChE,GAAQ,EAAM,EAAAiE,EAAA/D,EAVV,WAAA,IAAAgE,EAAA/G,EACcO,EAALtB,SAAAA,GACT,IAAMF,EAAOwH,EAAKS,oBAAoB,CAACzG,OAAQtB,EAAG+C,OAAAA,IAAS,OAAAY,QAAAC,QACrD0D,EAAK5D,GAAG,OAAQ,CAACsB,KAAAA,EAAMS,IAAAA,EAAK3F,KAAAA,KAAMG,KAAA,WAAA,EACzC,GAAA,GAAA6H,GAAAA,EAAA7H,KAAA6H,OAAAA,EAAA7H,KAAA,WAAA,EACF,EAAA,SACKoE,GACJiD,EAAK5G,IAAI4D,MAAM,CAACkD,KAAAA,EAAMnD,IAAAA,EAAK2D,MAAQ3D,EAAc2D,QACjD7G,EAAOkD,EACR,GAAAV,OAAAA,QAAAC,QAAAiE,GAAAA,EAAA5H,KAAA4H,EAAA5H,KAAA2H,GAAAA,IAEH,CAAC,MAAAvI,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAC,CAAA,GACJ,CAAC,MAAAA,GAAAsE,OAAAA,QAAAxC,OAAA9B,KAAAzC,EAQK4I,SAAQ,SAAUU,OAAmB+B,IAAAA,EAE1B3L,KADRmJ,EAAqBS,EAArBT,IAAGyC,EAAkBhC,EAAhBnD,OACNzB,EAAS2G,EAAKF,oBAAoB,CAACzG,OAAQ4E,EAAO5E,OAAQyB,YAD9C,IAAAmF,EAAG,IAAGA,IAElBV,EAAOlJ,KAAKmJ,KAAqB,IAAhBnJ,KAAKoJ,UAC5BO,EAAKvH,IAAIqD,MAAM,YAAayD,EAAM/B,EAAKnE,EAAQ,KAC/C,IAAM0D,EAAOiD,EAAKN,SAClB,OAAAhE,QAAAC,QAAO,IAAID,QAAQ,SAACC,EAASzC,GAC3B,IAAMgH,EAAiB,GACvB,IACEF,EAAKvE,GAAG,OAAQ,CACdsB,KAAAA,EACAS,IAAAA,EACA3F,KAAMwB,EACNhB,SAAU,SAACD,GACT,IAAKA,EAAO+H,IAGV,OAFAH,EAAKvH,IAAIqD,MAAM,qBAAsBoE,EAAQjK,OAAQsJ,GACrDS,EAAKvH,IAAI2H,MAAM5C,EAAKnE,GACbsC,EAAQuE,GAEjB,IAAMtI,EAAS,CAAA,EACfQ,EAAO+H,IAAI9K,QAAQ,SAACgL,EAAarK,UAAc4B,EAAEQ,EAAOkI,YAAYtK,IAAMoC,EAAO+H,IAAInK,EAAE,GACvFkK,EAAQ5G,KAAK1B,EACf,GAEH,CACD,MAAMwE,GACJ4D,EAAKvH,IAAI4D,MAAMkD,EAAMnD,EAAMA,EAAc2D,OACzC7G,EAAOkD,EACR,CACH,GACF,CAAC,MAAAhF,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EASDmL,oBAAA,SAAA/L,GAA0E,IAArDsF,EAAMtF,EAANsF,OAAMkH,EAAAxM,EAAE+G,OAAAA,WAAMyF,EAAG,IAAGA,EACvC,GAAIC,MAAMC,QAAQpH,GAAS,OAAOA,EAClC,GAAsB,iBAAXA,EAAqB,CAC9B,IAAMlE,EAAOD,OAAOC,KAAKkE,GACnBqH,EAAgC,CAAE,EAKxC,OAJAvL,EAAKE,QAAQ,SAAAC,GACX,IAAMqL,EAAOrL,EAAEsL,WAAW9F,GAAUxF,KAAOwF,EAASxF,EACpDoL,EAASC,GAAQtH,EAAO/D,EAC1B,GACOoL,CACR,CACD,OAAOrH,CACT,EAAC1E,EAOKkM,YAAWA,WAAA,IAAA,IAAAC,EACXzM,KAAJ,OAAIyM,EAAK9G,UAAW0B,QAAAC,QAAOmF,EAAK9G,WAAU0B,QAAAC,QACxBmF,EAAKvD,SAAgB,CACrCC,IAAG,oCACwBsD,EAAK/B,WAEjC,kDAAC/G,KAJI+D,SAAAA,GAKN,OAAOA,EAAI,GAAG4C,UAAW,EAC3B,CAAC,MAAAvH,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAWKoM,YAAWA,eAAAC,IAAAA,EACG3M,KAAIqH,OAAAA,QAAAC,QAAJqF,EAAKzD,SAAgB,CACrCC,IAAG,oCACwBwD,EAAKjC,WAAU,wDAE1C/G,KAAA,SAJI+D,GAAG,IAAAkF,EAMT,OADAD,EAAKvI,IAAI2H,MAAM,eAAgBrE,EAAI,IACtB,OAAbkF,EAAOlF,EAAI,SAAE,EAANkF,EAAQtC,UAAW,EAC5B,CAAC,MAAAvH,GAAAsE,OAAAA,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAYKuM,WAAU,SAACjD,GAAqD,IAAAkD,IAAAA,EAAAA,SAChEC,GACJ,IAAsDC,GAAZpD,GAAU,CAAE,GAAhDqD,QAAAA,OAAU,IAAHD,EAAG,CAAC,MAAO,cAAaA,EACrCE,EAAK9I,IAAIqD,MAAM,cAAesF,GAE9B,IAAII,EAAgB,GAKhBJ,IACFI,EAAQ,wBAEV,IAAMhE,EACKiE,mBARWH,EACnBI,IAAI,SAAAC,GAAC,OAAIA,EAAElH,QAAQ,kBAAmB,GAAG,GACzCmH,KAAK,MAAQ,KAOPL,gBAAAA,EAAKtH,4CACCsH,EAAKtH,YAAW,oGAG3BuH,EAAK,wCAGTK,QAAQpJ,IAAI,OAAQ+E,GACpB,IAAMnE,EAAS+H,EAAgB,CAACA,GAAiB,GAGjD,OAFAG,EAAK9I,IAAIqD,MAAM0B,EAAKnE,GAEbkI,EAAKhE,SAAmB,CAACC,IAAAA,EAAKnE,OAAAA,GAAS,EAAAkI,EAzBalN,KAAIyN,EAAnC7D,MAAAA,OAAAA,EAAAA,EAAQmD,cAAa1F,OAAAA,QAAAC,QAAAmG,EAAAX,EAAAW,GAAApG,QAAAC,QAAU4F,EAAKR,eAAa/I,KAAAmJ,GA0B/E,CAAC,MAAA/J,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAYKoN,iCAAwB9D,GAA6B,IAAA,IAAA+D,EAC/B3N,KAAIqH,OAAAA,QAAAC,QAAJqG,EAAKjB,eAAa/I,KAAA,SAAxCoJ,GACJ,OAAOY,EAAKd,WAAU9L,EAAA,CAAA,EAAK6I,EAAM,CAAEmD,cAAAA,IAAgB,EACrD,CAAC,MAAAhK,UAAAsE,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAeKsN,YAAWA,WAAA,IACf,OAAAvG,QAAAC,QAAOtH,KAAK8K,IAAI,CACd3B,IACyB0E,kCAFpB7N,KAEyB0K,WAG/B,sFACH,CAAC,MAAA3H,GAAAsE,OAAAA,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAUKwN,aAAYA,WAAA,IAChB,OAAAzG,QAAAC,QAAOtH,KAAK8K,IAAI,CACd3B,IAAG,kCADEnJ,KAEyB0K,WAG/B,sFACH,CAAC,MAAA3H,GAAAsE,OAAAA,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAOKyN,eAAc,WAAA,IAAA,IAAAC,EACZhO,KAAI,OAAAqH,QAAAC,QAAJ0G,EAAKlD,IAAI,CAAC3B,IAAoB6E,eAAAA,EAAKpI,uBAAoBjC,KAAA0D,WAAAA,OAAAA,QAAAC,QACvD0G,EAAKlD,IAAI,CAAC3B,IAAG,mDAAqD6E,EAAKpI,YAAW,WAASjC,KAAA,WAAA,EAAA,EACnG,CAAC,MAAAZ,GAAAsE,OAAAA,QAAAxC,OAAA9B,KAAAzC,EAQO2N,eAAA,WACN,OAAWjO,KAAC8K,IAAI,CACd3B,IAAG,kCACsBnJ,KAAK0K,WAAU,qEAG5C,EAACpK,EAQa4N,2BAAe,IAC3B,OAAA7G,QAAAC,QAAOtH,KAAK8K,IAAI,CACd3B,IACyBgF,kCAFpBnO,KAEyB0K,WAAU,sEAG5C,CAAC,MAAA3H,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAEK8N,iBAAgBA,eAAAC,IACdC,EAAS,KAAQhN,KAAKiN,MACU,OAAAlH,QAAAC,QAChCtH,KAAK8K,IAAI,CAAC3B,IADSmF,aAAAA,SACJ3K,KACrB,WAAA,OAAO2K,CAAU,EACnB,CAAC,MAAAvL,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAEKkO,kBAAiB,SAAAC,GAAE,IAAAH,EAASG,EAATH,UAA+B,IAEtD,OAAAjH,QAAAC,QAAOtH,KAAK8K,IAAI,CAAC3B,yBADgBmF,EAAS,MAE5C,CAAC,MAAAvL,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAEKoO,oBAAmBA,SAAAC,GAAE,IAAAL,EAASK,EAATL,UAA+B,IAExD,OAAAjH,QAAAC,QAAOtH,KAAK8K,IAAI,CAAC3B,IADgCmF,qCAAAA,EAAY,MAE/D,CAAC,MAAAvL,GAAAsE,OAAAA,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAQasO,UAASA,SAAIhF,GAA0B,IAAAiF,IAAAA,EAErC7O,KADP+J,EAAsBH,EAAtBG,WAAY+E,EAAUlF,EAAVkF,OACbC,EAAQF,EAAKlF,iBAAiB,CAACI,WAAYA,IACY,OAAA1C,QAAAC,QAC3CuH,EAAK3F,SAAS,CAACC,IADxB,iBAAoBY,EAAoBgF,UAAAA,EAAW,OACtB/J,OAAQ,CAAC8J,MAASnL,cAAlD+D,GAEN,OADAmH,EAAKzK,IAAIqD,MAAM,aAAcC,GACtBA,EAAI,EAAG,EAChB,CAAC,MAAA3E,GAAAsE,OAAAA,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAaK0O,QAAO,SAAIpF,GAA0B,IAEzC,OAAAvC,QAAAC,QAAOtH,KAAK4O,UAAU,CAAC7E,WADKH,EAAtBG,WAC6B+E,OADPlF,EAAVkF,SAEpB,CAAC,MAAA/L,GAAAsE,OAAAA,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAEK2O,iBAAgB,SAAAC,GAAA,IAAEC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAY,IAAA,IAAAC,EAC1CrP,KAAAqP,EAAKjL,IAAImG,KAAK,4BAA6B,CAAC4E,OAAAA,EAAQC,OAAAA,IACpD,IAEMpK,EAAS,CACb+E,WAHqCoF,EAA/BpF,WAIN+E,OAJqCK,EAAnBL,OAKlBQ,IAJUF,EAAOC,EAAK1J,YAAe,EAKrC4J,OANqCJ,EAAXI,OAO1BH,OAAQhP,KAAKoP,UAAUJ,GACvBK,SAAUJ,EAAKpJ,MAAME,mBAEvB,OAAAkB,QAAAC,QAAO+H,EAAKnG,SAAS,CACnBC,IAAG,uBACWkG,EAAKzJ,YAIlB,uPACDZ,OAAAA,IAEJ,CAAC,MAAAjC,UAAAsE,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EASKoP,cAAaA,SAAC9F,GAA4C,IAMxC,OAAAvC,QAAAC,QAFftH,KAGgBkJ,SAAS,CAACC,IAH1BwG,4BAAA3P,KAAK0K,WAES,6EACiB1F,OAAQ,CAAC+E,WANlBH,EAAtBG,WAMoD+E,OAN9BlF,EAAVkF,WAMiDnL,KAA9D+D,SAAAA,GACN,OAAOA,EAAI,EAAG,EAChB,CAAC,MAAA3E,UAAAsE,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAQKsP,WAAUA,WAAA,IAKZ,OAAAvI,QAAAC,QAFKtH,KAGgBkJ,SAAS,CAACC,gCAH1BnJ,KAAK4F,YAAW,wCAKzB,CAAC,MAAA7C,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAQauP,iCAAuBC,GAAE,IAAAX,EAAMW,EAANX,OAAyB,IAAA,IAAAY,EAElD/P,KADEW,oIAAIqP,CAAIb,EAAMc,GACtB9G,EAAM4G,EAAKG,6BAA6B,CAC5CvP,KAAAA,EACAoJ,WAAegG,EAAKnK,yBAEtBmK,EAAK3L,IAAI2H,MAAM,6BAA8B5C,EAAKgG,GAClD,IAAMnK,EAAMjE,EAAaJ,CAAAA,EAAAA,GACmB,OAA5CqE,EAAOoK,OAAShP,KAAKoP,UAAU7O,EAAKyO,QAAQ/H,QAAAC,QAC1ByI,EAAK7G,SAAS,CAACC,IAAAA,EAAKnE,OAAAA,KAAQrB,KAAA,SAAxC+D,GAEN,OADAqI,EAAK3L,IAAI2H,MAAM,6BAA8B,CAACrE,IAAAA,IACvCA,CAAI,EACb,CAAC,MAAA3E,GAAAsE,OAAAA,QAAAxC,OAAA9B,KAAAzC,EAQa6P,wBAAuB,SAAAC,OAAMC,EAAMD,EAANC,OAAQlB,EAAMiB,EAANjB,OAAM,QAAmCmB,EAC1FtQ,KAEA,OAFAsQ,EAAKlM,IAAImG,KAAK,iCAAkC8F,EAAQlB,GAEpDA,EAAOoB,YAAclR,EAAkBmR,OAAQnJ,QAAAC,SAAO,GAAKD,QAAAC,QAEvCgJ,EAAKZ,cAAa3O,EAAA,CAAA,EAAKoO,KAAQxL,KAAjD8M,SAAAA,GAC4H,OAAlIH,EAAKlM,IAAI2H,MAAM,wCAAyCoD,EAAOnF,GAAImF,EAAOpF,WAAYoF,EAAOL,OAAQ,CAACuB,OAAAA,EAAQI,UAAAA,EAAWtB,OAAAA,IACrHA,EAAOM,SAAWgB,EAAUhB,UAC9Ba,EAAKlM,IAAIqD,MAAM,yBAA0B0H,EAAOnF,GAAImF,EAAOpF,WAAYoF,EAAOL,SAEvE,IAGPwB,EAAKlM,IAAIqD,MAAM,oBAAqB0H,EAAOnF,GAAImF,EAAOpF,WAAYoF,EAAOL,SAElE,EAEX,EAAA,CAAC,MAAA/L,UAAAsE,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAOaoQ,iBAAgBA,SAAAC,GAAA,IAC3BxB,EAAMwB,EAANxB,OAAQyB,EAAOD,EAAPC,QAAiC,IAAA,IAAAC,EAK1B7Q,KAHZ8Q,EAAgB,UAChBC,GAAQ,EACRC,EAASF,EACPjR,EAAUgR,EAAKlG,SACbZ,EAA4CoF,EAA5CpF,WAAY+E,EAAgCK,EAAhCL,OAAMmC,EAA0B9B,EAAxBC,OAAQxP,OAAM,IAAAqR,EAAG,CAAE,EAAAA,EAAY,OAAA5J,QAAAC,QACtCuJ,EAAKjC,UAAU,CAAC7E,WAAAA,EAAY+E,OAAAA,KAAQnL,KAAnD0M,SAAAA,GAAMhJ,OAAAA,QAAAC,QACOuJ,EAAKnB,cAAc,CAAC3F,WAAAA,EAAY+E,OAAAA,KAAQnL,KAArDuN,SAAAA,YAAIC,IAAA,IAAAC,EAAA,SAAAC,EAAAC,UAAAF,EAAAE,EAiDH,CAAEP,MAAAA,EAAOC,OAAAA,EAAQ5B,OAAQmC,EAAQC,OAAQ,CAAEC,MAAAA,EAAOC,UAAAA,EAAWC,WAAAA,GAAc,CAAAC,IAAAA,gBA5B9EhB,EAIgF,OAHlFG,GAAQ,EACRC,EAAS,cACTO,EAASM,EAAO3P,QACkEkP,EAAA,EAA3E,CAAEL,MAAAA,EAAOC,OAAAA,EAAQ5B,OAAQmC,EAAQC,OAAQ,CAAEC,MAAAA,EAAOC,UAAAA,EAAWC,WAAAA,IAAc,IAAAG,EAE3EJ,WAAAA,GAAAA,EAAYG,EAAOpQ,eACO,OAAjCuP,EAAS,wBAAwB3J,QAAAC,QAC3BuJ,EAAKhB,wBAAwB,CAACV,OAAAA,KAAQxL,KAAAoO,WAAAA,GAAAA,IAAAA,EAErCJ,WAAAA,GAAAA,EAAaE,EAAOnR,eAAc,OAAA2G,QAAAC,QAC3BuJ,EAAKV,wBAAwB,CAACE,OAAAA,EAAQlB,OAAAA,KAAQxL,KAAA,SAAAqO,IAA5DjB,EAAKiB,GAKHT,EAASM,EAAO3P,QAHhB8O,EAAS,uBAMJS,EAAQI,EAAOzQ,cACtB4P,EAAS,QAEFA,IAAWF,IAClBC,GAAQ,EACRC,EAAS,GACTO,EAASM,EAAO3P,QACjB,CAhBQyP,GAgBRI,OAAAA,GAAAA,EAAApO,KAAAoO,EAAApO,KAAA,WAAA,QAAAoO,CAAA,CApBQL,GAoBR,OAAAI,GAAAA,EAAAnO,KAAAmO,EAAAnO,KAAA,WAAA,QAAA,CAAA,IAAA,OAAAiO,GAAAA,EAAAjO,KAAAiO,EAAAjO,KAAA0N,GAAAA,EAAAO,EAAA,CA9CD,IAAMjS,EAAQuR,MAAAA,GAAAA,EAAM9B,OAAShP,KAAKC,MAAM6Q,EAAK9B,QAAU,CAAA,EAKnDmC,EAAiB,CAAA,EACfM,EAAS,IAAIpS,EAAS,CAAEE,MAAAA,EAAOC,OAAAA,EAAQC,QAAAA,EAASC,UAJhC,MAAJoR,OAAI,EAAJA,EAAMzB,SAIyC1P,iBAH9CoP,SAAAA,EAAQM,WAIvBiC,GAAY,EACZC,GAAa,EACbF,GAAQ,EAAMQ,iBAGbrB,IAAYP,GAAUlB,EAAOoB,YAAclR,EAAkBmR,OAChC,OAAhCQ,EAAS,uBAAuB3J,QAAAC,QAC1BuJ,EAAKhB,wBAAwB,CAACV,OAAAA,KAAQxL,KAEzC,WAAA,IAAIiN,GAAYP,GAAW1Q,GAAUA,EAAME,KAC9C0R,EAASpC,EAAOC,OACjB,IAAA6C,OAAAA,GAAAA,EAAAtO,KAAAsO,EAAAtO,KAAAwN,GAAAA,GA+BH,EAAA,EAAA,CAAC,MAAApO,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAeD4R,uBAAA,SAAAC,GAAwB,IAAAxR,EAAIwR,EAAJxR,KAAkByR,EAAKD,EAAjBpI,WACtBsI,EAAkBxR,OAAOC,KAAKH,GAAM4M,KAAK,KACzC+E,EAAWtS,KAAK6F,YAAauM,GAAOE,UAAY,GAChDC,EAAU1R,OAAOC,KAAKH,GACzBe,OAAO,SAAA8Q,GAAG,OAAIF,EAASG,SAASD,EAAI,GACpCnF,IAAI,SAAApM,GAAC,OAAOA,EAAC,OAAOA,CAAC,GACrBsM,KAAK,KACR,IAAKgF,EAAS,MAAU,IAAA/Q,MAAM,wBAS9B,MALgB4Q,uBAAAA,EAAUC,KAAAA,sBAFCxR,OAAOC,KAAKH,GAAM0M,IAAI,SAAApM,GAAC,MAAA,IAAQA,CAAC,GAAIsM,KAAK,KAGtC,sCACAgF,EAAO,sBAIvC,EAACjS,EASO4P,6BAAA,SAAAwC,GAA8B,IAAA/R,EAAI+R,EAAJ/R,KAAkByR,EAAKM,EAAjB3I,WAC1C/J,KAAKoE,IAAIuO,MAAM,mBAAoB,CAAChS,KAAAA,IACpC,IAAM0R,EAAkBxR,OAAOC,KAAKH,GAAM4M,KAAK,KACzCgF,EAAU1R,OAAOC,KAAKH,GACzB0M,IAAI,SAAApM,GAAC,OAAOA,EAAQA,OAAAA,CAAC,GACrBsM,KAAK,KAER,IAAKgF,EAAS,MAAM,IAAI/Q,MAAM,uBAO9B,MAJgB4Q,uBAAAA,OAAUC,EAAe,oBAFdxR,OAAOC,KAAKH,GAAM0M,IAAI,SAAApM,GAASA,MAAAA,IAAAA,CAAC,GAAIsM,KAAK,KAGtC,sCACAgF,EAAO,sBAGvC,EAACjS,EAEasS,eAAc,SAAAC,GAAE,IAAA1D,EAAM0D,EAAN1D,OAAyB,IAAA,IAAA2D,EAC/C9S,KAAIqH,OAAAA,QAAAC,QAAJwL,EAAK5J,SAAS,CAClBC,8BAA+B2J,EAAKpI,WAAU,mFAC9C1F,OAAQ,CAAEV,KAAM,sBAChBX,KAAA0D,WAAAA,OAAAA,QAAAC,QACIwL,EAAK5J,SAAS,CAClBC,8BAA+B2J,EAAKpI,WAAU,sDAC9C1F,OAAQ,CAAEV,KAAM,YAAa3B,MAAOwM,EAAOnF,OAC3CrG,KAAA,WAAA,EAAA,EACJ,CAAC,MAAAZ,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAEayS,YAAW,SAAAC,GACvB,IAAA7D,EAAM6D,EAAN7D,OACAyB,EAAOoC,EAAPpC,QACAtC,EAAS0E,EAAT1E,UACkB,IAAA,IAAA2E,EAGWjT,KAAIqH,OAAAA,QAAAC,QAAAE,aAF7BH,OAAAA,QAAAC,QAEyB2L,EAAKvC,iBAAiB,CAACvB,OAAAA,EAAQyB,QAAAA,KAASjN,KAA7DuP,SAAAA,GAAYC,SAAAA,WAAA9L,QAAAC,QAyCZ2L,EAAKL,eAAe,CAACzD,OAAAA,KAAQxL,KAAA0D,WAAAA,OAAAA,QAAAC,QAGH2L,EAAKhE,iBAAiB,CAACE,OAAAA,EAAQC,OAAQ8D,EAAa9D,UAAQzL,KAAtFyP,SAAAA,GACNH,EAAK7O,IAAIuO,MAAM,CAACS,kBAAAA,GAAoB,EA5CpC,EAAA,CAAA,GAAiB,MAAZF,IAAAA,EAAcnC,MAGjB,OAFAkC,EAAK7O,IAAImG,KAAK,qBAAsB2I,QACpCD,EAAKL,eAAe,CAACzD,OAAAA,IAIvB,IACIkE,EADEjB,EAAQa,EAAKnJ,WAAYqF,EAAOpF,YAEtC,IAAIoF,EAAOxO,KAWT,MAAM,IAAIa,MAAiDpB,2CAAAA,KAAKoP,UAAUL,EAAQ,KAAM,IAVxF,IACEkE,EAAajT,KAAKC,MAAM8O,EAAOxO,KAChC,CACD,MAAMoH,GAEJ,MADAkL,EAAK7O,IAAIqD,MAAM0H,GACL,IAAA3N,MAAM,oCACjB,CAOH,IAAK4Q,EAAO,MAAM,IAAI5Q,MAA8B2N,wBAAAA,EAAOpF,YAE3DkJ,EAAK7O,IAAIuO,MAAM,eAAgB,CAACxD,OAAAA,EAAQiD,MAAAA,EAAOc,aAAAA,IAAe,IAAAI,2BA9Y/DC,EAAA,KACE,IAAwB5R,EAAA,EAAAA,EAAA6R,EAAA5R,OAA8BD,IAAA,OACrD6R,EAAA7R,GAAA,QACG,CACT,IAAC8R,EAAAC,IAAA,GAACD,GAAAA,EAAA9P,KAEF,MAAA4P,2CAYG,EAAA,KACH,IAAAzQ,EAAiB0Q,EAAAG,GAAA,IACR7Q,GACL6Q,IACyB7Q,EAAA0Q,EAAAG,GAAA,GAEZ,IAAA5P,EAAAjB,IACd,GAAAiB,GAAEA,EAAAJ,KAAA,CACJiQ,GAAA,EAED,MAAAL,4CAOG,CACH,MAAAlQ,EAAkB,IAAAQ,IACTT,EAASI,KAAA,KAAAH,EAAA,GAEW,OADzBuQ,EAAA7P,EAAKJ,KAAAkQ,GAAAJ,EAAA9P,mBAGQ,OAAA,CACd,GAAAhB,IAAEmR,EAAA,CACLH,EAAChS,EAED,mCAIG,MAGD,YADAyB,EAAAC,EAAW,EAAGU,EAIhB,kCAMsB,YADnBpB,EAAAgB,KAAAoQ,GAAApQ,UAAA,EAAAkB,QAI0B8O,EAAAhS,CAE1B,GACF,KAED,IAAAmB,EAAA0Q,EAAAG,GAAA,qBAKG,IAAA5P,EAAAjB,IACK,GAAAiB,GAAqBA,EAAAJ,KAEzB,cADKA,KAAAkQ,GAASlQ,UAAA,EAAAkB,GAGe,IAAAmP,EAAAR,EAAAG,GAAA,GAC9BA,UACFK,IAAAA,KAED5Q,EAAMC,EAAgB,EAAAU,MA7CbJ,UAAA,EAAAkB,GACoBxB,EA8C3B,SAAAwQ,EAAyB9P,UACnB,CACN,IAAAiQ,EAAiBR,EAAAG,GAAA,OAClBK,GAAAA,IAED,UAKA,QAFClR,EAAA0Q,EAAAG,GAAA,IAEK7Q,GACJ6Q,MACOH,EAAAG,GAAe,OAGxB5P,EAAAjB,iDAKG,GACWO,EAAS,EAAAU,EACrB,CACA,CAkSgEkQ,CACvD9E,EAAOoB,6BACP,QAAQ,GAAA,CAAA,WAAA,MACR,QAAQ,EAAA,WACX,IAAM2D,EAAYjB,EAAKf,uBAAuB,CAC5CvR,KAAM0S,EACNtJ,WAAYoF,EAAOpF,aAClB,OAAA1C,QAAAC,QACG2L,EAAK/J,SAAS,CAACC,IAAK+K,EAAWlP,OAAQqO,KAAY1P,KAAAwQ,kCAEtD,QAAQ,EAAA,WACX,IAAMhL,EAAG,eAAkBgG,EAAOpF,WAAoBqI,UAAAA,EAAMpI,UACJ,OAAxDiJ,EAAK7O,IAAImG,KAAK,qBAAsBpB,EAAKgG,EAAOL,QAAQzH,QAAAC,QAClD2L,EAAKnI,IAAI,CAAC3B,IAAAA,EAAKnE,OAAQ,CAACmK,EAAOL,WAASnL,gBAAA,EAAA,KAAA,OAAA2P,GAAAA,EAAA3P,KAAA2P,EAAA3P,KAAAwP,GAAAA,GAAA,EAQnD,EAAA,SACMnL,GAAY,OAAAX,QAAAC,QACX2L,EAAKvE,oBAAoB,CAACJ,UAAAA,KAAW3K,KAC3CsP,WAEA,MAFAA,EAAK7O,IAAI4D,MAAK,0BAA2BA,EAAK,iBAAkB,CAACmH,OAAAA,IACjE8D,EAAK7O,IAAI4D,MAAMA,EAAM0D,OACf1D,CAAM,EACb,GACH,CAAC,MAAAjF,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAEK8T,sBAAqB,SAAAC,GAAG,IAAAC,EAAOD,EAAPC,QAAOC,EAAAF,EAAEzD,QAAAA,OAAU,IAAH2D,GAAQA,EAA4C,IAAA,IAAAC,EAC1FxU,KAAIqH,OAAAA,QAAAC,QAAJkN,EAAKtG,mBAAiBvK,KAAA8Q,WAAAA,SAAAA,IAAApN,OAAAA,QAAAC,QAmBtBkN,EAAKvG,kBAAgBtK,KAC3B6Q,WAAAA,EAAKpQ,IAAIuO,iBAAiB2B,EAAQ1S,OAAM,aAAc,EAAA,CAlBjD,IAAID,EAAI,EAAC+S,sBA9lBb,IAAAC,IACG,CACJ,IAAAC,EAAYlB,OACbxP,EAAA0Q,KAEDA,EAAAA,EAAAlR,mCAQG,KACEK,EAAQjB,UACJiB,EAAWJ,KAAE,CACpB,IAAAO,EAAiBH,GAEjB,GACO,OAEH,CAJJA,EAAAA,EAAUN,CAKJ,CACA,GAAAoR,EAAA,CACD,IAAAC,EAAAD,IACF,GAAAC,GAAAA,EAAAnR,OAAAO,EAAA4Q,GAAA,CACDH,EAAA,EACE,MAED,EAEH,IAAAtR,EAAG,IAAAQ,EACJgB,EAAAzB,EAAAI,KAAA,KAAAH,EAAA,UAED,IAAAsR,EAAAC,EAAAjR,KAAAoQ,GAAA,IAAAY,EAAA5Q,EAAAJ,KAAAkQ,GAAAiB,EAAAnR,KAAAoR,IAAApR,UAAA,EAAAkB,0BAKG,GAAAgQ,IACHC,EAAcD,MACAC,EAAanR,OAASO,EAAC4Q,GAEnC,YADAA,OAAeC,GAAKpR,UAAmB,EAAEkB,gBAKhBX,EAAG0Q,KAAAA,EAAAlR,EAExB,cADFL,EAAI,EAAAU,QAGGJ,KAEH,YADAiR,EAAAjR,KAAIoQ,GAAQpQ,UAAA,EAAAkB,KAGRd,EAAAjB,OAEAiB,EAAAA,EAAAL,gBAEIC,MACNI,EAAAJ,KAAAkQ,GAAOlQ,UAAI,EAAoBkB,EAC/B,YACD+P,GACFA,GACF7Q,EAAAjB,MACDiB,EAAWJ,KACTI,EAAAJ,KAAAkQ,GAAelQ,UAAM,EAAoBkB,GAE1CgP,EAAA9P,GAILX,EAAAC,EAAA,EAAAU,+BAMG6Q,EAAAjR,KAAAoQ,GAAApQ,UAAA,EAAAkB,GAEDkP,EAAiBa,OAET,EAAA7Q,EAEN,EA0gBYiR,CAAA,WAAA,OAAErT,EAAI2S,EAAQ1S,MAAM,EAAA,WAAA,SAAED,GAAK6S,EAAKS,cAAa,EAAA,WACzD,IAAMC,EAAQZ,EAAQnM,MAAMxG,EAAGA,EAAI6S,EAAKS,eAAe,OAAA5N,QAAAC,QAG/BkN,EAAKpG,oBAAkBzK,KAAzC2K,SAAAA,GAAS6G,IAAAA,EAAA3N,EAAA,WACX4N,SAAAA,IAAA/N,OAAAA,QAAAC,QAKIkN,EAAKhG,kBAAkB,CAACF,UAAAA,KAAW3K,KAAA0R,WAAAA,EAAAA,CAAAA,IAAAA,EAAA5Q,EAJpByQ,WAAV/F,GAAiB9H,OAAAA,QAAAC,QACpBkN,EAAKzB,YAAY,CAAC5D,OAAAA,EAAQyB,QAAAA,EAAStC,UAAAA,KAAW3K,kBACrD,GAAA,OAAA0R,GAAAA,EAAA1R,KAAA0R,EAAA1R,KAAAyR,GAAAA,GAGF,EAAA,SAAQpN,GAAO,OAAAX,QAAAC,QACRkN,EAAK9F,oBAAoB,CAACJ,UAAAA,KAAW3K,KAC3C6Q,WAAAA,EAAKpQ,IAAI4D,MAAK,4CAA6CA,EAAS,EAErE,GAAA,GAAAmN,GAAAA,EAAAxR,KAAAwR,OAAAA,EAAAxR,KACF,WAAA,EAAA,EAAA,UAAA+Q,GAAAA,EAAA/Q,KAAA+Q,EAAA/Q,KAAA8Q,GAAAA,GAAA,EAGH,CAAC,MAAA1R,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAODgV,mBAAA,SAAmBhQ,GACjB,IAAIiQ,EAAgB,GAChBvQ,EAAc,CAAA,EACV,MAAJM,GAAAA,EAAMkQ,UACRD,EAAItQ,KAAK,sBACTD,EAAOwQ,QAAUlQ,EAAKkQ,SAEpBlQ,MAAAA,GAAAA,EAAMmQ,YACRF,EAAItQ,KAAK,oBACTD,EAAOyQ,WAAanQ,EAAKmQ,YAEd,MAAJnQ,GAAAA,EAAMoQ,QACbH,EAAItQ,KAAK,qBACTD,EAAO0Q,MAAQpQ,EAAKoQ,OAEtB,IAAMvM,EAAG,4FAEFnJ,KAAK0K,WAAU,gCAEpB6K,EAAIhI,KAAK,SAAQ,8BAGnB,OAAOvN,KAAKkJ,SAAS,CAACC,IAAAA,EAAKnE,OAAAA,GAC7B,EAAC1E,EAEKqV,uBAAW,WACLtO,QAAAC,QAAJtH,KAAKiO,kBAAgBtK,KAC7B,WAAA,EAAA,CAAC,MAAAZ,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAA6S,CAAAA,EAAAA,EAAAvQ,EAAAmN,CAAAA,CAAAA,SAAAqD,IArxBD,WACE,OAAW7V,KAACyF,GACd,GAAC+M,CAAAA,aAAAqD,IASD,WACE,OAAW7V,KAAC0F,OACd,GAAC8M,CAAAA,eAAAqD,IAYD,WACE,OAAW7V,KAAC2F,SACd,GAAC6M,CAAAA,eAAAqD,IAKD,WACE,OAAW7V,KAAC2F,SACd,GAAC6M,CAAAA,iBAAAqD,IAOD,WACE,OAAW7V,KAAC4F,WACd,GAAC4M,CAAAA,iBAAAqD,IAYD,WACE,OAAW7V,KAAC6F,WACd,GAAC2M,CAAAA,oBAAAqD,IAKD,WACE,OAAW7V,KAAC8F,cACd,GAAC0M,CAAAA,UAAAqD,IAOD,WACE,OAAO7V,KAAK+F,IACd,KAACV,CAAA,ICvEqBpC,EAAU,oBAAAC,OAAAA,OAAAC,WAAAD,OAAAC,SAAAD,OAAA,oBAAA,+BAvI5B,IAAAG,EAAAI,EAAA,iBACcI,EAAM,CACtB,IAAAlB,EAAAc,cAMOd,EAAAY,EAAAH,EAAUI,KAAA,KAAAH,EAAAC,IALH,EAAAA,gBAQsB,CACsB,GAAAX,GAAAA,EAAAgB,KAElC,YADfhB,EAAAgB,KAAAP,EAAaI,KAAA,KAAAH,EAAAC,GAAAF,EAAAI,KAAA,KAAAH,EAAA,UAIAA,EAAAK,EAAAf,mBAKR,CAC4B,CAAA,IA1ErCkB,0BAGT,SAAAA,0FAOG,IACHT,IAAqB,EAAAY,EAAOhE,KAA2B0D,GACrD,CAAA,MACEX,GAOEK,EAAOW,EAAQ,EAAAhB,EAAE,CAErB,OAASgB,CACT,CAEA,WAEG,QAEH/D,KAAAuD,EAAQ,SAAQ3C,OAGd,IAAA+B,EAAA/B,EAAA8C,sFA4CwCS,UACrCA,aAAAN,GAAA,EAAAM,EAAAV,CACH,CAgHkB,SAAAgB,EAAAC,EAAa5B,EAAA6B,GAChB,GAA0B,mBAA1BD,EAAAzB,GAA0B,CAClC,IAAA2B,EAAAvB,EAAAwB,EAAA1B,EAAAuB,EAAAzB,QACN,SAAE6B,EAAAf,OAGD,QAAAa,EAAIzB,EAAA2S,QAAArT,MAAAkC,GAAAA,MAEc,IADaZ,EAAAjB,EAAA8B,EAAAjC,SACboB,EAAAJ,KAAU,UAKvB,yBADwEkB,EAAAzB,EAAAI,KAAA,KAAAH,EAAA,IAAAQ,EAAA,KAF9CE,EAAAA,EAAAL,CAMjC,CAGEL,EAC+BD,EAAAC,EAAA,EAAAU,gBAKfX,EAAAC,IAAAA,EAAa,IAAAQ,GAAA,EAAAd,EACxB,CACN,CAED+B,+BAGG,IAEGF,EAAAnC,MACJU,EAAG4S,QAEgB,CAAA,MAAAhT,GAEY,CAAA,OAAAJ,GAEf,GAAAU,GAAAA,EAAAM,iCAEX,MAAAoB,EAAAhC,EACN,GAGCgC,GAC+B,CACb,OAAA1B,qBAIF,MAAA,IAAA2S,UAAA,8BAGjB,IAAAhR,EAAE,GAEGrD,EAAA,EAAGA,EAAI+C,EAAA9C,OAAAD,IACXqD,EAAAC,KAAAP,EAAI/C,IAEc,OAxHd,SAAAuD,EAAoBpC,EAAO6B,OAC1BtB,EAAAwB,uBACDC,EAAGf,OAGP,OAAApC,EAAIuD,EAAAtD,UAAA+C,IAAAA,MAEc,IADaZ,EAAAjB,EAAAnB,KACboC,EAAAJ,KAAU,sBAIZI,EAAAJ,KAAAmB,EAAaD,IAAAA,EAAAzB,EAAAI,KAAA,KAAAH,EAAA,IAAAQ,EAAA,KAFEE,EAAAA,EAAAL,CAK3B,CAEAL,EACCD,EAAAC,EAAA,EAAAU,KAGDA,CAE2B,CAAA,MAAAhB,GACbK,EAAAC,IAAAA,EAAA,IAAUQ,GAAA,EAAAd,GAEG,MA+FboC,CAAAH,EAAA,SAAarD,GAAA,OAAAmB,EAAAkC,EAAArD,GAAA,EAAAgD,GC9NrC,IAAMsR,EAAgB,CACpBC,SAAU,YACVC,KAAM,KACNC,QAAQ,uCAsBR,WAAA,SAAAC,EAAYC,GAA4BtW,KAjBhCuW,aAAO,EAAAvW,KACPwW,gBACAC,EAAAA,KAAAA,SACAC,EAAAA,KAAAA,SAeN,EAAA1W,KAAKuW,QAAUD,EACftW,KAAKyW,IAAMH,EAAOK,GAClB,IAAMC,EAAW7V,EAAOkV,CAAAA,EAAAA,EAAkBjW,KAAKuW,SACvBM,EAAgBD,EAAdT,KAAAA,OAAO,IAAHU,EAAG,GAAEA,EAEnC7W,KAAKwW,WADM,MAD6BI,EAAhCR,OACoB,IAAM,IACX,MAFiBQ,EAAxBV,UAEwBC,EAAO,IAAM,IAAKA,CAC5D,CAAC,IAAA7V,EAAA+V,EAAA9V,iBAAAD,EAEDwW,mBAAA,WACE,OAAO9W,KAAK+W,IAAM,CAACC,OAAOhX,KAAK+W,GAAGE,MAAOD,OAAOhX,KAAK+W,GAAGG,aAAazE,SAASzS,KAAK+W,GAAGI,WACxF,EAAC7W,EAEK8W,QAAOA,WAAA,IAAA,IAAAxW,EAELZ,KADN,OAAAqH,QAAAC,QAAO,IAAID,QAAQ,SAACC,EAASzC,GAC3B,GAAIjE,EAAKkW,qBACP,OAAOxP,EAAQ1G,EAAKmW,IAEtBnW,EAAK8V,IAAM,IAAIW,UAAUzW,EAAK0W,WAC9B1W,EAAK8V,IAAIa,iBAAiB,OAAQ,SAACxU,GACjCyK,QAAQpJ,IAAI,yBAA0BrB,GACtCuE,EAAQ1G,EAAKmW,GACf,GACAnW,EAAK8V,IAAIa,iBAAiB,QAAS,SAACxU,GAClCyK,QAAQpJ,IAAI,yBAA0BrB,GAClCnC,EAAKkW,sBAAsBjS,EAAO9B,EACxC,GACAnC,EAAK8V,IAAIa,iBAAiB,QAAS,SAACxU,GAClCyK,QAAQpJ,IAAI,6BAA8BrB,EAC5C,GACAnC,EAAK8V,IAAIa,iBAAiB,UAAW3W,EAAK4W,cAAchU,KAAI5C,GAC9D,GACF,CAAC,MAAAmC,GAAAsE,OAAAA,QAAAxC,OAAA9B,EAAA,CAAA,EAAAzC,EAEKmX,KAAI,WAAA,IAAAtQ,IAAAA,EAEcnH,KAAIqH,OAAAA,QAAAC,QAAJH,EAAKwP,GAAG9J,cAAYlJ,KAApC2Q,SAAAA,GAAOoD,IAAAA,EACPC,EAAU,CAAC7Q,KAAMxH,EAAgB2F,KAAMqP,QAAAA,EAAS/E,OAAQpI,EAAKwP,GAAGhM,UACtE6C,QAAQpJ,IAAI,QAASuT,UACrBD,EAAAvQ,EAAKuP,MAALgB,EAAUE,KAAKxX,KAAKoP,UAAUmI,GAAU,EAC1C,CAAC,MAAA5U,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAAzC,CAAAA,EAAAA,EAEakX,uBAAczU,GAAM,IAChCyK,QAAQpJ,IAAI,WAAYrB,GACxB,IAAMpC,EAAOP,KAAKC,MAAM0C,EAAEpC,MAMzB,OALGA,EAAKmG,OAASvH,EAAiBsY,IACjCrK,QAAQpJ,IAAI,kBAAmBzD,GAG/B6M,QAAQpJ,IAAI,cAAezD,GAC5B0G,QAAAC,SACH,CAAC,MAAAvE,GAAA,OAAAsE,QAAAxC,OAAA9B,EAAA,CAAA,EAAA6S,EAAAS,EAAA7D,CAAAA,CAAAA,IAAAqD,YAAAA,IA/DD,WACE,OAAO7V,KAAKwW,UACd,GAAC,CAAAhE,IAAAqD,KAAAA,IAED,WACE,YAAYY,GACd,GAAC,CAAAjE,IAAA,KAAAqD,IAED,WACE,OAAW7V,KAAC0W,GACd,KAACL,CAAA,CAED,wBD3CgB,SAAUC,GAAuB,IACjD,IACE/P,EAKE+P,EALF/P,OACAuR,EAIExB,EAJFwB,QACAC,EAGEzB,EAHFyB,SACA9Q,EAEEqP,EAFFrP,WACAQ,EACE6O,EADF7O,MAGF,SAAKlB,IAAAA,EAAQ3E,OAAQ,MAAU,IAAAJ,MAAM,gCAErC,IAAM4C,EAAM,IAAIC,EAAMA,OAAAtD,EAAA,CAAGuD,KAAM,kBAAqB2C,IAC9C0P,EAAK,IAAItR,EAASiR,GAAQ,OAAAjP,QAAAC,QAM1BqP,EAAGzP,QAAMvD,KAEf,WAAA,IAAMqU,EAA2B,SAAHtY,GAAyE,IAApE0S,EAAK1S,EAAL0S,MAAK6F,EAAAvY,EAAEwY,OAqBlCnP,OArB2C,IAAHkP,GAAQA,EAqB7B,MAAQ,MAC3B9O,EAAG,qBACKwN,EAAGjM,WAKV0H,qKAAAA,EAAM9N,KAAI,6BACXyE,EAAO,IAAIqJ,EAAMpI,GAChB2M,0BAAAA,EAAGhM,SAAQ,wDACkBgM,EAAGhM,SACmBgM,oFAAAA,EAAGhM,6CAA4CgM,EAAGhM,SACnGgM,qCAAAA,EAAGjM,WAAU,2CACE0H,EAAM9N,KACbyE,yBAAAA,EAAWqJ,IAAAA,EAAMpI,GAAE,0CAEdoI,EAAM9N,KAAwByE,oBAAAA,EAAWqJ,IAAAA,EAAMpI,GAAE,gBAAgB2M,EAAGhM,SAAwCgM,gCAAAA,EAAGhM,uHAKvHgM,EAAGhM,SAAQ,mDACiBgM,EAAGhM,SAE7BgM,6EAAAA,EAAG1Q,MAAME,kBAAkBC,QAAQ,IAAK,IACtD,WAEF,OADAhC,EAAIuO,MAAMxJ,GACHA,CACT,EAEMgP,EAAuB,SAAH1X,GAAyE,IAApE2R,EAAK3R,EAAL2R,MAAKgG,EAAA3X,EAAEyX,OAC9BnP,OADuC,IAAHqP,GAAQA,EACzB,MAAQ,MAajC,MAXWzB,kBAAAA,EAAGjM,sIAIHiM,EAAGjM,WAAU,6CACE0H,EAAM9N,KACbyE,2BAAAA,MAAWqJ,EAAMpI,GAAE,+CAEdoI,EAAM9N,KACbyE,yBAAAA,MAAWqJ,EAAMpI,GAAE,SAGtC,EAoKC,OAAA3C,QAAAC,QAGKqP,EAAG7L,IAAI,CACX3B,IAC6BwN,oCAAAA,EAAGjM,WAAU,6UAU1C/G,KAAA,WAAA,OAAA0D,QAAAC,QAEIqP,EAAG7L,IAAI,CACX3B,IAAkCwN,8BAAAA,EAAGjM,WAAU,2BAA2BiM,EAAGjM,WAC9E,wBAAC/G,KACFgT,WAEG,OAFHA,EAAG7L,IAAI,CACL3B,IAAkCwN,8BAAAA,EAAGjM,WAAU,4BAA4BiM,EAAGjM,WAC/E,iCAAErD,QAAAC,QAIGqP,EAAG7L,IAAI,CACX3B,IAC6BwN,oCAAAA,EAAGjM,WAAU,6XAW1C/G,KAAA,WAAA,OAAA0D,QAAAC,QAEIqP,EAAG7L,IAAI,CACX3B,kCAAkCwN,EAAGjM,WAAU,6BAA6BiM,EAAGjM,WAChF,kCAAC/G,KAAA0D,WAAAA,OAAAA,QAAAC,QAGIqP,EAAG7L,IAAI,CACX3B,IAAG,oCAC0BwN,EAAGjM,WAQjC,qQAAC/G,KAAA0D,WAAAA,OAAAA,QAAAC,QAGIqP,EAAG7L,IAAI,CACX3B,IAAG,oCAC0BwN,EAAGjM,WASjC,4RAAC/G,KAAA0D,WAAAA,OAAAA,QAAAC,QAEIqP,EAAG7L,IAAI,CACX3B,IAAyCwN,qCAAAA,EAAGjM,WAAU,uBAAuBiM,EAAGjM,WACjF,sCAAC/G,KAEFgT,WAKG,OALHA,EAAG7L,IAAI,CACL3B,IAAkCwN,8BAAAA,EAAGjM,WAAU,8BAA8BiM,EAAGjM,WACjF,yBACDiM,EAAG7L,IAAI,CACL3B,IAAkCwN,8BAAAA,EAAGjM,2CAA0CiM,EAAGjM,WAAU,2BAC3FrD,QAAAC,QAGGqP,EAAG7L,IAAI,CACX3B,IAAG,oCAC0BwN,EAAGjM,WAIhC,qGAAC/G,KAAA0D,WAAAA,OAAAA,QAAAC,QAEGqP,EAAG7L,IAAI,CACX3B,IAC6BwN,oCAAAA,EAAGjM,WAAU,mLAMzC/G,KAAA,WAAA,OAAA0D,QAAAC,QAEGqP,EAAG7L,IAAI,CACX3B,IAAmCwN,8BAAAA,EAAGjM,WAAU,qBAAqBiM,EAAGjM,WACzE,sBAAC/G,KAAA6H,WAAAA,SAAAA,IAAAnE,OAAAA,QAAAC,QAMIqP,EAAGhO,eAAahF,yBAAAiH,IAAA,SAAAJ,EAAA6N,GAAAjP,IAAAA,EA6BlB2O,WAAAA,SAAAA,GAAAA,EAAUnW,OAAM,CAAA,IAAAiH,EAAApE,EACUsT,WAAjBO,GACwC,OAAjDlU,EAAIqD,MAAK,kBAAmB6Q,EAAoB,SAACjR,QAAAC,QAC3CqP,EAAG7L,IAAI,CACX3B,IAAKmP,KACL3U,KACH,WAAA,EAAA,MAAAkF,GAAAA,EAAAlF,KAAAkF,OAAAA,EAAAlF,oBANCoU,UAMD3O,GAAAA,EAAAzF,KAAAyF,EAAAzF,gBAGH,OAAOgT,CAAG,GAAHA,CAAE,CA1BTvS,EAAIqD,UAAUkP,EAAGjM,WAAU,QAASiM,EAAGzN,SAAS,CAACC,IAAwCwN,oCAAAA,EAAGjM,wBAC5FtG,EAAIqD,MAAwBkP,iBAAAA,EAAGzN,SAAS,CAACC,IAAG,oCAAqC,IAAAV,EAAAhE,EAE7D8B,WAAT6L,GAAiB/K,OAAAA,QAAAC,QAELqP,EAAGzN,SAA8B,CACpDC,IAAG,oCAAsCiJ,EAAM9N,KAChD,QAACX,KAFI4U,SAAAA,GAIN,GADAnU,EAAIqD,MAAM,WAAY2K,EAAM9N,KAAMiU,GACvB,MAANA,IAAAA,EAAQ3W,OAAQ,MAAU,IAAAJ,MAAS4Q,EAAM9N,uBAEA,OAA9CF,EAAIqD,MAAM,aAAc2K,EAAM9N,KAAM8N,EAAMpI,IAAI3C,QAAAC,QAvSrB,SAAAmH,GAAA,IAAY2D,EAAK3D,EAAL2D,UACY,OAAjDhO,EAAIqD,MAAM,0BAA2B2K,EAAM9N,MAAM+C,QAAAC,QAGvBqP,EAAGzN,SAAc,CACzCC,IAAG,sIAEuBiJ,EAAM9N,KACjC,SAACX,KAAA6U,SAAAA,GAJF,IAAMC,EAAaD,EAIf,GAC0D,OAA9DpU,EAAIuO,MAAM,cAAevS,KAAKoP,UAAUiJ,EAAY,KAAM,IAAIpR,QAAAC,QAQxDqP,EAAG7L,IAAI,CAAC3B,IAAG,0BAA4BwN,EAAGjM,4BAA2B0H,EAAM9N,QAAQX,uBAAA0D,QAAAC,QACnFqP,EAAG7L,IAAI,CAAC3B,IAA+BwN,0BAAAA,EAAGjM,4BAA2B0H,EAAM9N,QAAQX,KAAA0D,WAAAA,OAAAA,QAAAC,QACnFqP,EAAG7L,IAAI,CAAC3B,IAAG,0BAA4BwN,EAAGjM,WAA2B0H,iBAAAA,EAAM9N,QAAQX,KAEzF,WAAA,IAAMwF,0CAC2BwN,EAAGjM,WAAU,iBAAiB0H,EAAM9N,KACjD8N,2BAAAA,EAAM9N,KAAI,4DAEGqS,EAAGjM,WAElBiM,gFAAAA,EAAGjM,+EACN0H,EAAM9N,KAAc8N,UAAAA,EAAMpI,GAAE,eAAeyO,EAAWC,GAE/DV,iBAAAA,EAAyB,CAAC5F,MAAAA,mBAE1B+F,EAAqB,CAAC/F,MAAAA,IAAO,eAC5B,OAAA/K,QAAAC,QACDqP,EAAG7L,IAAI,CAAC3B,IAAAA,KAAKxF,KAAA0D,WAAAA,OAAAA,QAAAC,QAEbqP,EAAG7L,IAAI,CACX3B,IAAG,wCAC4BwN,EAAGjM,WAA2B0H,iBAAAA,EAAM9N,KAAI,2BACrD8N,EAAM9N,KAEOqS,4DAAAA,EAAGjM,2FAElBiM,EAAGjM,WAAU,oEAChB0H,EAAM9N,eAAc8N,EAAMpI,GAAiByO,eAAAA,EAAWC,oBAE/DV,EAAyB,CAAC5F,MAAAA,IAAO,eAEjC+F,EAAqB,CAAC/F,MAAAA,IAE3B,kBAACzO,KAAA0D,WAAAA,OAAAA,QAAAC,QAEIqP,EAAG7L,IAAI,CACX3B,IAAG,wCAC4BwN,EAAGjM,WAA2B0H,iBAAAA,EAAM9N,KAAI,2BACrD8N,EAAM9N,KAEOqS,4DAAAA,EAAGjM,2FAElBiM,EAAGjM,WAAU,qDAAqD0H,EAAM9N,KAAc8N,UAAAA,EAAMpI,GAAE,mCAE1GgO,EAAyB,CAAC5F,MAAAA,EAAO8F,QAAQ,IAAM,uBAE/CC,EAAqB,CAAC/F,MAAAA,EAAO8F,QAAQ,IAAM,kBAE/CvU,KAAA,WAAA,OAAA0D,QAAAC,QAQIqP,EAAG7L,IAAI,CAAC3B,IAA+BwN,0BAAAA,EAAGjM,WAAU,sBAAsB0H,EAAM9N,QAAQX,uBAAA0D,QAAAC,QACxFqP,EAAG7L,IAAI,CAAC3B,IAA+BwN,0BAAAA,EAAGjM,iCAAgC0H,EAAM9N,QAAQX,KAAA0D,WAAAA,OAAAA,QAAAC,QACxFqP,EAAG7L,IAAI,CAAC3B,IAAG,0BAA4BwN,EAAGjM,iCAAgC0H,EAAM9N,QAAQX,uBAAA0D,QAAAC,QACxFqP,EAAG7L,IAAI,CAAC3B,IAA+BwN,0BAAAA,EAAGjM,gDAA6C/G,uBAAA0D,QAAAC,QACvFqP,EAAG7L,IAAI,CAAC3B,IAA+BwN,0BAAAA,EAAGjM,+CAA4C/G,uBAAA0D,QAAAC,QACtFqP,EAAG7L,IAAI,CAAC3B,IAA+BwN,0BAAAA,EAAGjM,+CAA4C/G,uBAAA0D,QAAAC,QAMtFqP,EAAG7L,IAAI,CACX3B,IAC+BwN,wCAAAA,EAAGjM,WAAU,sBAAsB0H,EAAM9N,KACtD8N,2BAAAA,EAAM9N,KAAI,4DAEGqS,EAAGjM,WAElBiM,6EAAAA,EAAGjM,oEACN0H,EAAM9N,KAAI,gBAAgBmU,EAAWC,GAEnD,oBAAC/U,KAAA0D,WAAAA,OAAAA,QAAAC,QAEIqP,EAAG7L,IAAI,CACX3B,IAAG,wCAC4BwN,EAAGjM,WAAgC0H,sBAAAA,EAAM9N,KAAI,2BAC1D8N,EAAM9N,KAEOqS,4DAAAA,EAAGjM,wFAElBiM,EAAGjM,WAAU,gDAAgD0H,EAAM9N,KAAoBmU,gBAAAA,EAAWC,GAAE,oBAEpH/U,KAAA,WAEF,IAAMgV,EAAgBF,EAAWC,GAAGtS,QAAQ,OAAQ,OAAO,OAAAiB,QAAAC,QAErDqP,EAAG7L,IAAI,CACX3B,IAC+BwN,wCAAAA,EAAGjM,WAAU,sBAAsB0H,EAAM9N,KACtD8N,2BAAAA,EAAM9N,iEAEOqS,EAAGjM,WAAU,6EAE5BiM,EAAGjM,WAA0D0H,gDAAAA,EAAM9N,KAAI,gBAAgBqU,EAAa,oBAEpHhV,KAAA,WAAA,OAAA0D,QAAAC,QAOIqP,EAAG7L,IAAI,CACX3B,4CAC+BwN,EAAGjM,WAAU,2DACzBiM,EAAGjM,WAESiM,wEAAAA,EAAGjM,WAAU,6EAE5BiM,EAAGjM,WAGpB,+MAAC/G,uBAAA0D,QAAAC,QAEIqP,EAAG7L,IAAI,CACX3B,IAC+BwN,wCAAAA,EAAGjM,oEAChBiM,EAAGjM,WAAU,wEAEAiM,EAAGjM,WAElBiM,6EAAAA,EAAGjM,WAAU,yDAChB0H,EAAM9N,KAEpB,4IAACX,KAAA0D,WAAAA,OAAAA,QAAAC,QAEIqP,EAAG7L,IAAI,CACX3B,IAAG,wCAC4BwN,EAAGjM,WAChBiM,yDAAAA,EAAGjM,mFAEUiM,EAAGjM,WAAU,6EAE5BiM,EAAGjM,WACN0H,yDAAAA,EAAM9N,KAAI,4IAEvBX,KAAA,WAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAGJ,CAAC,MAAAZ,GAAAsE,OAAAA,QAAAxC,OAAA9B,EAAA,CAAA,CAuIO6V,CAAsB,CAAExG,MAAAA,KAAQzO,KAAA,WACtCgT,EAAGhB,aAAc,EAClB,EAAA,aAAA,GAAA,OAAAlN,GAAAA,EAAA9E,KAAA8E,EAAA9E,KAAA6G,GAAAA,GAAAL,CAAAA,IAAAA,gBAxBU,MAAP2N,GAAAA,EAASlW,OAAMqH,CAAAA,IAAAA,EAAAxE,EACUqT,EAAO,SAAvBe,GACuC,OAAhDzU,EAAIqD,MAAK,kBAAmBoR,EAAmB,SAACxR,QAAAC,QAC1CqP,EAAG7L,IAAI,CACX3B,IAAK0P,KACLlV,kBACH,GAAA,GAAAsF,GAAAA,EAAAtF,KAAAsF,OAAAA,EAAAtF,KAAA,WAAA,EAAA,CAAA,IAAA,OAAAwG,GAAAA,EAAAxG,KAAAwG,EAAAxG,KAAAiH,GAAAA,GAAAV,EAAAA,CAAAA,IAAAA,aAZH,GAAIzC,EAAKJ,OAAAA,QAAAC,QAAQqP,EAAG/I,eAAajK,kBAAC,IAAAuG,OAAAA,GAAAA,EAAAvG,KAAAuG,EAAAvG,KAAA6H,GAAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EA0CpC,CAAC,MAAAzI,GAAAsE,OAAAA,QAAAxC,OAAA9B,EAAA,CAAA"}