{"version":3,"file":"tinysynq.module.js","sources":["../src/lib/types.ts","../src/lib/vcompare.class.ts","../src/lib/tinysynq.class.ts","../src/lib/index.ts","../src/lib/trigger.ts","../src/lib/client.ts"],"sourcesContent":["import { ISettingsParam, ILogObj } from 'tslog';\n\n/**\n * A {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance.\n * \n * @public\n */\nexport type SQLiteWASM = any\n\n/**\n * Provided to TinySynq constructor.\n * \n * @public\n */\nexport interface SyncableTable {\n  /**\n   * Table name.\n   */\n  name: string;\n  /**\n   * Row identifier; typically the column used as primary key.\n   */\n  id: string;\n  /**\n   * Columns that can be updated by a sync-based change.\n   */\n  editable: string[];\n}\n\n/**\n * Base options for TinySynq constructor.\n * \n * @public\n */\nexport interface TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   * \n   * @remarks\n   * \n   * If not provided, {@link TinySynqOptionsBase.filePath} must be set.\n   * \n   */\n  sqlite3?: SQLiteWASM;\n  /**\n   * Path to SQLite3 database file.\n   * \n   * @remarks\n   * If not provided, {@link TinySynqOptionsBase.sqlite3} must be set.\n   */\n  filePath?: string;\n  /**\n   * Prefix to use for TinySynq tables (trailing underscores will be removed).\n   */\n  prefix: string;\n  /**\n   * Tables that should be synced between devices.\n   */\n  tables: SyncableTable[];\n  /**\n   * Maximum number of changes to process at once.\n   */\n  batchSize?: number;\n  /**\n   * Enable or disable WAL mode.\n   */\n  wal?: boolean;\n  /**\n   * Array of queries to run before TinySynq's change tracking is configured.\n   * \n   * @remarks\n   * Include create statements for syncable tables here.\n   */\n  preInit?: string[];\n  /**\n   * Array of queries to run after TinySynq's change tracking is configured\n   * \n   * @remarks\n   * You might place any insert queries here.\n   */\n  postInit?: string[];\n  /**\n   * Configure logging options.\n   * \n   * @remarks\n   * TinySynq uses TSLog for logging. All optiions are passed directly to it.\n   * See https://tslog.js.org/#/?id=settings for details\n   */\n  logOptions?: ISettingsParam<ILogObj>;\n  /**\n   * Enable/disable debug mode\n   * \n   * When enabled, all INSERT/UPDATE/DELETE actions on syncable tables are written \n   * to the *_dump table for inspection.\n   */\n  debug?: boolean;\n}\n\n/** \n * Constructor options TinySynq instance.\n * \n * Provide either an existing {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance (`sqlite3`) or the `filePath`.\n * \n * @public\n */\nexport interface TinySynqOptionsWithInstance extends TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   */\n  sqlite3: SQLiteWASM;\n}\n\nexport interface TinySynqOptionsWithFilePath extends TinySynqOptionsBase{\n  /**\n   * Path to SQLite3 database file.\n   */\n  filePath: string;\n}\n\n/** \n * {@inheritdoc TinySynqOptionsBase}\n * \n * @public\n */\nexport type TinySynqOptions = TinySynqOptionsWithInstance | TinySynqOptionsWithFilePath\n\nexport type SQLite3 = any\n\n/**\n * Basic query params for methods that read from/write to DB.\n * \n * @public\n */\nexport type QueryParams = {\n  sql: string;\n  values?: any;\n  prefix?: string;\n}\n\n/**\n * Table name and row parameters for retrieving data for a specific record.\n */\nexport interface TableNameRowParams {\n  table_name: string;\n  row_id: string;\n}\n\nexport interface ApplyChangeParams {\n  change: Change,\n  restore?: boolean,\n  savepoint: string\n}\n\nexport interface MetaRowData {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type VClock = {\n  [deviceId: string]: number;\n}\n\nexport enum TinySynqOperation {\n  'INSERT' = 'INSERT',\n  'UPDATE' = 'UPDATE',\n  'DELETE' = 'DELETE'\n}\n\n/**\n * Object transferred between devices to convey individual record changes.\n * \n * @public\n */\nexport interface Change {\n  /**\n   * Change record ID from central server.\n   */\n  id?: number;\n  /**\n   * Table name of the record that was modified.\n   */\n  table_name: string;\n  /**\n   * Row ID of the record that was modified.\n   */\n  row_id: string;\n  /**\n   * The type of operation that took place.\n   */\n  operation: keyof typeof TinySynqOperation;\n  /**\n   * The serialised object in the post-modified state. \n   */\n  data: string; // JSON string\n  /**\n   * Vector Clock holding all device values for the record, as known by the source device of the change.\n   */\n  vclock: VClock;\n  /**\n   * An ISO8601 formatted date and time that the change was recorded on the source device.\n   */\n  modified: string;\n}\n\ninterface BaseLatestChangesOptions {\n  /**\n   * A device ID whose changes should be excluded from retrieval (usually the requester).\n   */\n  exclude: string;\n  /**\n   * An ISO8601 date string. Providing this will limit retrieved changes to this date/time onwards.\n   */\n  since: string;\n  /**\n   * A\n   */\n  checkpoint: number;\n}\n\ninterface LatestChangesWithSince extends BaseLatestChangesOptions {\n  /**\n   * An ISO8601 date string. Providing this will limit retrieved changes to this date/time onwards.\n   */\n  since: string;\n\n}\n\ninterface LatestChangesWithCheckpoint extends BaseLatestChangesOptions {\n  /**\n   * A server-specific change ID.\n   * \n   * @remarks\n   * \n   * When provided it will limit retrieved changes to those _after_ the specified change ID.\n   * The change ID is specific to the hub/root server (of which there should be only one).\n   */\n  checkpoint: number;\n}\n\nexport type LatestChangesOptions = LatestChangesWithSince | LatestChangesWithCheckpoint\n\nexport enum SyncRequestType {\n  push = 'push',\n  pull = 'pull'\n}\n\nexport enum SyncResponseType {\n  ack = 'ack',\n  nack = 'nack'\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { VClock } from \"./types.js\";\n\ntype VectorClockParams = {\n  local: VClock;\n  remote: VClock;\n  localId: string;\n  localTime: string;\n  remoteTime: string;\n}\n\ntype RemoteVClockParams = {\n  remote: VClock;\n}\n\nexport class VCompare {\n\n  private local: VClock;\n  private isGreater = false;\n  private isLess = false;\n  private isWrongOrder = false;\n  private remote: VClock = {};\n  private localId: string;\n  private localTime: string;\n  private remoteTime: string;\n\n  constructor({ local, remote, localId, localTime, remoteTime }: VectorClockParams) {\n    this.local = local;\n    this.remote = typeof remote === 'string'\n      ? JSON.parse(remote)\n      : remote;\n    this.localId = localId;\n    this.localTime = localTime;\n    this.remoteTime = remoteTime;\n  }\n\n  setRemote({ remote }: RemoteVClockParams) {\n    this.remote = remote;\n  }\n\n  isConflicted(data?: RemoteVClockParams): boolean {\n    const remote = data?.remote || this.remote;\n    const keys = Object.keys({...this.local, ...remote});\n    keys.forEach(k => {\n      const localCount = this.local[k] || 0;\n      const remoteCount = remote[k] || 0;\n      this.isGreater = this.isGreater || localCount > remoteCount;\n      this.isLess = this.isLess || localCount < remoteCount;\n    });\n    return this.isGreater && this.isLess;\n  }\n\n  isOutDated(): boolean {\n    // Default localTime to any early date so that \n    // remote always wins when local is empty.\n    const { remoteTime, localTime = '1970-01-01' } = this;\n    console.debug('\\n\\n::: isOutDated() :::', JSON.stringify({localTime, remoteTime, local: this.local, remote: this.remote}, null, 1), '\\n\\n::: /isOutDated() :::');\n    if (!remoteTime || !localTime) throw new Error('Missing modified time');\n    return new Date(localTime) >= new Date(remoteTime);\n  }\n\n  isOutOfOrder(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    const keys = Object.keys({...this.local, ...remote}).filter(k => k !== localId);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const drift = Math.abs((local[k] ?? 0) - (remote[k] ?? 0));\n      this.isWrongOrder = drift > 1;\n    }\n    return this.isWrongOrder;\n  }\n\n  merge() {\n    const merged: VClock = {};\n    const participants = new Set(Object.keys(this.local).concat(Object.keys(this.remote)));\n    // If the incoming participant vclock is lower, discard\n    for (const p of participants) {\n      const localP = this.local[p] || 0;\n      const remoteP = this.remote[p] || 0;\n      merged[p] = Math.max(localP, remoteP);\n    }\n    if (merged[this.localId] === undefined) {\n      merged[this.localId] = 0;\n    }\n    return merged;\n  }\n}","import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { ApplyChangeParams, Change, LogLevel, QueryParams, TinySynqOperation, TinySynqOptions, SyncableTable, TableNameRowParams, VClock, LatestChangesOptions } from './types.js';\nimport { Logger, ILogObj } from 'tslog';\nimport { VCompare } from './vcompare.class.js';\nimport { nanoid } from 'nanoid';\n\nconst log = new Logger({ name: 'tinysynq-web-init', minLevel: LogLevel.Info });\nconst strftimeAsISO8601 = `STRFTIME('%Y-%m-%d %H:%M:%f','NOW')`;\n\ntype PreProcessChangeOptions = {\n  change: Change, restore?: boolean\n}\n\ntype PreProcessChangeResult = { \n  valid: boolean;\n  reason: string;\n  vclock: VClock;\n  meta?: any;\n  checks: Record<string, boolean>\n}\n\n/**\n * Basic utilities, mainly date-oriented.\n */\nexport type Utils = {\n  strftimeAsISO8601: string,\n  nowAsISO8601: string,\n  utcNowAsISO8601: () => string,\n  isSafeISO8601: (date: string) => boolean\n}\n\n/**\n * Parameters for retrieving table's ID column.\n * \n * @public\n */\nexport type GetTableIdColumnParams = {\n  table_name: string;\n}\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq extends EventTarget {\n  private _db: any;\n  private _dbPath: string;\n  private _deviceId: string | undefined;\n  private _synqPrefix?: string;\n  private _synqTables?: Record<string, SyncableTable>;\n  private _synqBatchSize: number = 20;\n  private _wal = true;\n  private log: Logger<ILogObj>;\n\n  /**\n   * Basic Helpers.\n   * \n   * @TODO move to a separate file.\n   * \n   * @public\n   */\n  readonly utils: Utils = {\n    strftimeAsISO8601,\n    nowAsISO8601: strftimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date().toISOString().replace(/[TZ]/g, ' ').trim();\n    },\n    isSafeISO8601: (date: string) => {\n      return (/^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,3})?$/.test(date));\n    },\n  }\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    super();\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n    const _synqTables: Record<string, SyncableTable> = {};\n    opts.tables.forEach(t => {\n      _synqTables[t.name] = t;\n    })\n    this._dbPath = opts.filePath || '';\n    this._db = opts.sqlite3 || undefined;\n    this._synqPrefix = opts.prefix?.trim().replace(/[^a-z0-9]+$/i, '');\n    this._synqTables = _synqTables;\n    this._synqBatchSize = opts.batchSize || this._synqBatchSize;\n    this._wal = opts.wal ?? false;\n    this.log = new Logger({\n      name: 'tinysynq-node',\n      minLevel: opts.logOptions?.minLevel ?? LogLevel.Info,\n      type: opts.logOptions?.type || 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(opts.logOptions || {})\n    });\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbPath) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.log.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              this.log.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              this.log.debug(...args);\n            },\n            onunhandled: (event: any) => {\n              this.log.error('@UNHANDLED', event);\n            }\n          });\n        });\n        \n        this.log.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          this.log.debug(`open ${this.dbPath}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}?vfs=opfs`,\n          });\n  \n          this.log.info(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}`\n          });\n          this.log.info(\n            `OPFS not available, created in-memory database at ${res.result.filename}`\n          );\n        }\n\n        if (!res) return reject('Unable to start DB');\n        \n        const { dbId } = res;      \n        const conf = await promiser('config-get', {});\n        this.log.info('Running SQLite3 version', conf.result.version.libVersion);\n        this._db = promiser;\n        this._deviceId = dbId;\n        this.setDeviceId();\n    \n        // Set WAL mode if necessary\n        if (this._wal === true) {\n          await this.runQuery({\n            sql: `PRAGMA journal_mode=WAL;`\n          });\n        }\n        const timeout = 5000; // If it hasn't loaded in 5 seconds, it ain't loadin'.\n        let waited = 0;\n        let increment = 50;\n        const interval = setInterval(() => {\n          waited += increment;\n          if (this.db) {\n            clearInterval(interval);\n            this.dispatchEvent(new CustomEvent('ready'));\n            return resolve(this);\n          }\n\n          if (waited >= timeout && !this._db) {\n            this.log.error('@db', this.db)\n            clearInterval(interval);\n            return reject(`TinySynq failed to load. (waited ${waited}ms`);\n          }\n          this.log.error('::: Impossible. :::');\n        }, increment);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        this.log.error(err.name, err.message);\n        this.log.error(err)\n        reject('DB setup failed.');\n      }\n    });\n  };\n\n  /**\n   * SQLiteWASM instance (See {@link https://github.com/sqlite/sqlite-wasm | SQLite Wasm})\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Path to DB file\n   * \n   * @example\n   * \n   * `./app.db` or `/tmp/app.db`\n   */\n  get dbPath() {\n    return this._dbPath;\n  }\n\n  /**\n   * Automatically generated ID for device's DB instance.\n   * \n   * @remarks\n   * \n   * This ID is used by the sync protocol to identify the database.\n   * One it is generated once during setup and does not change. The\n   * value is stored in the `_meta` table (`meta_name='device_id'`).\n   * __Do not edit this value; doing so would corrupt synchronisation__.\n   */\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  /**\n   * Alias for {@link TinySynq.deviceId}.\n   */\n  get synqDbId() {\n    return this._deviceId;\n  }\n\n  /**\n   * The prefix used for TinySynq's tables.\n   * \n   * @defaultValue `tinysynq`\n   */\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  /**\n   * Object containing {@link SyncableTable}s, keyed by table name.\n   * \n   * @remarks\n   * \n   * A {@link SyncableTable} structure is never modified. TinySynq maintains \n   * its own tables and triggers for tracking and responding to changes.\n   * \n   * @returns Record\\<string, SyncableTable\\>\n   */\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  /**\n   * Number of records to process in each batch when syncing changes. \n   */\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  /**\n   * Enable or disable WAL mode.\n   * \n   * @defaultValue true\n   */\n  get wal() {\n    return this._wal;\n  }\n\n  /**\n   * Get a random 16-character ID generated by nanoid\n   * \n   * @returns string\n   */\n  getNewId() {\n    return nanoid(16);\n  }\n\n  /**\n   * Get the column used as identifier for the {@link SyncableTable}.\n   * \n   * @param params - Details of table for which to retrieve ID column.\n   * @returns Column name\n   */\n  getTableIdColumn(params: GetTableIdColumnParams) {\n    const {table_name} = params;\n    return this.synqTables![table_name]?.id as string;\n  }\n\n  /**\n   * If not already set, generates and sets deviceId.\n   */\n  async setDeviceId() {\n    // Set the device ID\n    let existing: any;\n    try {\n      existing = (await this.runQuery<any[]>({\n        sql: `SELECT meta_value FROM ${this.synqPrefix}_meta WHERE meta_name = 'device_id'`\n      }))[0];\n    }\n    catch(err) {\n      this.log.warn(`Couldn't retrieve device ID`);\n    }\n\n    log.warn('@device_id', existing);\n    if (!existing?.meta_value) {\n      const res = await this.runQuery<any[]>({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES (?,?) RETURNING *`,\n        values: ['device_id', this.deviceId]\n      });\n      log.warn('@created record for device_id:', res);\n      existing = res[0];\n    }\n    this._deviceId = existing?.meta_value;\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @remarks\n   * This method does not return any records, only the result of the operation.\n   * \n   * @param params - The SQL query and optionally any values.\n   * @returns\n   */\n  async run<T = any>(params: QueryParams): Promise<T> {\n    return this.runQuery(params);\n  }\n\n  /**\n   * Run multiple operations against the DB\n   * \n   * @remarks\n   * This method does not return any records.\n   * \n   * @param params - The SQL query and optionally an array of arrays or key/value pairs\n   * @returns Undefined or an error, if one occurred\n   */\n  async runMany(params: QueryParams) {\n    const {sql, values, prefix = ':'} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    const dbId = this.synqDbId;\n    this.log.debug('@runMany', {quid, sql, values});\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (const v of values) {\n          const bind = this.reformatQueryValues({values: v, prefix});\n          await this.db('exec', {dbId, sql, bind});\n        }\n      }\n      catch(err) {\n        this.log.error({quid, err, stack: (err as Error).stack});\n        reject(err);\n      }\n      resolve(true);\n    });\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @param params - The SQL query and optionally any values\n   * @returns Array of records returned from the database\n   */\n  async runQuery<T = any>(params: QueryParams): Promise<T> {\n    if (!this._db) {\n      const interval = setInterval(async () => {\n        if (!this._db) return;\n        clearInterval(interval);\n      }, 50);\n    }\n    const {sql, prefix = ':'} = params;\n    const values = this.reformatQueryValues({values: params.values, prefix});\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', quid, sql, values, '/');\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql,\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) {\n              this.log.debug('@runQuery RESOLVED', results.length, quid);\n              this.log.trace(sql, values);\n              return resolve(results as any);\n            }\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        this.log.error(quid, err, (err as Error).stack);\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Renames keys of a query's value object to make them compatible\n   * with the SQLiteWASM API's bind parameters.\n   * \n   * @param\n   * @returns \n   */\n  reformatQueryValues({values, prefix = ':'}: {values: any, prefix?: string}) {\n    if (Array.isArray(values)) return values;\n    if (typeof values === 'object') {\n      const keys = Object.keys(values);\n      const remapped: Record<string, any> = {};\n      keys.forEach(k => {\n        const newK = k.startsWith(prefix) ? k : `${prefix}${k}`;\n        remapped[newK] = values[k];\n      });\n      return remapped;\n    }\n    return values;\n  }\n\n  /**\n   * Returns the current device's unique TinySynq ID.\n   * \n   * @returns The device's assigned ID.\n   */\n  async getDeviceId(): Promise<string> {\n    if (this._deviceId) return this._deviceId;\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'device_id'`\n    });\n    return res[0].meta_value;\n  }\n\n  /**\n   * Returns an ISO8601 formatted date and time of the last successful local sync.\n   * \n   * @remarks\n   * \n   * A \"local sync\" is the process of sending local changes to the remote hub.\n   * \n   * @returns The time of the last sync.\n   */\n  async getLastSync(): Promise<string> {\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    this.log.trace('@getLastSync', res[0]);\n    return res[0]?.meta_value;\n  }\n  \n  /**\n   * Returns matching {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChanges(params?: {lastLocalSync?: string, columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync: string = params?.lastLocalSync || await this.getLastSync();\n    let { columns = ['c.*', 'trm.vclock'] } = params || {};\n    this.log.debug('@getChanges', lastLocalSync);\n  \n    let where: string = '';\n    let columnSelection = columns\n      .map(c => c.replace(/[^*._a-z0-9]+/gi, ''))\n      .join(',') || '*';\n  \n    if (lastLocalSync) {\n      where = 'WHERE c.modified > ?'\n    }\n    const sql = `\n      SELECT ${columnSelection}\n      FROM ${this._synqPrefix}_changes c\n      INNER JOIN ${this._synqPrefix}_record_meta trm\n      ON trm.table_name = c.table_name\n      AND trm.row_id = c.row_id\n      ${where}\n      ORDER BY c.modified ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  /**\n   * Returns {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChangesSinceLastSync(params?: {columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync = await this.getLastSync() || undefined;\n    return this.getChanges({...params, lastLocalSync});\n  };\n\n  /**\n   * Writes debug mode value (true) which disables recording \n   * of operations on syncable tables.\n   * \n   * @remarks\n   * \n   * The value set by this method is checked by dedicated triggers.\n   * If the value is `1`, the active trigger writes the data to the\n   * `*_dump` table. It's worth purging the table data once done \n   * with debugging.\n   * \n   * @returns Result of the operation.\n   */\n  async enableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Writes debug mode value (false) which disables recording \n   * of operations on syncable tables.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   * \n   * @returns Result of the operation.\n   */\n  async disableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Empties the `*_dump` table.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   */\n  async clearDebugData() {\n    await this.run({sql: `DELETE FROM ${this._synqPrefix}_dump`});\n    await this.run({sql: `UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = ${this._synqPrefix}_dump`});\n  }\n  \n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private enableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');`\n    });\n  }\n\n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private async disableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');`\n    });\n  }\n\n  async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.run({sql});\n    return savepoint;\n  }\n\n  async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  /**\n   * Retrieves a single record.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  private async getRecord<T>(params: TableNameRowParams): Promise<T | any> {\n    const {table_name, row_id} = params;\n    const idCol = this.getTableIdColumn({table_name: table_name});\n    const sql = `SELECT * FROM ${table_name} WHERE ${idCol} = ?`;\n    const res = await this.runQuery({sql, values: [row_id]});\n    this.log.debug('@getRecord', res);\n    return res[0];\n  }\n\n  /**\n   * Retrieves a single record by it's ID.\n   * \n   * @remarks\n   * \n   * The column used to identify the record is according to the {@link SyncableTable}\n   * that was provided in {@link TinySynqOptionsBase.tables} at instantiation.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  async getById<T>(params: TableNameRowParams): Promise<T | any> {\n    const{table_name, row_id} = params;\n    return this.getRecord({table_name, row_id});\n  }\n\n  async insertRecordMeta({change, vclock}: any) {\n    if (!this.utils.isSafeISO8601(change.modified)) throw new Error(`Invalid modified data for record meta: ${change.modified}`)\n    this.log.debug('<<< @insertRecordMeta >>>', {change, vclock});\n    const { table_name, row_id, source } = change;\n    const mod = vclock[this._deviceId!] || 0;\n    const values = {\n      table_name,\n      row_id,\n      mod,\n      source,\n      vclock: JSON.stringify(vclock),\n      modified: change.modified,\n    };\n    return this.runQuery({\n      sql: `\n      INSERT INTO ${this._synqPrefix}_record_meta (table_name, row_id, source, mod, vclock, modified)\n      VALUES (:table_name, :row_id, :source, :mod, :vclock, :modified)\n      ON CONFLICT DO UPDATE SET source = :source, mod = :mod, vclock = :vclock, modified = :modified\n      RETURNING *\n      `,\n      values,\n    });\n  }\n\n  /**\n   * Get associated meta data (including `vclock`) for record.\n   * \n   * @param params - Object containing table/row parameters.\n   * \n   * @returns Object containing row data from `*_record_meta`.\n   */\n  async getRecordMeta(params: {table_name: string, row_id: string}) {\n    const {table_name, row_id} = params;\n    const sql = `\n    SELECT *\n    FROM ${this.synqPrefix}_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id`;\n    const res = await this.runQuery({sql, values: {table_name, row_id}});\n    return res[0];\n  }\n\n  /**\n   * Returns changes that couldn't be applied yet because they\n   * were received out of sequence.\n   * \n   * @returns Array of pending changes.\n   */\n  async getPending() {\n    const sql = `\n    SELECT *\n    FROM ${this._synqPrefix}_pending\n    ORDER BY id ASC\n    `;\n    const res = await this.runQuery({sql});\n    return res;\n  }\n\n  /**\n   * Creates new pending record to be applied later.\n   * \n   * @param opts - Options for processing out-of-order change\n   * @returns Newly created pending record\n   */\n  private async processOutOfOrderChange({change}: {change: Change}) {\n    const {id, ...data} = change;\n    const sql = this.createInsertFromSystemObject({\n      data,\n      table_name: `${this._synqPrefix}_pending`,\n    });\n    this.log.trace('@processOutOfOrderChange\\n', sql, change);\n    const values: any = { ...data};\n    values.vclock = JSON.stringify(data.vclock);\n    const res = await this.runQuery({sql, values});\n    this.log.trace('@processOutOfOrderChange\\n', {res});\n    return res;\n  }\n\n  /**\n   * Determines whether to treat conflicted change as valid or invalid.\n   * \n   * @param opts - Options for processing concurrent change\n   * @returns boolean \n   */\n  private async processConflictedChange<T>(\n    { record, change, meta: localMeta }: \n    {record: T|any, meta: any, change: Change}\n  ): Promise<boolean> {\n    this.log.debug('@processConflictedChange START', record, change)\n    // INSERT won't have a local record so accept the incoming change\n    if (change.operation === TinySynqOperation.INSERT) return true;\n\n    this.log.trace('<<<@ processConflictedChange LLW @>>>', change.id, change.table_name, change.row_id, {record, localMeta, change});\n    if (change.modified > localMeta.modified) {\n      this.log.debug('<!> INTEGRATING REMOTE', change.id, change.table_name, change.row_id);\n      // Update local with the incoming changes\n      return true;\n    }\n    else {\n      this.log.debug('<!> KEEPING LOCAL', change.id, change.table_name, change.row_id);\n      // Keep the local change, but record receipt of the record.\n      return false;\n    }\n  }\n\n  /**\n   * Checks for and handles issues with incoming change to be applied.\n   * \n   * @returns Result of pre-processing.\n   */\n  private async preProcessChange(\n    {change, restore}: PreProcessChangeOptions\n  ): Promise<PreProcessChangeResult> {\n    this.log.trace('@preProcess change', change)\n    let defaultReason = 'unknown';\n    let valid = false;\n    let reason = defaultReason;\n    const localId = this.deviceId!;\n    const { table_name, row_id, vclock: remote = {} } = change;\n    const record = await this.getRecord({table_name, row_id});\n    this.log.trace('@preProcess record:', record)\n    const meta = await this.getRecordMeta({table_name, row_id});\n    this.log.trace('@preProcess meta:', meta)\n    const local = meta?.vclock ? JSON.parse(meta.vclock) : {};\n    // If it's an insert, there won't be any meta.\n    const localTime = meta?.modified || '1970-01-01';\n    const remoteTime = change?.modified;\n\n    let latest: VClock = {};\n    const localV = new VCompare({ local, remote, localId, localTime, remoteTime });\n    let displaced = false;\n    let conflicted = false;\n    let stale = false;\n\n    // If we don't have the record, treat it as new\n    if (!restore && !record && change.operation !== TinySynqOperation.INSERT) {\n      reason = 'update before insert';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (restore || !record || !local || !local[localId]) {\n      latest = change.vclock;\n    }\n    \n    if (restore) {\n      valid = true;\n      reason = 'restoration';\n      latest = localV.merge();\n      return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n    }\n    else if (displaced = localV.isOutOfOrder()) {  \n      reason = 'received out of order';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (conflicted = localV.isConflicted()) {\n      valid = await this.processConflictedChange({record, change, meta});\n      if (!valid) {\n        reason = 'concurrent writes'; \n      }\n      else {\n        latest = localV.merge();\n      }\n    }\n    else if (stale = localV.isOutDated()) {\n      reason = 'stale';\n    }\n    else if (reason === defaultReason) {\n      valid = true;\n      reason = '';\n      latest = localV.merge();\n    }\n\n    return { valid, reason, vclock: latest, meta, checks: { stale, displaced, conflicted } };\n  }\n\n  /**\n   * Creates an insert query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string.\n   */\n  createInsertFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    const columnsToInsert = Object.keys(data).join(',');\n    //const editable = this._synqTables![table].editable || [];\n    const updates = Object.keys(data)\n      // @TODO: There's no need to restrict editable fields here, but check again.\n      //.filter(key => editable.includes(key))\n      .map(k => `${k} = :${k}`)\n      .join(',');    \n    if (!updates) throw new Error(`No insertable data: ${JSON.stringify(data)}`);\n\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  /**\n   * Creates an update query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string. \n   */\n  createUpdateFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    if (!this._synqTables![table]) throw new Error(`Not a synced table for update: ${table}`);\n\n    const idCol = this._synqTables![table].id;\n    const updates = Object.keys(data)\n      .filter(k => k !== idCol)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    if (!updates) throw new Error(`No updates available: ${JSON.stringify(data)}`);\n  \n    const updateSql = `\n      UPDATE ${table} SET ${updates}\n      WHERE ${idCol} = :${idCol}\n      RETURNING *;`;\n\n    return updateSql;\n  }\n\n  /**\n   * Creates an insert query based on the system table name and data provided.\n   *  \n   * @param param0 - Parameters from which to create the query.\n   * \n   * @returns A SQL query string. \n   */\n  private createInsertFromSystemObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    this.log.silly('@createInsert...', {data});\n    const columnsToInsert = Object.keys(data).join(',');\n    const updates = Object.keys(data)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n    return insertSql;\n  }\n\n  private async updateLastSync({change}: {change: Change}) {\n    await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      values: { name: 'last_local_sync'},\n    });\n    await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, :value)`,\n      values: { name: 'last_sync', value: change.id }\n    });\n  }\n\n  private async applyChange({\n    change,\n    restore,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      // Check that the changes can actually be applied\n      const changeStatus = await this.preProcessChange({change, restore});\n\n      console.log(\n        '\\n\\n ::: STATUS :::', \n        JSON.stringify({changeStatus, change}, null, 2), \n        '\\n\\n ::: /STATUS :::'\n      );\n      if (!changeStatus?.valid) {\n        this.log.warn('>>> Invalid change', changeStatus);\n        this.updateLastSync({change});\n        return;\n      }\n\n      const table = this.synqTables![change.table_name];\n      const idCol = this.getTableIdColumn(change);\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n          recordData[idCol] = change.row_id;\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n      else {\n        // There's no data so bail\n        throw new Error(`Cannot perform update with empty data:\\n${JSON.stringify(change, null, 2)}`);\n      }\n \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n\n      this.log.silly('@applyChange', {change, table, changeStatus});\n      switch(change.operation) {\n        case 'INSERT':\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'UPDATE':\n          const updateSql = this.createUpdateFromObject({\n            data: recordData,\n            table_name: change.table_name,\n          });\n          this.run({sql: updateSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          this.log.debug('>>> DELETE SQL <<<', sql, change.row_id);\n          await this.run({sql, values: [change.row_id]});\n          break;\n      }\n      await this.updateLastSync({change});\n\n      // Insert merged VClock data\n      const updatedRecordMeta = await this.insertRecordMeta({change, vclock: changeStatus.vclock});\n      this.log.silly({updatedRecordMeta});\n    }\n    catch (error: any) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}. Rolled back.`, {change});\n      this.log.error(error.stack)\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB({ changes, restore = false }: { changes: Change[], restore?: boolean }) {\n    await this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, restore, savepoint});\n        }\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    await this.enableTriggers();\n    this.log.silly(`Applied ${changes.length} change(s)`);\n  };\n\n  /**\n   * Get items that have been recently changed.\n   * \n   * @param opts \n   */\n  getFilteredChanges(opts?: LatestChangesOptions) {\n    let conditions: string[] = [];\n    let values: any = {};\n    if (opts?.exclude) {\n      conditions.push('source != :exclude');\n      values.exclude = opts.exclude;\n    }\n    if (opts?.checkpoint) {\n      conditions.push('id > :checkpoint');\n      values.checkpoint = opts.checkpoint;\n    }\n    else if (opts?.since) {\n      conditions.push('modified > :since');\n      values.since = opts.since\n    }\n    const where = conditions.length ? `WHERE ${conditions.join(' AND ')}` : '';\n    const sql = `\n    SELECT id, table_name, row_id, data, operation, source, vclock, modified\n    FROM ${this.synqPrefix}_changes\n    ${where} \n    ORDER BY modified ASC`;\n\n    return this.runQuery({sql, values});\n  }\n\n  async tablesReady(): Promise<void> {\n    await this.enableTriggers();\n  }\n\n  async obliterate(): Promise<void> {\n    return await this.db({\n      type: 'close', \n      dbId: this.deviceId,\n      args: {unlink: true}\n    });\n  }\n}","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, SyncableTable } from \"./types.js\";\nimport { getUpdateTriggerDiffQuery } from \"./trigger.js\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst initTinySynq = async (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysynq-setup', ...logOptions});\n  const ts = new TinySynq(config);\n\n  /**\n   * Pretty important: make sure to call `init()` :-)\n   */\n\n  await ts.init();\n\n  const getRecordMetaInsertQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    /* \n    db.is kind of insane, but it works. A rundown of what's happening:\n    - We're creating a trigger after a deletion (the easy part)\n    - Aside from recording the changes, we also need to add record-specific metadata:\n      - table name and row identifier,\n      - the number of times the record has been touched (including creation)\n      - the map of all changes across all devices — a Vector Clock (JSON format)\n    - Getting the vector clock is tricky, partly because of SQLite limitations\n      (no variables, control structures), and partly because it's possible that\n      no meta exists for the record.\n    - To work around db.we do a select to get the meta, but perform a union with\n      another select that just selects insert values.\n    - Included in both selects is\n      a 'peg' which we use to sort the UNIONed rows to ensure that if a valid row\n      exists, it's the first row returned.\n    - Now we select from db.union and limit to 1 result. If a record exists\n      then we get that record. If not, we get the values ready for insertion.\n    - Finally, if there's a conflict on PRIMAY KEY or UNIQUE contraints, we update\n      only the columns configured as editable.\n    */\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n    INSERT INTO ${ts.synqPrefix}_record_meta (table_name, row_id, source, mod, vclock)\n    SELECT table_name, row_id, source, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '${table.name}' as table_name,\n        ${version}.${table.id} as row_id, \n        '${ts.deviceId}' as source, \n        IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$.${ts.deviceId}', IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1) as vclock\n      FROM ${ts.synqPrefix}_record_meta\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id}\n      UNION\n      SELECT 0 as peg, '${table.name}' as table_name, ${version}.${table.id} as row_id, '${ts.deviceId}' as source, 1, json_object('${ts.deviceId}', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      source = '${ts.deviceId}',\n      mod = json_extract(excluded.vclock,'$.${ts.deviceId}'),\n      vclock = json_extract(excluded.vclock,'$'),\n      modified = '${ts.utils.utcNowAsISO8601().replace('Z', '')}'\n    ;`;\n    log.silly(sql);\n    return sql;\n  }\n\n  const getChangeUpdateQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n      UPDATE ${ts.synqPrefix}_changes\n      SET vclock = trm.vclock, source = trm.source\n      FROM (\n        SELECT vclock, source\n        FROM ${ts.synqPrefix}_record_meta\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n      ) AS trm\n      WHERE id IN (\n        SELECT id FROM ${ts.synqPrefix}_changes\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n        ORDER by id desc\n        LIMIT 1\n      );\n    `;\n    return sql;\n  }\n\n  const setupTriggersForTable = async ({ table }: { table: SyncableTable }) => {\n    log.debug('Setting up triggers for', table.name);\n\n    // Template for inserting the new value as JSON in the `*_changes` table.\n    const jsonObject = (await ts.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    log.silly('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    /**\n     * These triggers run for changes originating locally. They are disabled\n     * when remote changes are being applied (`triggers_on` in `*_meta` table).\n     */\n\n    // Ensure triggers are up to date\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_insert_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_update_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    await ts.run({sql});\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        ${await getUpdateTriggerDiffQuery({ts, table})}\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n        \n        ${getRecordMetaInsertQuery({table, remove: true})}\n        \n        ${getChangeUpdateQuery({table, remove: true})}\n      END;`\n    });\n\n    /**\n     * All the triggers below will only be executed if `meta_name=\"debug_on\"`\n     * has the `meta_value=1` in the *_meta table, regardless of `triggers_on`.\n     */\n\n    // Remove previous versions\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_record_meta`});\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow a rudimentary tracing of DB actions on the synced tables.\n     */\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'INSERT', ${jsonObject.jo});\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    const oldJsonObject = jsonObject.jo.replace(/NEW/g, 'OLD');\n    \n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'DELETE', ${oldJsonObject});\n      END;`\n    });\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow comparison record meta before and after insert.\n     */\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta\n      BEFORE INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta\n      AFTER INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_record_meta\n      AFTER UPDATE ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    /* END OF DEBUG TRIGGERS */\n  }\n\n  // Create a change-tracking table and index\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      source TEXT,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_modified_idx ON ${ts.synqPrefix}_changes(modified)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_table_row_idx ON ${ts.synqPrefix}_changes(table_name, row_id)`\n  });\n\n  // Change *_pending is essentially a clone of *_changes used to hold items that\n  // cannot be applied yet because intermediate/preceding changes haven't been received.\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      source TEXT NOT NULL,\n      vclock BLOB NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_pending_table_row_idx ON ${ts.synqPrefix}_pending(table_name, row_id)`\n  });\n\n  // Create a notice table\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  }); \n\n  // Create record meta table and index\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER,\n      source TEXT NOT NULL,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n\n  await ts.run({\n    sql:`CREATE UNIQUE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_idx ON ${ts.synqPrefix}_record_meta(table_name, row_id)`\n  });\n  // @TODO: These may actually need to be compound indexes; need to evaluate queries.\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_source_idx ON ${ts.synqPrefix}_record_meta(source)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_modified_idx ON ${ts.synqPrefix}_record_meta(modified)`\n  });\n\n  // Create meta table\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  `});\n\n  await ts.run({\n    sql: `\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  `});\n\n  await ts.run({\n    sql: `CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_meta_name_idx ON ${ts.synqPrefix}_meta(meta_name)`\n  });\n  \n  // Enable debug mode\n  if (debug) await ts.enableDebug();\n\n  // Set the device ID\n  await ts.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n      await ts.run({\n        sql: preInitQuery\n      });\n    }\n  }\n\n  log.debug(`@${ts.synqPrefix}_meta`, ts.runQuery({sql:`SELECT * FROM pragma_table_info('${ts.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, ts.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = await ts.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    log.debug('@exists?', table.name, exists);\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    await setupTriggersForTable({ table });\n    ts.tablesReady();\n  }\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.debug(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      await ts.run({\n        sql: postInitQuery\n      });\n    }\n  }\n\n  return ts;\n};\n\nexport default initTinySynq;","\n\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { SyncableTable } from \"./types.js\";\n\nexport const getOldVsNewUnionColumnSelection = (params: {columns: any[]}) => {\n  if (!params.columns) throw new Error('Missing table column data to generate trigger union column selection'); \n\n  return params.columns.map((c) => `SELECT '${c.name}' AS col, OLD.${c.name} AS old_val, NEW.${c.name} AS new_val`);\n}\n\nexport const getUpdateTriggerDiffQuery = async (params: {ts: TinySynq, table: SyncableTable}) => {\n  const { ts, table } = params;\n  // Need to get the table schema in order to generate the query.\n  const columns = await ts.runQuery({\n    sql: `SELECT * FROM pragma_table_info('${table.name}')`\n  });\n\n  const unionSelects = getOldVsNewUnionColumnSelection({columns});\n  const sql = `\n  INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n  SELECT * FROM (\n    WITH RECURSIVE all_cols AS (\n      ${unionSelects.join('\\n    UNION ALL\\n    ')}\n    ),\n    changed_cols AS (\n      SELECT col, new_val\n      FROM all_cols\n      WHERE new_val != old_val\n    )\n    SELECT '${table.name}', NEW.${table.id}, 'UPDATE', json_group_object(col, new_val)\n    FROM changed_cols\n  );`;\n\n  return sql;\n};","import { TinySynq } from \"./tinysynq.class.js\";\nimport { Change, SyncRequestType, SyncResponseType } from \"./types.js\";\n\ninterface TinySynqClientConfig {\n  /**\n   * Initialised TinySynq instance.\n   */\n  ts: TinySynq;\n  /**\n   * The domain or IP address (no protocol or port).\n   * \n   * @default localhost\n   */\n  hostname?: string;\n  /**\n   * The port number on which to connect.\n   *\n   * @default 7174\n   */\n  port?: number;\n  /**\n   * Whether or not it should a secure connection (wss://)\n   * \n   * @default false\n   */\n  secure?: boolean;\n}\n\nlet socket: WebSocket;\n\nconst defaultConfig = {\n  hostname: 'localhost',\n  port: 7174,\n  secure: false,\n};\n\nexport class TinySynqClient extends EventTarget {\n\n  private _config: TinySynqClientConfig;\n  private _serverUrl: string;\n  private _ts: TinySynq;\n  private _ws: WebSocket | undefined;\n\n  get serverUrl() {\n    return this._serverUrl;\n  }\n\n  get ts() {\n    return this._ts;\n  }\n\n  get ws() {\n    return this._ws;\n  }\n\n  constructor(config: TinySynqClientConfig) {\n    super();\n    if (!config?.ts) throw new Error('Invalid client configuration');\n    this._config = config;\n    this._ts = config.ts;\n    const finalConfig = {...defaultConfig, ...this._config};\n    const { secure, hostname, port = '' } = finalConfig;\n    const ws = 'ws' + (secure ? 's' : '');\n    this._serverUrl = `${ws}://${hostname}${port ? ':' : ''}${port}`;\n  }\n\n  isOpenOrConnecting() {\n    return this.ws && [Number(this.ws.OPEN), Number(this.ws.CONNECTING)].includes(this.ws.readyState)\n  }\n  \n  async connect(): Promise<WebSocket> {\n    return new Promise((resolve, reject) => {\n      if (this.isOpenOrConnecting()) {\n        return resolve(this.ws as WebSocket);\n      }\n      this._ws = new WebSocket(this.serverUrl);\n      this._ws.addEventListener('open', (e) => {\n        console.log(\"TinySynq socket ready.\", e);\n        resolve(this.ws as WebSocket);\n      });\n      this._ws.addEventListener('error', (e) => {\n        console.log(\"TinySynq socket error:\", e);\n        if (this.isOpenOrConnecting()) reject(e);\n      });\n      this._ws.addEventListener('close', (e) => {\n        console.log('Closing TinySynq socket...', e);\n      });\n      this._ws.addEventListener('message', this.handleMessage.bind(this));\n    });\n  }\n\n  async push() {\n    if (!this.ts) return;\n    const changes = await this.ts.getChanges();\n    if (!changes) return console.log('no changes');\n    const payload = {type: SyncRequestType.push, changes, source: this._ts.deviceId};\n    console.debug('@push', payload);\n    this._ws?.send(JSON.stringify(payload));\n  }\n\n  async pull() {\n    const payload = {type: SyncRequestType.pull, source: this._ts.deviceId};\n    console.debug('@pull', payload);\n    this._ws?.send(JSON.stringify(payload));\n  }\n\n  private async handleMessage(e: any) {\n    console.debug('@message', e);\n    const data = JSON.parse(e.data);\n    console.debug('@parsed', data)\n    if (data.type !== SyncResponseType.nack) {\n      if (data.changes) {\n        console.warn('@client processing changes')\n        const changes = data.changes.map((c: Change) => {\n          if (typeof c.vclock === 'string') {\n            c.vclock = JSON.parse(c.vclock);\n          }\n          return c;\n        });\n        console.debug('@client changes', changes)\n        await this.ts.applyChangesToLocalDB({changes});\n        const event = new CustomEvent('changes', {\n          detail: data.changes\n        });\n        console.debug('::: Disptaching event...', event);\n        this.dispatchEvent(event)\n      }\n    }\n    else {\n      console.error('Sync failed', data);\n      this.dispatchEvent(\n        new CustomEvent('error', {\n          detail: data\n        })\n      );\n    }\n  }\n}\n\n"],"names":["TinySynqOperation","SyncRequestType","SyncResponseType","LogLevel","VCompare","_ref","local","remote","localId","localTime","remoteTime","this","isGreater","isLess","isWrongOrder","JSON","parse","_proto","prototype","setRemote","_ref2","isConflicted","data","_this","Object","keys","_extends","forEach","k","localCount","remoteCount","isOutDated","_this$localTime","console","debug","stringify","Error","Date","isOutOfOrder","filter","i","length","_local$k","_remote$k","drift","Math","abs","merge","_step","merged","_iterator","_createForOfIteratorHelperLoose","Set","concat","done","p","value","max","undefined","e","recover","result","then","_settle","pact","state","s","_Pact","o","bind","v","observer","onRejected","callback","onFulfilled","_isSettledPact","thenable","log","Logger","name","minLevel","Info","_forOf","target","body","check","_iteratorSymbol","step","reject","iterator","_cycle","_fixup","TypeError","values","push","array","_forTo","strftimeAsISO8601","TinySynq","_EventTarget","opts","_opts$prefix","_opts$wal","_opts$logOptions$minL","_opts$logOptions","_opts$logOptions2","_this2","call","_db","_dbPath","_deviceId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","toISOString","replace","trim","isSafeISO8601","date","test","filePath","sqlite3","tables","t","prefix","batchSize","wal","logOptions","type","maskValuesOfKeys","hideLogPositionForProduction","_inheritsLoose","init","_this3","db","Promise","resolve","dbPath","_catch","res","_promiser","sqlite3Worker1Promiser","onready","onerror","err","error","_this$log","apply","slice","arguments","onunhandled","event","promiser","_temp4","dbId","conf","_temp2","waited","interval","setInterval","clearInterval","dispatchEvent","CustomEvent","info","version","libVersion","setDeviceId","_temp","runQuery","sql","_temp3","filename","_promiser2","_promiser3","message","getNewId","nanoid","getTableIdColumn","params","_this$synqTables$tabl","synqTables","table_name","id","_temp8","existing","_temp6","_existing","_this4","meta_value","warn","_temp5","_existing2","synqPrefix","deviceId","_temp7","_this4$runQuery","run","runMany","_this6","_params$prefix","quid","ceil","random","synqDbId","_temp11","_temp10","_temp9","reformatQueryValues","stack","_this7","_params$prefix2","results","row","trace","col","columnNames","_ref$prefix","Array","isArray","remapped","newK","startsWith","getDeviceId","_this8","getLastSync","_this9","_res$","getChanges","_temp12","lastLocalSync","_ref2$columns","columns","_this10","where","columnSelection","map","c","join","_params$lastLocalSync","getChangesSinceLastSync","_this11","enableDebug","disableDebug","_this13","clearDebugData","_this14","enableTriggers","disableTriggers","_this15","beginTransaction","_this16","savepoint","now","commitTransaction","_ref3","rollbackTransaction","_ref4","getRecord","_this19","row_id","idCol","getById","insertRecordMeta","_ref5","change","vclock","_this21","modified","mod","source","getRecordMeta","_this22","getPending","processOutOfOrderChange","_ref6","_this24","_objectWithoutPropertiesLoose","_excluded","createInsertFromSystemObject","processConflictedChange","_ref7","record","localMeta","meta","_this25","operation","INSERT","preProcessChange","_ref8","restore","_this26","defaultReason","valid","reason","_change$vclock","_temp18","_exit","_temp16","_result2","latest","checks","stale","displaced","conflicted","_temp15","localV","_temp19","_temp20","_this26$processConfli","_temp17","createInsertFromObject","_ref9","table","columnsToInsert","updates","insertPlaceholders","createUpdateFromObject","_ref10","_ref11","silly","updateLastSync","_ref12","_this27","applyChange","_ref13","_this28","changeStatus","_temp22","updatedRecordMeta","recordData","_temp21","discriminant","cases","awaitBody","dispatchIndex","testValue","outer","fallthroughCheck","_resumeAfterBody","_switch","insertSql","_interrupt","updateSql","applyChangesToLocalDB","_ref14","changes","_ref14$restore","_this29","_temp27","_temp26","update","stage","shouldContinue","updateValue","_resumeAfterTest","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp25","_temp24","_temp23","getFilteredChanges","conditions","exclude","checkpoint","since","tablesReady","obliterate","args","unlink","_createClass","key","get","_wrapNativeSuper","EventTarget","initTinySynq","config","preInit","postInit","ts","getRecordMetaInsertQuery","_ref$remove","remove","getChangeUpdateQuery","_ref2$remove","_result","postInitQuery","exists","_ts$runQuery","jsonObject","jo","_run","unionSelects","getOldVsNewUnionColumnSelection","getUpdateTriggerDiffQuery","_getUpdateTriggerDiff","oldJsonObject","setupTriggersForTable","preInitQuery","next","return","defaultConfig","hostname","port","secure","TinySynqClient","_config","_serverUrl","_ts","_ws","finalConfig","_finalConfig$port","isOpenOrConnecting","ws","Number","OPEN","CONNECTING","includes","readyState","connect","WebSocket","serverUrl","addEventListener","handleMessage","_this3$_ws","payload","send","pull","_this4$_ws","_this5","nack","detail"],"mappings":"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"}