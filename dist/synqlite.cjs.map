{"version":3,"file":"synqlite.cjs","sources":["../src/lib/index.ts","../src/lib/constants.ts"],"sourcesContent":["import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { SYNQLITE_BATCH_SIZE, SYNQLITE_PREFIX } from './constants.js';\nimport { Change, SynQLiteOptions, SyncableTable } from './types.js';\n// import pino from 'pino';\n\nconsole.log({ sqlite3Worker1Promiser });\n\ntype ApplyChangeParams = {\n  change: Change,\n  savepoint: string\n}\n\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\nclass SynQLite {\n  private _db: any;\n  private _dbName: string;\n  private _synqDbId?: string;\n  private _synqPrefix?: string;\n  private _synqTables?: SyncableTable[];\n  private _synqBatchSize: number = 20;\n\n  utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date((new Date()).toUTCString()).toISOString();\n    }\n  }\n\n  constructor(initData: SynQLiteOptions) {\n    this._dbName = initData.filename || '';\n    this._db = initData.sqlite3 || undefined;\n    this._synqPrefix = initData.prefix;\n    this._synqTables = initData.tables;\n    this._synqBatchSize = initData.batchSize || this._synqBatchSize;\n    // @TODO: take code from sqlite-example-app to initialise DB\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbName) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        console.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          console.log('@WTF?')\n          try {\n            const _promiser = sqlite3Worker1Promiser({\n              onready: () => {\n                console.log('ready?')\n                res(_promiser);\n              },\n              onerror: (err: any) => {\n                console.error('@ERROR', err);\n              },\n              debug: (...args: any) => {\n                console.debug(...args);\n              }\n            });\n            console.log({_promiser});\n          }\n          catch(err: any) {\n            console.log('@tryerr')\n            console.error(err)\n          }\n        });\n        \n        console.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          console.debug(`open ${this.dbName}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbName}?vfs=opfs`,\n          });\n  \n          console.log(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbName}`\n          });\n          console.log(\n            'OPFS not available, created in-memory database at',\n            res.result.filename, '$1'\n          );\n        }\n  \n        if (!res) return reject('Unable to start DB');\n\n        const { dbId } = res;\n        this._synqDbId = dbId;\n      \n        const conf = await promiser('config-get', {});\n        console.log('Running SQLite3 version', conf.result.version.libVersion);\n        \n        this._db = promiser;\n        resolve(this);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        console.error(err.name, err.message);\n        console.error(err)\n        reject('DB setup failed.');\n      }\n      console.groupEnd();\n    });\n  };\n\n  get db() {\n    return this._db;\n  }\n\n  get dbName() {\n    return this._dbName;\n  }\n\n  get synqDbId() {\n    return this._synqDbId;\n  }\n\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  async runQuery<T>({sql, values}: {sql: string, values?: any[]}): Promise<T> {\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql, // I think we can make this sexier, in Minmail\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) return resolve(results as any);\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        console.error(err);\n        reject(err);\n      }\n    });\n  }\n\n  async getLastSync() {\n    return this.db.exec(`\n      SELECT * FROM ${this.db.synqPrefix}_meta\n      WHERE meta_name = 'last_local_sync'`\n    ).get();\n  }\n  \n  async getChangesSinceLastSync(db: any, lastSync?: string) {\n    let lastLocalSync: string = lastSync || (await this.getLastSync()).last_local_sync;\n    console.debug('@getChangesSinceLastSync', lastLocalSync);\n  \n    let where: string = '';\n  \n    if (lastLocalSync) {\n      where = 'WHERE modified_at > ?'\n    }\n    const sql = `\n    SELECT * FROM ${db.synqPrefix}_changes\n      ${where}\n      ORDER BY modified_at ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    console.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  private async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.runQuery({sql});\n    return savepoint\n  }\n\n  private async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.runQuery({sql});\n  }\n\n  private async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.runQuery({sql}); \n  }\n\n  async applyChange({\n    change,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      const table = this.synqTables?.find(t => t.name === change.table_name);\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          console.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n        \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n      switch(change.operation) {\n        case 'UPDATE':\n          const columnsToUpdate = Object.keys(recordData).map(key => `${key} = :${key}`).join(', ');\n          const updateValues = { ...recordData, [table.id]: change.row_id};\n          const updateSql = `UPDATE ${change.table_name} SET ${columnsToUpdate} WHERE ${table.id} = :${table.id}`;\n          // console.debug('@performing update... sql:', updateSql, updateValues);\n          await this.runQuery({sql: updateSql, values: updateValues});\n          break;\n        case 'INSERT':\n          const columnsToInsert = Object.keys(recordData).join(',');\n          const insertPlaceholders = Object.keys(recordData).map(k => `:${k}`).join(',')\n          const insertSql = `INSERT OR REPLACE INTO ${change.table_name} (${columnsToInsert}) VALUES (${insertPlaceholders});`;\n          // console.debug('@performing insert... sql:', insertSql, recordData);\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          await this.runQuery({sql, values: [change.row_id]});\n          break;\n      }\n\n      // @TODO: do we need last_sync_local per table?\n      this.runQuery({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES('last_local_sync', STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      });\n    }\n    catch (error) {\n      await this.rollbackTransaction({savepoint})\n      console.error(`Error applying change: ${error}`);\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB(changes: Change[]) {\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, savepoint})\n        }\n\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        console.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    console.debug(`Applied ${changes.length} change(s)`)\n  };\n}\n\nexport const setupDatabase = async ({\n  filename,\n  sqlite3,\n  prefix = SYNQLITE_PREFIX,\n  tables,\n  batchSize = SYNQLITE_BATCH_SIZE,\n}: SynQLiteOptions) => {\n  /*\n  @TODO:\n   - check if DB path exists (throw if not)\n   - check if table names have been provided (throw if not)\n   - check if table names exist (throw if not)\n  */\n  const db = new SynQLite({\n    filename,\n    sqlite3,\n    prefix,\n    tables,\n    batchSize\n  });\n  console.log('@SynQLite db', db)\n  \n  // Initialise the DB\n  try {\n    await db.init();\n  }\n  catch(err) {\n    console.error(err);\n    throw err;\n  }\n\n  prefix = prefix?.trim().replace(/[^a-z0-9]+$/gi, '');\n  console.debug({prefix, batchSize})\n\n  // Add a 'last_modified' column to each table you want to sync, if not already present.\n  // Example for a table named 'items':\n  // db.exec('ALTER TABLE items ADD COLUMN last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL');\n\n  // Create a change-tracking table\n  await db.runQuery({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${prefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      modified_at TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n    \n  // Create the index\n  db.runQuery({\n    sql: `CREATE INDEX IF NOT EXISTS ${prefix}_change_modified_idx ON ${prefix}_changes(modified_at)`\n  });\n\n  db.runQuery({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${prefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );`\n  });\n  db.runQuery({\n    sql: `CREATE INDEX IF NOT EXISTS ${prefix}_meta_name_idx ON ${prefix}_meta(meta_name)`\n  });\n\n  for (const table of tables) {\n    console.debug('Setting up', table.name, table.id);\n    const jsonObject = await db.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    });\n    console.log(jsonObject, jsonObject.jo)\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n      END;`\n      console.log(sql)\n    db.runQuery({sql});\n\n    db.runQuery({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    db.runQuery({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n      END;`\n    });\n  }\n\n  return db;\n};\n\nexport default setupDatabase;","export const SYNQLITE_PREFIX = 'synql';\nexport const SYNQLITE_BATCH_SIZE = 20;"],"names":["state","value","pact","s","v","then","_settle","bind","observer","_Pact","prototype","onFulfilled","onRejected","result","this","callback","e","o","_this","_iteratorSymbol","Symbol","iterator","_isSettledPact","thenable","_forOf","target","body","check","step","reject","_cycle","next","done","_fixup","TypeError","values","i","length","push","array","_forTo","console","log","sqlite3Worker1Promiser","strtimeAsISO8601","SynQLite","initData","_db","_dbName","_synqDbId","_synqPrefix","_synqTables","_synqBatchSize","utils","nowAsISO8601","utcNowAsISO8601","Date","toUTCString","toISOString","filename","sqlite3","undefined","prefix","tables","batchSize","_proto","init","db","Promise","resolve","dbName","_temp4","_exit","_result","groupEnd","_temp3","_catch","debug","res","_promiser","onready","onerror","err","error","_console","apply","slice","call","arguments","promiser","_temp2","_reject","dbId","conf","version","libVersion","_temp","_promiser2","replace","_promiser3","Error","message","name","runQuery","_ref","sql","_this2","synqDbId","results","row","forEach","col","columnNames","getLastSync","exec","synqPrefix","get","getChangesSinceLastSync","lastSync","_temp5","_this4$getLastSync","lastLocalSync","last_local_sync","where","_this4","beginTransaction","_this5","savepoint","now","commitTransaction","_ref2","rollbackTransaction","_ref3","applyChange","_ref4","change","_this8","_this8$synqTables","_temp7","recordData","table","synqTables","find","t","table_name","data","JSON","parse","_temp6","_switch","operation","_extends2","columnsToUpdate","Object","keys","map","key","join","updateValues","_extends","id","row_id","_interrupt","columnsToInsert","insertPlaceholders","k","applyChangesToLocalDB","changes","_temp14","_this9","_temp13","test","update","stage","shouldContinue","updateValue","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp12","_temp11","_temp10","_createClass","_ref5","_ref5$prefix","_ref5$batchSize","_temp17","_result3","_prefix","trim","_temp15","jsonObject","jo","_temp16"],"mappings":"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"}