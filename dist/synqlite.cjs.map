{"version":3,"file":"synqlite.cjs","sources":["../src/lib/types.ts","../src/lib/index.ts","../src/lib/constants.ts"],"sourcesContent":["import { ISettingsParam, ILogObj } from 'tslog';\n\nexport type SyncableTable = {\n  name: string;\n  id: string;\n}\n\nexport type SynQLiteOptionsBase = {\n  sqlite3?: SQLiteWASM;\n  filename?: string;\n  prefix: string;\n  tables: SyncableTable[];\n  batchSize?: number;\n  wal?: boolean;\n  preInit?: string[];\n  postInit?: string[];\n  logOptions?: ISettingsParam<ILogObj>\n}\n\nexport type SynQLiteOptions = SynQLiteOptionsBase & (\n  {\n    sqlite3: any;\n  } | {\n    filename: string;\n  }\n)\n\nexport type SQLiteWASM = any\n\n// @TODO: create types for WASM SQLite3 instance?\nexport type Database = { }\n\nexport type SynqlDatabase = Database & {\n  synqPrefix?: string;\n  synqTables?: SyncableTable[];\n  synqBatchSize: number;\n  utils: {\n    utcNowAsISO8601: () => string;\n    strtimeAsISO8601: string;\n  }\n  [key: string]: any;\n}\n\nexport interface SynQLiteInterface {\n  db: SQLiteWASM;\n  dbName: string;\n  synqDbId?: string;\n  synqPrefix?: string;\n  synqTables?: SyncableTable[];\n  synqBatchSize: number;\n  wal: boolean;\n  utils: {\n    utcNowAsISO8601: () => string;\n    strtimeAsISO8601: string;\n  };\n  init(): Promise<SynQLiteInterface>;\n  runQuery<T>(queryData: {sql: string, values?: any[]}): Promise<T>;\n  getLastSync: Promise<MetaRowData>;\n  getChangesSinceLastSync(data: {db: SQLiteWASM, lastSync?: string}): Promise<Change[]>;\n  beginTransaction(): Promise<string>;\n  commitTransaction({savepoint}: {savepoint: string}): Promise<any>;\n  rollbackTransaction({savepoint}: {savepoint: string}): Promise<any>;\n  // applyChange(data: ApplyChangeParams): Promise<any>;\n  applyChangesToLocalDB(changes: Change[]): Promise<any>;\n  setupTriggersForTable(data: {table: SyncableTable}): Promise<any>;\n}\n\nexport type ApplyChangeParams = {\n  change: Change,\n  savepoint: string\n}\n\nexport type MetaRowData = {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type Change = {\n  id: number;\n  table_name: string;\n  row_id: string;\n  operation: string;\n  data: string; // JSON string\n  modified_at: string;\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { SYNQLITE_BATCH_SIZE, SYNQLITE_PREFIX } from './constants.js';\nimport { ApplyChangeParams, Change, LogLevel, SynQLiteOptions, SyncableTable } from './types.js';\nimport { Logger, ILogObj, ISettingsParam } from 'tslog';\n\nconst log = new Logger({ name: 'synqlite-web-init', minLevel: LogLevel.Info });\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\nexport class SynQLite {\n  private _db: any;\n  private _dbName: string;\n  private _synqDbId?: string;\n  private _synqPrefix?: string;\n  private _synqTables?: SyncableTable[];\n  private _synqBatchSize: number = 20;\n  private _wal = false;\n  private log: Logger<ILogObj>;\n\n  utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date((new Date()).toUTCString()).toISOString();\n    }\n  }\n\n  constructor(initData: SynQLiteOptions) {\n    this._dbName = initData.filename || '';\n    this._db = initData.sqlite3 || undefined;\n    this._synqPrefix = initData.prefix;\n    this._synqTables = initData.tables;\n    this._synqBatchSize = initData.batchSize || this._synqBatchSize;\n    this._wal = initData.wal ?? false;\n    this.log = new Logger({\n      name: 'synqlite-web',\n      minLevel: LogLevel.Info,\n      type: 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(initData.logOptions || {})\n    });\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbName) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.log.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              this.log.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              this.log.debug(...args);\n            },\n            onunhandled: (event: any) => {\n              this.log.error('@UNHANDLED', event);\n            }\n          });\n        });\n        \n        this.log.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          this.log.debug(`open ${this.dbName}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbName}?vfs=opfs`,\n          });\n  \n          this.log.info(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbName}`\n          });\n          this.log.info(\n            'OPFS not available, created in-memory database at',\n            res.result.filename, '$1'\n          );\n        }\n  \n        if (!res) return reject('Unable to start DB');\n\n        const { dbId } = res;\n        this._synqDbId = dbId;\n      \n        const conf = await promiser('config-get', {});\n        this.log.info('Running SQLite3 version', conf.result.version.libVersion);\n        \n        this._db = promiser;\n        resolve(this);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        this.log.error(err.name, err.message);\n        this.log.error(err)\n        reject('DB setup failed.');\n      }\n    });\n  };\n\n  get db() {\n    return this._db;\n  }\n\n  get dbName() {\n    return this._dbName;\n  }\n\n  get synqDbId() {\n    return this._synqDbId;\n  }\n\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  get wal() {\n    return this._wal;\n  }\n\n  async runQuery<T>({sql, values}: {sql: string, values?: any[]}): Promise<T> {\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', quid, sql, values, '/');\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql, // I think we can make this sexier, in Minmail\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) {\n              this.log.debug('@runQuery RESOLVED', quid);\n              return resolve(results as any);\n            }\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        this.log.error(quid, err);\n        reject(err);\n      }\n    });\n  }\n\n  async getLastSync() {\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT * FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    return res[0];\n  }\n  \n  async getChangesSinceLastSync({db, lastSync}: {db: any, lastSync?: string}) {\n    let lastLocalSync: string = lastSync || (await this.getLastSync()).last_local_sync;\n    this.log.debug('@getChangesSinceLastSync', lastLocalSync);\n  \n    let where: string = '';\n  \n    if (lastLocalSync) {\n      where = 'WHERE modified_at > ?'\n    }\n    const sql = `\n    SELECT * FROM ${this.synqPrefix}_changes\n      ${where}\n      ORDER BY modified_at ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  private enableTriggers() {\n    return this.runQuery({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1')\n      RETURNING *;\n      `\n    });\n  }\n\n  private disableTriggers() {\n    return this.runQuery({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0')\n      RETURNING *;\n      `\n    });\n  }\n\n  private async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.runQuery({sql});\n    return savepoint\n  }\n\n  private async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.runQuery({sql});\n  }\n\n  private async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.runQuery({sql}); \n  }\n\n  private async applyChange({\n    change,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      const table = this.synqTables?.find(t => t.name === change.table_name);\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n        \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n      switch(change.operation) {\n        case 'UPDATE':\n          const columnsToUpdate = Object.keys(recordData).map(key => `${key} = :${key}`).join(', ');\n          const updateValues = { ...recordData, [table.id]: change.row_id};\n          const updateSql = `UPDATE ${change.table_name} SET ${columnsToUpdate} WHERE ${table.id} = :${table.id}`;\n          // this.log.debug('@performing update... sql:', updateSql, updateValues);\n          await this.runQuery({sql: updateSql, values: updateValues});\n          break;\n        case 'INSERT':\n          const columnsToInsert = Object.keys(recordData).join(',');\n          const insertPlaceholders = Object.keys(recordData).map(k => `:${k}`).join(',')\n          const insertSql = `INSERT OR REPLACE INTO ${change.table_name} (${columnsToInsert}) VALUES (${insertPlaceholders});`;\n          // this.log.debug('@performing insert... sql:', insertSql, recordData);\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          await this.runQuery({sql, values: [change.row_id]});\n          break;\n      }\n\n      // @TODO: do we need last_sync_local per table?\n      this.runQuery({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES('last_local_sync', STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      });\n    }\n    catch (error) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}`);\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB(changes: Change[]) {\n    await this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, savepoint})\n        }\n\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    await this.enableTriggers();\n    this.log.debug(`Applied ${changes.length} change(s)`)\n  };\n\n  async setupTriggersForTable({ table }: { table: SyncableTable }) {\n    this.log.debug('Setting up triggers for', table.name);\n\n    // Ensure triggers are up to date\n    await this.runQuery({sql: `DROP TRIGGER IF EXISTS ${this.synqPrefix}_after_insert_${table.name}`});\n    await this.runQuery({sql: `DROP TRIGGER IF EXISTS ${this.synqPrefix}_after_update_${table.name}`});\n    await this.runQuery({sql: `DROP TRIGGER IF EXISTS ${this.synqPrefix}_after_delete_${table.name}`});\n\n    const jsonObject = (await this.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    this.log.debug('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${this.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM synqlite_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${this.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n      END;`\n    await this.runQuery({sql});\n\n    await this.runQuery({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${this.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM synqlite_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${this.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    await this.runQuery({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${this.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM synqlite_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${this.synqPrefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n      END;`\n    });\n\n    await this.enableTriggers();\n    this.log.debug(`@@@\\nTriggers ready\\n@@@`)\n  }\n}\n\nexport const setupDatabase = async ({\n  filename,\n  sqlite3,\n  prefix = SYNQLITE_PREFIX,\n  tables,\n  batchSize = SYNQLITE_BATCH_SIZE,\n  wal = false,\n  preInit = [],\n  postInit = [],\n  logOptions\n}: SynQLiteOptions) => {\n  /*\n  @TODO:\n   - check if DB path exists (throw if not)\n   - check if table names have been provided (throw if not)\n   - check if table names exist (throw if not)\n  */\n  const db = new SynQLite({\n    filename,\n    sqlite3,\n    prefix,\n    tables,\n    batchSize,\n    wal,\n    logOptions\n  });\n  log.debug('@SynQLite db', db)\n  \n  // Initialise the DB\n  try {\n    await db.init();\n  }\n  catch(err) {\n    log.error(err);\n    throw err;\n  }\n\n  prefix = prefix?.trim().replace(/[^a-z0-9]+$/gi, '');\n  log.debug({prefix, batchSize})\n\n  // Set WAL mode if necessary\n  if (wal === true) {\n    await db.runQuery({\n      sql: `PRAGMA journal_mode=WAL;`\n    });\n  }\n\n  if (preInit?.length > 0) {\n    for (const preInitQuery of preInit) {\n      log.debug(`@@@\\npreInit\\n${preInitQuery}\\n@@@`)\n      await db.runQuery({\n        sql: preInitQuery\n      });\n    }\n  }\n  \n  // Create a change-tracking table\n  await db.runQuery({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${prefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      modified_at TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n    \n  // Create the index\n  db.runQuery({\n    sql: `CREATE INDEX IF NOT EXISTS ${prefix}_change_modified_idx ON ${prefix}_changes(modified_at)`\n  });\n\n  db.runQuery({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${prefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );`\n  });\n  db.runQuery({\n    sql: `CREATE INDEX IF NOT EXISTS ${prefix}_meta_name_idx ON ${prefix}_meta(meta_name)`\n  });\n\n  try {\n    for (const table of tables) {\n      await db.setupTriggersForTable({ table });\n    }\n\n    if (postInit?.length > 0) {\n      for (const postInitQuery of postInit) {\n        log.debug(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n        await db.runQuery({\n          sql: postInitQuery\n        });\n      }\n    }\n  }\n  catch(err) {\n    log.error('Failed to setup triggers', err);\n    return null\n  }\n\n  return db;\n};\n\nexport default setupDatabase;","export const SYNQLITE_PREFIX = 'synql';\nexport const SYNQLITE_BATCH_SIZE = 20;"],"names":["LogLevel","log","Logger","name","minLevel","Info","_settle","pact","state","value","_Pact","s","v","bind","observer","strtimeAsISO8601","prototype","then","onFulfilled","onRejected","this","callback","result","e","o","_this","_iteratorSymbol","Symbol","iterator","thenable","_forOf","target","body","check","step","reject","_cycle","next","done","_isSettledPact","_fixup","TypeError","values","i","array","length","SynQLite","initData","_initData$wal","_db","_dbName","_synqDbId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","Date","toUTCString","toISOString","filename","sqlite3","undefined","prefix","tables","batchSize","wal","_extends","type","maskValuesOfKeys","hideLogPositionForProduction","logOptions","_proto","init","_this2","db","Promise","resolve","dbName","_catch","debug","res","_promiser","sqlite3Worker1Promiser","onready","onerror","err","error","_this$log","apply","slice","call","arguments","onunhandled","event","promiser","_temp2","dbId","conf","info","version","libVersion","_temp","_promiser2","replace","_promiser3","Error","message","runQuery","_ref","sql","_this3","quid","Math","ceil","random","synqDbId","results","row","forEach","col","columnNames","push","getLastSync","synqPrefix","getChangesSinceLastSync","_ref2","lastSync","_temp3","_this5$getLastSync","lastLocalSync","last_local_sync","_this5","where","enableTriggers","disableTriggers","beginTransaction","savepoint","now","commitTransaction","_ref3","rollbackTransaction","_ref4","applyChange","_ref5","change","_this9","_this9$synqTables","_temp5","recordData","table","synqTables","find","t","table_name","data","JSON","parse","_temp4","_switch","operation","_extends2","columnsToUpdate","Object","keys","map","key","join","updateValues","id","row_id","columnsToInsert","insertPlaceholders","k","_interrupt","applyChangesToLocalDB","changes","_this10","_temp12","_temp11","test","update","shouldContinue","stage","updateValue","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp10","_temp9","_temp8","setupTriggersForTable","_ref6","_this11","_this11$runQuery","jsonObject","stringify","jo","get","_ref7","_ref7$prefix","_ref7$batchSize","_ref7$wal","_ref7$preInit","preInit","_ref7$postInit","postInit","_temp25","_result3","_prefix","_temp23","_temp21","_exit2","_temp19","_temp18","_temp16","_temp15","postInitQuery","_temp17","_temp14","_result4","_temp20","_temp13","preInitQuery","trim","_temp22","_exit","_temp24"],"mappings":"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"}