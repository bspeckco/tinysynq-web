{"version":3,"file":"synqlite.modern.js","sources":["../src/lib/index.ts","../src/lib/constants.ts"],"sourcesContent":["import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { SYNQLITE_BATCH_SIZE, SYNQLITE_PREFIX } from './constants.js';\nimport { Change, SynQLiteOptions, SyncableTable } from './types.js';\n// import pino from 'pino';\n\nconsole.log({ sqlite3Worker1Promiser });\n\ntype ApplyChangeParams = {\n  change: Change,\n  savepoint: string\n}\n\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\nclass SynQLite {\n  private _db: any;\n  private _dbName: string;\n  private _synqDbId?: string;\n  private _synqPrefix?: string;\n  private _synqTables?: SyncableTable[];\n  private _synqBatchSize: number = 20;\n\n  utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date((new Date()).toUTCString()).toISOString();\n    }\n  }\n\n  constructor(initData: SynQLiteOptions) {\n    this._dbName = initData.filename || '';\n    this._db = initData.sqlite3 || undefined;\n    this._synqPrefix = initData.prefix;\n    this._synqTables = initData.tables;\n    this._synqBatchSize = initData.batchSize || this._synqBatchSize;\n    // @TODO: take code from sqlite-example-app to initialise DB\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbName) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        console.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          console.log('@WTF?')\n          try {\n            const _promiser = sqlite3Worker1Promiser({\n              onready: () => {\n                console.log('ready?')\n                res(_promiser);\n              },\n              onerror: (err: any) => {\n                console.error('@ERROR', err);\n              },\n              debug: (...args: any) => {\n                console.debug(...args);\n              }\n            });\n            console.log({_promiser});\n          }\n          catch(err: any) {\n            console.log('@tryerr')\n            console.error(err)\n          }\n        });\n        \n        console.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          console.debug(`open ${this.dbName}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbName}?vfs=opfs`,\n          });\n  \n          console.log(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbName}`\n          });\n          console.log(\n            'OPFS not available, created in-memory database at',\n            res.result.filename, '$1'\n          );\n        }\n  \n        if (!res) return reject('Unable to start DB');\n\n        const { dbId } = res;\n        this._synqDbId = dbId;\n      \n        const conf = await promiser('config-get', {});\n        console.log('Running SQLite3 version', conf.result.version.libVersion);\n        \n        this._db = promiser;\n        resolve(this);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        console.error(err.name, err.message);\n        console.error(err)\n        reject('DB setup failed.');\n      }\n      console.groupEnd();\n    });\n  };\n\n  get db() {\n    return this._db;\n  }\n\n  get dbName() {\n    return this._dbName;\n  }\n\n  get synqDbId() {\n    return this._synqDbId;\n  }\n\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  async runQuery<T>({sql, values}: {sql: string, values?: any[]}): Promise<T> {\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql, // I think we can make this sexier, in Minmail\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) return resolve(results as any);\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        console.error(err);\n        reject(err);\n      }\n    });\n  }\n\n  async getLastSync() {\n    return this.db.exec(`\n      SELECT * FROM ${this.db.synqPrefix}_meta\n      WHERE meta_name = 'last_local_sync'`\n    ).get();\n  }\n  \n  async getChangesSinceLastSync(db: any, lastSync?: string) {\n    let lastLocalSync: string = lastSync || (await this.getLastSync()).last_local_sync;\n    console.debug('@getChangesSinceLastSync', lastLocalSync);\n  \n    let where: string = '';\n  \n    if (lastLocalSync) {\n      where = 'WHERE modified_at > ?'\n    }\n    const sql = `\n    SELECT * FROM ${db.synqPrefix}_changes\n      ${where}\n      ORDER BY modified_at ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    console.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  private async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.runQuery({sql});\n    return savepoint\n  }\n\n  private async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.runQuery({sql});\n  }\n\n  private async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.runQuery({sql}); \n  }\n\n  async applyChange({\n    change,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      const table = this.synqTables?.find(t => t.name === change.table_name);\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          console.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n        \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n      switch(change.operation) {\n        case 'UPDATE':\n          const columnsToUpdate = Object.keys(recordData).map(key => `${key} = :${key}`).join(', ');\n          const updateValues = { ...recordData, [table.id]: change.row_id};\n          const updateSql = `UPDATE ${change.table_name} SET ${columnsToUpdate} WHERE ${table.id} = :${table.id}`;\n          // console.debug('@performing update... sql:', updateSql, updateValues);\n          await this.runQuery({sql: updateSql, values: updateValues});\n          break;\n        case 'INSERT':\n          const columnsToInsert = Object.keys(recordData).join(',');\n          const insertPlaceholders = Object.keys(recordData).map(k => `:${k}`).join(',')\n          const insertSql = `INSERT OR REPLACE INTO ${change.table_name} (${columnsToInsert}) VALUES (${insertPlaceholders});`;\n          // console.debug('@performing insert... sql:', insertSql, recordData);\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          await this.runQuery({sql, values: [change.row_id]});\n          break;\n      }\n\n      // @TODO: do we need last_sync_local per table?\n      this.runQuery({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES('last_local_sync', STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      });\n    }\n    catch (error) {\n      await this.rollbackTransaction({savepoint})\n      console.error(`Error applying change: ${error}`);\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB(changes: Change[]) {\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, savepoint})\n        }\n\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        console.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    console.debug(`Applied ${changes.length} change(s)`)\n  };\n}\n\nexport const setupDatabase = async ({\n  filename,\n  sqlite3,\n  prefix = SYNQLITE_PREFIX,\n  tables,\n  batchSize = SYNQLITE_BATCH_SIZE,\n}: SynQLiteOptions) => {\n  /*\n  @TODO:\n   - check if DB path exists (throw if not)\n   - check if table names have been provided (throw if not)\n   - check if table names exist (throw if not)\n  */\n  const db = new SynQLite({\n    filename,\n    sqlite3,\n    prefix,\n    tables,\n    batchSize\n  });\n  console.log('@SynQLite db', db)\n  \n  // Initialise the DB\n  try {\n    await db.init();\n  }\n  catch(err) {\n    console.error(err);\n    throw err;\n  }\n\n  prefix = prefix?.trim().replace(/[^a-z0-9]+$/gi, '');\n  console.debug({prefix, batchSize})\n\n  // Add a 'last_modified' column to each table you want to sync, if not already present.\n  // Example for a table named 'items':\n  // db.exec('ALTER TABLE items ADD COLUMN last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL');\n\n  // Create a change-tracking table\n  await db.runQuery({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${prefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      modified_at TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n    \n  // Create the index\n  db.runQuery({\n    sql: `CREATE INDEX IF NOT EXISTS ${prefix}_change_modified_idx ON ${prefix}_changes(modified_at)`\n  });\n\n  db.runQuery({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${prefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );`\n  });\n  db.runQuery({\n    sql: `CREATE INDEX IF NOT EXISTS ${prefix}_meta_name_idx ON ${prefix}_meta(meta_name)`\n  });\n\n  for (const table of tables) {\n    console.debug('Setting up', table.name, table.id);\n    const jsonObject = await db.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    });\n    console.log(jsonObject, jsonObject.jo)\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n      END;`\n      console.log(sql)\n    db.runQuery({sql});\n\n    db.runQuery({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    db.runQuery({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n      END;`\n    });\n  }\n\n  return db;\n};\n\nexport default setupDatabase;","export const SYNQLITE_PREFIX = 'synql';\nexport const SYNQLITE_BATCH_SIZE = 20;"],"names":["console","log","sqlite3Worker1Promiser","strtimeAsISO8601","SynQLite","constructor","initData","_db","_dbName","this","_synqDbId","_synqPrefix","_synqTables","_synqBatchSize","utils","nowAsISO8601","utcNowAsISO8601","Date","toUTCString","toISOString","filename","sqlite3","undefined","prefix","tables","batchSize","init","_this","db","Promise","resolve","dbName","async","reject","debug","promiser","res","_promiser","onready","onerror","err","error","args","result","replace","dbId","conf","version","libVersion","Error","message","name","groupEnd","synqDbId","synqPrefix","synqTables","synqBatchSize","runQuery","sql","values","results","bind","callback","row","o","forEach","col","i","columnNames","push","getLastSync","exec","get","getChangesSinceLastSync","lastSync","lastLocalSync","last_local_sync","where","beginTransaction","savepoint","now","commitTransaction","rollbackTransaction","applyChange","change","_this$synqTables","table","find","t","table_name","recordData","data","JSON","parse","operation","columnsToUpdate","Object","keys","map","key","join","updateValues","_extends","id","row_id","updateSql","columnsToInsert","insertPlaceholders","k","insertSql","applyChangesToLocalDB","changes","length","batch","slice","setupDatabase","_prefix2","trim","jsonObject","jo"],"mappings":"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"}