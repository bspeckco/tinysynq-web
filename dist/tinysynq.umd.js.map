{"version":3,"file":"tinysynq.umd.js","sources":["../src/lib/types.ts","../src/lib/vcompare.class.ts","../src/lib/tinysynq.class.ts","../src/lib/index.ts"],"sourcesContent":["import { ISettingsParam, ILogObj } from 'tslog';\n\n/**\n * A {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance.\n * \n * @public\n */\nexport type SQLiteWASM = any\n\n/**\n * Provided to TinySynq constructor.\n * \n * @public\n */\nexport interface SyncableTable {\n  /**\n   * Table name.\n   */\n  name: string;\n  /**\n   * Row identifier; typically the column used as primary key.\n   */\n  id: string;\n  /**\n   * Columns that can be updated by a sync-based change.\n   */\n  editable: string[];\n}\n\n/**\n * Base options for TinySynq constructor.\n * \n * @public\n */\nexport interface TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   * \n   * @remarks\n   * \n   * If not provided, {@link TinySynqOptionsBase.filePath} must be set.\n   * \n   */\n  sqlite3?: SQLiteWASM;\n  /**\n   * Path to SQLite3 database file.\n   * \n   * @remarks\n   * If not provided, {@link TinySynqOptionsBase.sqlite3} must be set.\n   */\n  filePath?: string;\n  /**\n   * Prefix to use for TinySynq tables (trailing underscores will be removed).\n   */\n  prefix: string;\n  /**\n   * Tables that should be synced between devices.\n   */\n  tables: SyncableTable[];\n  /**\n   * Maximum number of changes to process at once.\n   */\n  batchSize?: number;\n  /**\n   * Enable or disable WAL mode.\n   */\n  wal?: boolean;\n  /**\n   * Array of queries to run before TinySynq's change tracking is configured.\n   * \n   * @remarks\n   * Include create statements for syncable tables here.\n   */\n  preInit?: string[];\n  /**\n   * Array of queries to run after TinySynq's change tracking is configured\n   * \n   * @remarks\n   * You might place any insert queries here.\n   */\n  postInit?: string[];\n  /**\n   * Configure logging options.\n   * \n   * @remarks\n   * TinySynq uses TSLog for logging. All optiions are passed directly to it.\n   * See https://tslog.js.org/#/?id=settings for details\n   */\n  logOptions?: ISettingsParam<ILogObj>;\n  /**\n   * Enable/disable debug mode\n   * \n   * When enabled, all INSERT/UPDATE/DELETE actions on syncable tables are written \n   * to the *_dump table for inspection.\n   */\n  debug?: boolean;\n}\n\n/** \n * Constructor options TinySynq instance.\n * \n * Provide either an existing {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance (`sqlite3`) or the `filePath`.\n * \n * @public\n */\nexport interface TinySynqOptionsWithInstance extends TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   */\n  sqlite3: SQLiteWASM;\n}\n\nexport interface TinySynqOptionsWithFilePath extends TinySynqOptionsBase{\n  /**\n   * Path to SQLite3 database file.\n   */\n  filePath: string;\n}\n\n/** \n * {@inheritdoc TinySynqOptionsBase}\n * \n * @public\n */\nexport type TinySynqOptions = TinySynqOptionsWithInstance | TinySynqOptionsWithFilePath\n\nexport type SQLite3 = any\n\n/**\n * Basic query params for methods that read from/write to DB.\n * \n * @public\n */\nexport type QueryParams = {\n  sql: string;\n  values?: any;\n  prefix?: string;\n}\n\n/**\n * Table name and row parameters for retrieving data for a specific record.\n */\nexport interface TableNameRowParams {\n  table_name: string;\n  row_id: string;\n}\n\nexport interface ApplyChangeParams {\n  change: Change,\n  restore?: boolean,\n  savepoint: string\n}\n\nexport interface MetaRowData {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type VClock = {\n  [deviceId: string]: number;\n}\n\nexport enum TinySynqOperation {\n  'INSERT' = 'INSERT',\n  'UPDATE' = 'UPDATE',\n  'DELETE' = 'DELETE'\n}\n\n/**\n * Object transferred between devices to convey individual record changes.\n * \n * @public\n */\nexport interface Change {\n  /**\n   * Change record ID from central server.\n   */\n  id?: number;\n  /**\n   * Table name of the record that was modified.\n   */\n  table_name: string;\n  /**\n   * Row ID of the record that was modified.\n   */\n  row_id: string;\n  /**\n   * The type of operation that took place.\n   */\n  operation: keyof typeof TinySynqOperation;\n  /**\n   * The serialised object in the post-modified state. \n   */\n  data: string; // JSON string\n  /**\n   * Vector Clock holding all device values for the record, as known by the source device of the change.\n   */\n  vclock: VClock;\n  /**\n   * An ISO8601 formatted date and time that the change was recorded on the source device.\n   */\n  modified: string;\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { VClock } from \"./types.js\";\n\ntype VectorClockParams = {\n  local: VClock;\n  remote: VClock;\n  localId: string;\n  localTime: string;\n  remoteTime: string;\n}\n\ntype RemoteVClockParams = {\n  remote: VClock;\n}\n\nexport class VCompare {\n\n  private local: VClock;\n  private isGreater = false;\n  private isLess = false;\n  private isWrongOrder = false;\n  private remote: VClock = {};\n  private localId: string;\n  private localTime: string;\n  private remoteTime: string;\n\n  constructor({ local, remote, localId, localTime, remoteTime }: VectorClockParams) {\n    this.local = local;\n    this.remote = typeof remote === 'string'\n      ? JSON.parse(remote)\n      : remote;\n    this.localId = localId;\n    this.localTime = localTime;\n    this.remoteTime = remoteTime;\n  }\n\n  setRemote({ remote }: RemoteVClockParams) {\n    this.remote = remote;\n  }\n\n  isConflicted(data?: RemoteVClockParams): boolean {\n    const remote = data?.remote || this.remote;\n    const keys = Object.keys({...this.local, ...remote});\n    keys.forEach(k => {\n      const localCount = this.local[k] || 0;\n      const remoteCount = remote[k] || 0;\n      this.isGreater = this.isGreater || localCount > remoteCount;\n      this.isLess = this.isLess || localCount < remoteCount;\n    });\n    return this.isGreater && this.isLess;\n  }\n\n  isOutDated(): boolean {\n    // Default localTime to any early date so that \n    // remote always wins when local is empty.\n    const { remoteTime, localTime = new Date('1970-01-01').toISOString() } = this;\n    if (!remoteTime || !localTime) throw new Error('Missing modified time');\n    return localTime >= remoteTime;\n  }\n\n  isOutOfOrder(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    const keys = Object.keys({...this.local, ...remote}).filter(k => k !== localId);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const drift = Math.abs((local[k] ?? 0) - (remote[k] ?? 0));\n      this.isWrongOrder = drift > 1;\n    }\n    return this.isWrongOrder;\n  }\n\n  merge() {\n    const merged: VClock = {};\n    const participants = new Set(Object.keys(this.local).concat(Object.keys(this.remote)));\n    // If the incoming participant vclock is lower, discard\n    for (const p of participants) {\n      const localP = this.local[p] || 0;\n      const remoteP = this.remote[p] || 0;\n      merged[p] = Math.max(localP, remoteP);\n    }\n    if (merged[this.localId] === undefined) {\n      merged[this.localId] = 0;\n    }\n    return merged;\n  }\n}","import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { ApplyChangeParams, Change, LogLevel, QueryParams, TinySynqOperation, TinySynqOptions, SyncableTable, TableNameRowParams, VClock } from './types.js';\nimport { Logger, ILogObj } from 'tslog';\nimport { VCompare } from './vcompare.class.js';\nimport { nanoid } from 'nanoid';\n\nconst log = new Logger({ name: 'tinysynq-web-init', minLevel: LogLevel.Info });\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\ntype PreProcessChangeOptions = {\n  change: Change, restore?: boolean\n}\n\ntype PreProcessChangeResult = { \n  valid: boolean;\n  reason: string;\n  vclock: VClock;\n  checks: Record<string, boolean>\n}\n\n/**\n * Basic utilities, mainly date-oriented.\n */\nexport type Utils = {\n  strtimeAsISO8601: string,\n  nowAsISO8601: string,\n  utcNowAsISO8601: () => string\n}\n\n/**\n * Parameters for retrieving table's ID column.\n * \n * @public\n */\nexport type GetTableIdColumnParams = {\n  table_name: string;\n}\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq {\n  private _db: any;\n  private _dbPath: string;\n  private _deviceId: string | undefined;\n  private _synqPrefix?: string;\n  private _synqTables?: Record<string, SyncableTable>;\n  private _synqBatchSize: number = 20;\n  private _wal = true;\n  private log: Logger<ILogObj>;\n\n  /**\n   * Basic Helpers.\n   * \n   * @TODO move to a separate file.\n   * \n   * @public\n   */\n  readonly utils: Utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date((new Date()).toUTCString()).toISOString();\n    }\n  }\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n    const _synqTables: Record<string, SyncableTable> = {};\n    opts.tables.forEach(t => {\n      _synqTables[t.name] = t;\n    })\n    this._dbPath = opts.filePath || '';\n    this._db = opts.sqlite3 || undefined;\n    this._synqPrefix = opts.prefix?.trim().replace(/[^a-z0-9]+$/i, '');\n    this._synqTables = _synqTables;\n    this._synqBatchSize = opts.batchSize || this._synqBatchSize;\n    this._wal = opts.wal ?? false;\n    this.log = new Logger({\n      name: 'tinysynq-node',\n      minLevel: LogLevel.Debug,\n      type: 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(opts.logOptions || {})\n    });\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbPath) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.log.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              this.log.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              this.log.debug(...args);\n            },\n            onunhandled: (event: any) => {\n              this.log.error('@UNHANDLED', event);\n            }\n          });\n        });\n        \n        this.log.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          this.log.debug(`open ${this.dbPath}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}?vfs=opfs`,\n          });\n  \n          this.log.info(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}`\n          });\n          this.log.info(\n            'OPFS not available, created in-memory database at',\n            res.result.filename, '$1'\n          );\n        }\n  \n        if (!res) return reject('Unable to start DB');\n\n        const { dbId } = res;\n        this._deviceId = dbId;\n        this.setDeviceId();\n      \n        const conf = await promiser('config-get', {});\n        this.log.info('Running SQLite3 version', conf.result.version.libVersion);\n        \n        this._db = promiser;\n    \n        // Set WAL mode if necessary\n        if (this._wal === true) {\n          await this.runQuery({\n            sql: `PRAGMA journal_mode=WAL;`\n          });\n        }\n        resolve(this);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        this.log.error(err.name, err.message);\n        this.log.error(err)\n        reject('DB setup failed.');\n      }\n    });\n  };\n\n  /**\n   * SQLiteWASM instance (See {@link https://github.com/sqlite/sqlite-wasm | SQLite Wasm})\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Path to DB file\n   * \n   * @example\n   * \n   * `./app.db` or `/tmp/app.db`\n   */\n  get dbPath() {\n    return this._dbPath;\n  }\n\n  /**\n   * Automatically generated ID for device's DB instance.\n   * \n   * @remarks\n   * \n   * This ID is used by the sync protocol to identify the database.\n   * One it is generated once during setup and does not change. The\n   * value is stored in the `_meta` table (`meta_name='device_id'`).\n   * __Do not edit this value; doing so would corrupt synchronisation__.\n   */\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  /**\n   * Alias for {@link TinySynq.deviceId}.\n   */\n  get synqDbId() {\n    return this._deviceId;\n  }\n\n  /**\n   * The prefix used for TinySynq's tables.\n   * \n   * @defaultValue `tinysynq`\n   */\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  /**\n   * Object containing {@link SyncableTable}s, keyed by table name.\n   * \n   * @remarks\n   * \n   * A {@link SyncableTable} structure is never modified. TinySynq maintains \n   * its own tables and triggers for tracking and responding to changes.\n   * \n   * @returns Record\\<string, SyncableTable\\>\n   */\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  /**\n   * Number of records to process in each batch when syncing changes. \n   */\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  /**\n   * Enable or disable WAL mode.\n   * \n   * @defaultValue true\n   */\n  get wal() {\n    return this._wal;\n  }\n\n  /**\n   * Get a random 16-character ID generated by nanoid\n   * \n   * @returns string\n   */\n  getNewId() {\n    return nanoid(16);\n  }\n\n  /**\n   * Get the column used as identifier for the {@link SyncableTable}.\n   * \n   * @param params - Details of table for which to retrieve ID column.\n   * @returns Column name\n   */\n  getTableIdColumn(params: GetTableIdColumnParams) {\n    const {table_name} = params;\n    return this.synqTables![table_name]?.id as string;\n  }\n\n  /**\n   * If not already set, generates and sets deviceId.\n   */\n  async setDeviceId() {\n    // Set the device ID\n    let existing: any;\n    try {\n      existing = (await this.runQuery<any[]>({\n        sql: `SELECT meta_value FROM ${this.synqPrefix}_meta WHERE meta_name = 'device_id'`\n      }))[0];\n    }\n    catch(err) {\n      this.log.warn(`Couldn't retrieve device ID`);\n    }\n\n    log.warn('@device_id', existing);\n    if (!existing?.meta_value) {\n      const res = await this.runQuery<any[]>({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES (?,?) RETURNING *`,\n        values: ['device_id', this.deviceId]\n      });\n      log.warn('@created record for device_id:', res);\n      existing = res[0];\n    }\n    this._deviceId = existing?.meta_value;\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @remarks\n   * This method does not return any records, only the result of the operation.\n   * \n   * @param params - The SQL query and optionally any values.\n   * @returns\n   */\n  async run<T = any>(params: QueryParams): Promise<T> {\n    return this.runQuery(params);\n  }\n\n  /**\n   * Run multiple operations against the DB\n   * \n   * @remarks\n   * This method does not return any records.\n   * \n   * @param params - The SQL query and optionally an array of arrays or key/value pairs\n   * @returns Undefined or an error, if one occurred\n   */\n  async runMany(params: QueryParams) {\n    const {sql, values, prefix = ':'} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    const dbId = this.synqDbId;\n    this.log.debug('@runMany', {quid, sql, values});\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (const v of values) {\n          const bind = this.reformatQueryValues({values: v, prefix});\n          await this.db('exec', {dbId, sql, bind});\n        }\n      }\n      catch(err) {\n        this.log.error({quid, err, stack: (err as Error).stack});\n        reject(err);\n      }\n      resolve(true);\n    });\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @param params - The SQL query and optionally any values\n   * @returns Array of records returned from the database\n   */\n  async runQuery<T = any>(params: QueryParams): Promise<T> {\n    const {sql, prefix = ':'} = params;\n    const values = this.reformatQueryValues({values: params.values, prefix});\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', quid, sql, values, '/');\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql,\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) {\n              this.log.debug('@runQuery RESOLVED', quid);\n              return resolve(results as any);\n            }\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        this.log.error(quid, err, (err as Error).stack);\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Renames keys of a query's value object to make them compatible\n   * with the SQLiteWASM API's bind parameters.\n   * \n   * @param\n   * @returns \n   */\n  reformatQueryValues({values, prefix = ':'}: {values: any, prefix?: string}) {\n    if (Array.isArray(values)) return values;\n    if (typeof values === 'object') {\n      const keys = Object.keys(values);\n      const remapped: Record<string, any> = {};\n      keys.forEach(k => {\n        const newK = k.startsWith(prefix) ? k : `${prefix}${k}`;\n        remapped[newK] = values[k];\n      });\n      return remapped;\n    }\n    return values;\n  }\n\n  /**\n   * Returns the current device's unique TinySynq ID.\n   * \n   * @returns The device's assigned ID.\n   */\n  async getDeviceId(): Promise<string> {\n    if (this._deviceId) return this._deviceId;\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'device_id'`\n    });\n    return res[0].meta_value;\n  }\n\n  /**\n   * Returns an ISO8601 formatted date and time of the last successful local sync.\n   * \n   * @remarks\n   * \n   * A \"local sync\" is the process of sending local changes to the remote hub.\n   * \n   * @returns The time of the last sync.\n   */\n  async getLastSync(): Promise<string> {\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    this.log.trace('@getLastSync', res[0]);\n    return res[0]?.meta_value;\n  }\n  \n  /**\n   * Returns matching {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChanges(params?: {lastLocalSync?: string, columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync: string = params?.lastLocalSync || await this.getLastSync();\n    let { columns = [] } = params || {};\n    this.log.debug('@getChanges', lastLocalSync);\n  \n    let where: string = '';\n    let columnSelection = columns\n      .map(c => c.replace(/[^*._a-z0-9]+/gi, ''))\n      .join(',') || '*';\n  \n    if (lastLocalSync) {\n      where = 'WHERE c.modified > ?'\n    }\n    const sql = `\n      SELECT ${columnSelection}\n      FROM ${this._synqPrefix}_changes c\n      INNER JOIN ${this._synqPrefix}_record_meta trm\n      ON trm.table_name = c.table_name\n      AND trm.row_id = c.row_id\n      ${where}\n      ORDER BY c.modified ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  /**\n   * Returns {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChangesSinceLastSync(params?: {columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync = await this.getLastSync() || undefined;\n    return this.getChanges({...params, lastLocalSync});\n  };\n\n  /**\n   * Writes debug mode value (true) which disables recording \n   * of operations on syncable tables.\n   * \n   * @remarks\n   * \n   * The value set by this method is checked by dedicated triggers.\n   * If the value is `1`, the active trigger writes the data to the\n   * `*_dump` table. It's worth purging the table data once done \n   * with debugging.\n   * \n   * @returns Result of the operation.\n   */\n  async enableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Writes debug mode value (false) which disables recording \n   * of operations on syncable tables.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   * \n   * @returns Result of the operation.\n   */\n  async disableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Empties the `*_dump` table.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   */\n  async clearDebugData() {\n    await this.run({sql: `DELETE FROM ${this._synqPrefix}_dump`});\n    await this.run({sql: `UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = ${this._synqPrefix}_dump`});\n  }\n  \n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private enableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');`\n    });\n  }\n\n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private async disableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');`\n    });\n  }\n\n  async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.run({sql});\n    return savepoint;\n  }\n\n  async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  /**\n   * Retrieves a single record.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  private async getRecord<T>(params: TableNameRowParams): Promise<T | any> {\n    const {table_name, row_id} = params;\n    const idCol = this.getTableIdColumn({table_name: table_name});\n    const sql = `SELECT * FROM ${table_name} WHERE ${idCol} = ?`;\n    const res = await this.runQuery({sql, values: [row_id]});\n    this.log.debug('@getRecord', res);\n    return res[0];\n  }\n\n  /**\n   * Retrieves a single record by it's ID.\n   * \n   * @remarks\n   * \n   * The column used to identify the record is according to the {@link SyncableTable}\n   * that was provided in {@link TinySynqOptionsBase.tables} at instantiation.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  async getById<T>(params: TableNameRowParams): Promise<T | any> {\n    const{table_name, row_id} = params;\n    return this.getRecord({table_name, row_id});\n  }\n\n  async insertRecordMeta({change, vclock}: any) {\n    this.log.warn('<<< @insertRecordMeta >>>', {change, vclock});\n    const { table_name, row_id } = change;\n    const mod = vclock[this._deviceId!] || 0;\n    const values = {\n      table_name,\n      row_id,\n      mod,\n      vclock: JSON.stringify(vclock)\n    };\n    return this.runQuery({\n      sql: `\n      INSERT INTO ${this._synqPrefix}_record_meta (table_name, row_id, mod, vclock)\n      VALUES (:table_name, :row_id, :mod, :vclock)\n      ON CONFLICT DO UPDATE SET mod = :mod, vclock = :vclock\n      RETURNING *\n      `,\n      values,\n    });\n  }\n\n  /**\n   * Get associated meta data (including `vclock`) for record.\n   * \n   * @param params - Object containing table/row parameters.\n   * \n   * @returns Object containing row data from `*_record_meta`.\n   */\n  async getRecordMeta(params: {table_name: string, row_id: string}) {\n    const {table_name, row_id} = params;\n    const sql = `\n    SELECT *\n    FROM ${this.synqPrefix}_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id`;\n    const res = await this.runQuery({sql, values: {table_name, row_id}});\n    return res[0];\n  }\n\n  /**\n   * Returns changes that couldn't be applied yet because they\n   * were received out of sequence.\n   * \n   * @returns Array of pending changes.\n   */\n  async getPending() {\n    const sql = `\n    SELECT *\n    FROM ${this._synqPrefix}_pending\n    ORDER BY id ASC\n    `;\n    const res = await this.runQuery({sql});\n    return res;\n  }\n\n  /**\n   * Creates new pending record to be applied later.\n   * \n   * @param opts - Options for processing out-of-order change\n   * @returns Newly created pending record\n   */\n  private async processOutOfOrderChange({change}: {change: Change}) {\n    const {id, ...data} = change;\n    const sql = this.createInsertFromSystemObject({\n      data,\n      table_name: `${this._synqPrefix}_pending`,\n    });\n    this.log.trace('@processOutOfOrderChange\\n', sql, change);\n    const values: any = { ...data};\n    values.vclock = JSON.stringify(data.vclock);\n    const res = await this.runQuery({sql, values});\n    this.log.trace('@processOutOfOrderChange\\n', {res});\n    return res;\n  }\n\n  /**\n   * Determines whether to treat conflicted change as valid or invalid.\n   * \n   * @param opts - Options for processing concurrent change\n   * @returns boolean \n   */\n  private async processConflictedChange<T>({ record, change }: {record: T|any, change: Change}): Promise<boolean> {\n    this.log.warn('@processConflictedChange START', record, change)\n    // INSERT won't have a local record so accept the incoming change\n    if (change.operation === TinySynqOperation.INSERT) return true;\n\n    const localMeta = await this.getRecordMeta({...change});\n    this.log.trace('<<<@ processConflictedChange LLW @>>>', change.id, change.table_name, change.row_id, {record, localMeta, change});\n    if (change.modified > localMeta.modified) {\n      this.log.debug('<!> INTEGRATING REMOTE', change.id, change.table_name, change.row_id);\n      // Update local with the incoming changes\n      return true;\n    }\n    else {\n      this.log.debug('<!> KEEPING LOCAL', change.id, change.table_name, change.row_id);\n      // Keep the local change, but record receipt of the record.\n      return false;\n    }\n  }\n\n  /**\n   * Checks for and handles issues with incoming change to be applied.\n   * \n   * @returns Result of pre-processing.\n   */\n  private async preProcessChange(\n    {change, restore}: PreProcessChangeOptions\n  ): Promise<PreProcessChangeResult> {\n    let defaultReason = 'unknown';\n    let valid = false;\n    let reason = defaultReason;\n    const localId = this.deviceId!;\n    const { table_name, row_id, vclock: remote = {} } = change;\n    const record = await this.getRecord({table_name, row_id});\n    const meta = await this.getRecordMeta({table_name, row_id});\n    const local = meta?.vclock ? JSON.parse(meta.vclock) : {};\n    // If it's an insert, there won't be any meta.\n    const localTime = meta?.modified;\n    const remoteTime = change?.modified;\n\n    let latest: VClock = {};\n    const localV = new VCompare({ local, remote, localId, localTime, remoteTime });\n    let displaced = false;\n    let conflicted = false;\n    let stale = false;\n\n    // If we don't have the record, treat it as new\n    if (!restore && !record && change.operation !== TinySynqOperation.INSERT) {\n      reason = 'update before insert';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (restore || !record || !local || !local[localId]) {\n      latest = change.vclock;\n    }\n    \n    if (restore) {\n      valid = true;\n      reason = 'restoration';\n      latest = localV.merge();\n      return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n    }\n    else if (displaced = localV.isOutOfOrder()) {  \n      reason = 'received out of order';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (conflicted = localV.isConflicted()) {\n      valid = await this.processConflictedChange({record, change});\n      if (!valid) {\n        reason = 'concurrent writes'; \n      }\n      else {\n        latest = localV.merge();\n      }\n    }\n    else if (stale = localV.isOutDated()) {\n      reason = 'stale';\n    }\n    else if (reason === defaultReason) {\n      valid = true;\n      reason = '';\n      latest = localV.merge();\n    }\n\n    return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n  }\n\n  /**\n   * Creates an insert query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string.\n   */\n  createInsertFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    const columnsToInsert = Object.keys(data).join(',');\n    const editable = this._synqTables![table].editable || [];\n    const updates = Object.keys(data)\n      .filter(key => editable.includes(key))\n      .map(k => `${k} = :${k}`)\n      .join(',');    \n    if (!updates) throw new Error('No changes available');\n\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  /**\n   * Creates an insert query based on the system table name and data provided.\n   *  \n   * @param param0 - Parameters from which to create the query.\n   * \n   * @returns A SQL query string. \n   */\n  private createInsertFromSystemObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    this.log.silly('@createInsert...', {data});\n    const columnsToInsert = Object.keys(data).join(',');\n    const updates = Object.keys(data)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n    return insertSql;\n  }\n\n  private async updateLastSync({change}: {change: Change}) {\n    await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      values: { name: 'last_local_sync'},\n    });\n    await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, :value)`,\n      values: { name: 'last_sync', value: change.id }\n    });\n  }\n\n  private async applyChange({\n    change,\n    restore,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      // Check that the changes can actually be applied\n      const changeStatus = await this.preProcessChange({change, restore});\n      if (!changeStatus?.valid) {\n        this.log.warn('>>> Invalid change', changeStatus);\n        this.updateLastSync({change});\n        return;\n      }\n\n      const table = this.synqTables![change.table_name];\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n      else {\n        // There's no data so bail\n        throw new Error(`Cannot perform update with empty data:\\n${JSON.stringify(change, null, 2)}`);\n      }\n \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n\n      this.log.silly('@applyChange', {change, table, changeStatus});\n      switch(change.operation) {\n        case 'INSERT':\n        case 'UPDATE':\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          this.log.warn('>>> DELETE SQL <<<', sql, change.row_id);\n          await this.run({sql, values: [change.row_id]});\n          break;\n      }\n      await this.updateLastSync({change});\n\n      // Insert merged VClock data\n      const updatedRecordMeta = await this.insertRecordMeta({change, vclock: changeStatus.vclock});\n      this.log.silly({updatedRecordMeta});\n    }\n    catch (error: any) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}. Rolled back.`, {change});\n      this.log.error(error.stack)\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB({ changes, restore = false }: { changes: Change[], restore?: boolean }) {\n    await this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, restore, savepoint});\n        }\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    await this.enableTriggers();\n    this.log.silly(`Applied ${changes.length} change(s)`);\n  };\n\n  async tablesReady(): Promise<void> {\n    await this.enableTriggers();\n  }\n}","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, SyncableTable } from \"./types.js\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst setupDatabase = async (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysynq-setup', ...logOptions});\n  const db = new TinySynq(config);\n\n  /**\n   * Pretty important: make sure to call `init()` :-)\n   */\n\n  await db.init();\n\n  const getRecordMetaInsertQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    /* \n    db.is kind of insane, but it works. A rundown of what's happening:\n    - We're creating a trigger after a deletion (the easy part)\n    - Aside from recording the changes, we also need to add record-specific metadata:\n      - table name and row identifier,\n      - the number of times the record has been touched (including creation)\n      - the map of all changes across all devices — a Vector Clock (JSON format)\n    - Getting the vector clock is tricky, partly because of SQLite limitations\n      (no variables, control structures), and partly because it's possible that\n      no meta exists for the record.\n    - To work around db.we do a select to get the meta, but perform a union with\n      another select that just selects insert values.\n    - Included in both selects is\n      a 'peg' which we use to sort the UNIONed rows to ensure that if a valid row\n      exists, it's the first row returned.\n    - Now we select from db.union and limit to 1 result. If a record exists\n      then we get that record. If not, we get the values ready for insertion.\n    - Finally, if there's a conflict on PRIMAY KEY or UNIQUE contraints, we update\n      only the columns configured as editable.\n    */\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n    INSERT INTO ${db.synqPrefix}_record_meta (table_name, row_id, mod, vclock)\n    SELECT table_name, row_id, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '${table.name}' as table_name,\n        ${version}.${table.id} as row_id, \n        IFNULL(json_extract(vclock,'$.${db.deviceId}'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$.${db.deviceId}', IFNULL(json_extract(vclock,'$.${db.deviceId}'), 0) + 1) as vclock\n      FROM ${db.synqPrefix}_record_meta\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id}\n      UNION\n      SELECT 0 as peg, '${table.name}' as table_name, ${version}.${table.id} as row_id, 1, json_object('${db.deviceId}', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      mod = json_extract(excluded.vclock,'$.${db.deviceId}'),\n      vclock = json_extract(excluded.vclock,'$')\n    ;`;\n    log.silly(sql);\n    return sql;\n  }\n\n  const setupTriggersForTable = async ({ table }: { table: SyncableTable }) => {\n    log.debug('Setting up triggers for', table.name);\n\n    // Template for inserting the new value as JSON in the `*_changes` table.\n    const jsonObject = (await db.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    log.silly('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    /**\n     * These triggers run for changes originating locally. They are disabled\n     * when remote changes are being applied (`triggers_on` in `*_meta` table).\n     */\n\n    // Ensure triggers are up to date\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_insert_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_update_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n      END;`\n    await db.run({sql});\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n        \n        ${getRecordMetaInsertQuery({table, remove: true})}\n      END;`\n    });\n\n    /**\n     * All the triggers below will only be executed if `meta_name=\"debug_on\"`\n     * has the `meta_value=1` in the *_meta table, regardless of `triggers_on`.\n     */\n\n    // Remove previous versions\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_insert_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_update_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_delete_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_before_insert_record_meta`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_insert_record_meta`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_update_record_meta`});\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow a rudimentary tracing of DB actions on the synced tables.\n     */\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'INSERT', ${jsonObject.jo});\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    const oldJsonObject = jsonObject.jo.replace(/NEW/g, 'OLD');\n    \n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'DELETE', ${oldJsonObject});\n      END;`\n    });\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow comparison record meta before and after insert.\n     */\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_before_insert_record_meta\n      BEFORE INSERT ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_insert_record_meta\n      AFTER INSERT ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_update_record_meta\n      AFTER UPDATE ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    /* END OF DEBUG TRIGGERS */\n  }\n\n  // Create a change-tracking table and index\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await db.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_change_modified_idx ON ${db.synqPrefix}_changes(modified)`\n  });\n\n  // Change *_pending is essentially a clone of *_changes used to hold items that\n  // cannot be applied yet because intermediate/preceding changes haven't been received.\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      vclock BLOB NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await db.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_pending_table_row_idx ON ${db.synqPrefix}_pending(table_name, row_id)`\n  });\n\n  // Create a notice table\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  }); \n\n  // Create record meta table and index\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  });\n\n  await db.run({\n    sql:`CREATE UNIQUE INDEX IF NOT EXISTS ${db.synqPrefix}_record_meta_idx ON ${db.synqPrefix}_record_meta(table_name, row_id)`\n  });\n\n  // Create meta table\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  `});\n\n  await db.run({\n    sql: `\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  `});\n\n  await db.run({\n    sql: `CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_meta_name_idx ON ${db.synqPrefix}_meta(meta_name)`\n  });\n  \n  // Enable debug mode\n  if (debug) await db.enableDebug();\n\n  // Set the device ID\n  await db.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n      await db.run({\n        sql: preInitQuery\n      });\n    }\n  }\n\n  log.debug(`@${db.synqPrefix}_meta`, db.runQuery({sql:`SELECT * FROM pragma_table_info('${db.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, db.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = await db.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    log.debug('@exists?', table.name, exists);\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    await setupTriggersForTable({ table });\n    db.tablesReady();\n  }\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.debug(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      await db.run({\n        sql: postInitQuery\n      });\n    }\n  }\n\n  return db;\n};\n\nexport default setupDatabase;"],"names":["TinySynqOperation","LogLevel","VCompare","_ref","local","remote","localId","localTime","remoteTime","this","isGreater","isLess","isWrongOrder","JSON","parse","_proto","prototype","setRemote","_ref2","isConflicted","data","_this","Object","keys","_extends","forEach","k","localCount","remoteCount","isOutDated","_this$localTime","Date","toISOString","Error","isOutOfOrder","filter","i","length","_local$k","_remote$k","drift","Math","abs","merge","_step","merged","_iterator","_createForOfIteratorHelperLoose","Set","concat","done","p","value","max","undefined","_catch","body","recover","result","then","s","o","_settle","pact","state","v","bind","observer","_Pact","onRejected","callback","onFulfilled","e","_isSettledPact","thenable","log","Logger","name","minLevel","Info","_forOf","target","check","_iteratorSymbol","step","iterator","next","_cycle","_fixup","values","push","array","reject","_forTo","strtimeAsISO8601","TinySynq","opts","_opts$prefix","_opts$wal","_db","_dbPath","_deviceId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","toUTCString","filePath","sqlite3","tables","t","prefix","trim","replace","batchSize","wal","Debug","type","maskValuesOfKeys","hideLogPositionForProduction","logOptions","init","_this2","db","Promise","resolve","dbPath","debug","res","_promiser","sqlite3Worker1Promiser","onready","onerror","err","error","_this$log","apply","slice","call","arguments","onunhandled","event","promiser","_temp4","dbId","setDeviceId","conf","_temp2","info","version","libVersion","_temp","runQuery","sql","_temp3","filename","_promiser2","_promiser3","message","getNewId","nanoid","getTableIdColumn","params","_this$synqTables$tabl","synqTables","table_name","id","existing","_temp8","_temp6","_existing","_this3","meta_value","warn","_temp5","_existing2","synqPrefix","deviceId","_temp7","_this3$runQuery","run","runMany","_this5","_params$prefix","quid","ceil","random","synqDbId","_temp11","_temp10","_temp9","reformatQueryValues","stack","_this6","_params$prefix2","results","row","col","columnNames","_ref$prefix","Array","isArray","remapped","newK","startsWith","getDeviceId","_this7","getLastSync","_this8","_res$","trace","getChanges","_temp12","lastLocalSync","_ref2$columns","columns","_this9","where","map","c","join","_params$lastLocalSync","getChangesSinceLastSync","_this10","enableDebug","_this11","disableDebug","clearDebugData","_this13","enableTriggers","disableTriggers","_this14","beginTransaction","savepoint","now","commitTransaction","_ref3","rollbackTransaction","_ref4","getRecord","_this18","row_id","idCol","getById","insertRecordMeta","_ref5","change","vclock","_this20","mod","stringify","getRecordMeta","getPending","_this22","processOutOfOrderChange","_ref6","_this23","_objectWithoutPropertiesLoose","_excluded","createInsertFromSystemObject","processConflictedChange","_ref7","record","_this24","operation","INSERT","localMeta","modified","preProcessChange","_ref8","restore","_this25","defaultReason","valid","reason","_change$vclock","meta","_temp18","_exit","_temp16","_result2","latest","checks","stale","displaced","conflicted","_temp15","localV","_temp19","_temp20","_this25$processConfli","_temp17","createInsertFromObject","_ref9","table","columnsToInsert","editable","updates","key","includes","_ref10","silly","insertPlaceholders","updateLastSync","_ref11","_this26","applyChange","_ref12","_this27","changeStatus","_temp22","updatedRecordMeta","recordData","_temp21","discriminant","cases","dispatchIndex","test","fallthroughCheck","awaitBody","_resumeAfterBody","testValue","_resumeAfterTest","_switch","insertSql","applyChangesToLocalDB","_ref13","changes","_ref13$restore","_this28","_temp27","_temp26","update","stage","shouldContinue","updateValue","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp25","_temp24","_temp23","tablesReady","_createClass","get","return","config","preInit","postInit","getRecordMetaInsertQuery","_ref$remove","remove","_result","postInitQuery","exists","_db$runQuery","jsonObject","jo","oldJsonObject","setupTriggersForTable","preInitQuery"],"mappings":"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"}