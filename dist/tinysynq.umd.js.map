{"version":3,"file":"tinysynq.umd.js","sources":["../src/lib/types.ts","../src/lib/vcompare.class.ts","../src/lib/tinysynq.class.ts","../src/lib/index.ts","../src/lib/client.ts","../src/lib/trigger.ts"],"sourcesContent":["import { ISettingsParam, ILogObj } from 'tslog';\n\n/**\n * A {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance.\n * \n * @public\n */\nexport type SQLiteWASM = any\n\n/**\n * Provided to TinySynq constructor.\n * \n * @public\n */\nexport interface SyncableTable {\n  /**\n   * Table name.\n   */\n  name: string;\n  /**\n   * Row identifier; typically the column used as primary key.\n   */\n  id: string;\n  /**\n   * Columns that can be updated by a sync-based change.\n   */\n  editable: string[];\n}\n\n/**\n * Base options for TinySynq constructor.\n * \n * @public\n */\nexport interface TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   * \n   * @remarks\n   * \n   * If not provided, {@link TinySynqOptionsBase.filePath} must be set.\n   * \n   */\n  sqlite3?: SQLiteWASM;\n  /**\n   * Path to SQLite3 database file.\n   * \n   * @remarks\n   * If not provided, {@link TinySynqOptionsBase.sqlite3} must be set.\n   */\n  filePath?: string;\n  /**\n   * Prefix to use for TinySynq tables (trailing underscores will be removed).\n   */\n  prefix: string;\n  /**\n   * Tables that should be synced between devices.\n   */\n  tables: SyncableTable[];\n  /**\n   * Maximum number of changes to process at once.\n   */\n  batchSize?: number;\n  /**\n   * Enable or disable WAL mode.\n   */\n  wal?: boolean;\n  /**\n   * Array of queries to run before TinySynq's change tracking is configured.\n   * \n   * @remarks\n   * Include create statements for syncable tables here.\n   */\n  preInit?: string[];\n  /**\n   * Array of queries to run after TinySynq's change tracking is configured\n   * \n   * @remarks\n   * You might place any insert queries here.\n   */\n  postInit?: string[];\n  /**\n   * Configure logging options.\n   * \n   * @remarks\n   * TinySynq uses TSLog for logging. All optiions are passed directly to it.\n   * See https://tslog.js.org/#/?id=settings for details\n   */\n  logOptions?: ISettingsParam<ILogObj>;\n  /**\n   * Enable/disable debug mode\n   * \n   * When enabled, all INSERT/UPDATE/DELETE actions on syncable tables are written \n   * to the *_dump table for inspection.\n   */\n  debug?: boolean;\n}\n\n/** \n * Constructor options TinySynq instance.\n * \n * Provide either an existing {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance (`sqlite3`) or the `filePath`.\n * \n * @public\n */\nexport interface TinySynqOptionsWithInstance extends TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   */\n  sqlite3: SQLiteWASM;\n}\n\nexport interface TinySynqOptionsWithFilePath extends TinySynqOptionsBase{\n  /**\n   * Path to SQLite3 database file.\n   */\n  filePath: string;\n}\n\n/** \n * {@inheritdoc TinySynqOptionsBase}\n * \n * @public\n */\nexport type TinySynqOptions = TinySynqOptionsWithInstance | TinySynqOptionsWithFilePath\n\nexport type SQLite3 = any\n\n/**\n * Basic query params for methods that read from/write to DB.\n * \n * @public\n */\nexport type QueryParams = {\n  sql: string;\n  values?: any;\n  prefix?: string;\n}\n\n/**\n * Table name and row parameters for retrieving data for a specific record.\n */\nexport interface TableNameRowParams {\n  table_name: string;\n  row_id: string;\n}\n\nexport interface ApplyChangeParams {\n  change: Change,\n  restore?: boolean,\n  savepoint: string\n}\n\nexport interface MetaRowData {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type VClock = {\n  [deviceId: string]: number;\n}\n\nexport enum TinySynqOperation {\n  'INSERT' = 'INSERT',\n  'UPDATE' = 'UPDATE',\n  'DELETE' = 'DELETE'\n}\n\n/**\n * Object transferred between devices to convey individual record changes.\n * \n * @public\n */\nexport interface Change {\n  /**\n   * Change record ID from central server.\n   */\n  id?: number;\n  /**\n   * Table name of the record that was modified.\n   */\n  table_name: string;\n  /**\n   * Row ID of the record that was modified.\n   */\n  row_id: string;\n  /**\n   * The type of operation that took place.\n   */\n  operation: keyof typeof TinySynqOperation;\n  /**\n   * The serialised object in the post-modified state. \n   */\n  data: string; // JSON string\n  /**\n   * Vector Clock holding all device values for the record, as known by the source device of the change.\n   */\n  vclock: VClock;\n  /**\n   * An ISO8601 formatted date and time that the change was recorded on the source device.\n   */\n  modified: string;\n}\n\ninterface BaseLatestChangesOptions {\n  /**\n   * A device ID whose changes should be excluded from retrieval (usually the requester).\n   */\n  exclude?: string;\n\n  since?: string;\n\n  checkpoint?: number;\n}\n\ninterface LatestChangesWithSince extends BaseLatestChangesOptions {\n  /**\n   * An ISO8601 date string. Providing this will limit retrieved changes to this date/time onwards.\n   */\n  since: string;\n\n}\n\ninterface LatestChangesWithCheckpoint extends BaseLatestChangesOptions {\n  /**\n   * A server-specific change ID.\n   * \n   * @remarks\n   * \n   * When provided it will limit retrieved changes to those _after_ the specified change ID.\n   * The change ID is specific to the hub/root server (of which there should be only one).\n   */\n  checkpoint: number;\n}\n\nexport type LatestChangesOptions = LatestChangesWithSince | LatestChangesWithCheckpoint\n\nexport enum SyncRequestType {\n  push = 'push',\n  pull = 'pull'\n}\n\nexport enum SyncResponseType {\n  ack = 'ack',\n  nack = 'nack'\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { VClock } from \"./types.js\";\n\ntype VectorClockParams = {\n  local: VClock;\n  remote: VClock;\n  localId: string;\n  localTime: string;\n  remoteTime: string;\n}\n\ntype RemoteVClockParams = {\n  remote: VClock;\n}\n\nexport class VCompare {\n\n  private local: VClock;\n  private isGreater = false;\n  private isLess = false;\n  private isWrongOrder = false;\n  private remote: VClock = {};\n  private localId: string;\n  private localTime: string;\n  private remoteTime: string;\n\n  constructor({ local, remote, localId, localTime, remoteTime }: VectorClockParams) {\n    this.local = local;\n    this.remote = typeof remote === 'string'\n      ? JSON.parse(remote)\n      : remote;\n    this.localId = localId;\n    this.localTime = localTime;\n    this.remoteTime = remoteTime;\n  }\n\n  setRemote({ remote }: RemoteVClockParams) {\n    this.remote = remote;\n  }\n\n  isConflicted(data?: RemoteVClockParams): boolean {\n    const remote = data?.remote || this.remote;\n    const keys = Object.keys({...this.local, ...remote});\n    keys.forEach(k => {\n      const localCount = this.local[k] || 0;\n      const remoteCount = remote[k] || 0;\n      this.isGreater = this.isGreater || localCount > remoteCount;\n      this.isLess = this.isLess || localCount < remoteCount;\n    });\n    return this.isGreater && this.isLess;\n  }\n\n  isOutDated(): boolean {\n    // Default localTime to any early date so that \n    // remote always wins when local is empty.\n    const { remoteTime, localTime = '1970-01-01' } = this;\n    console.debug('\\n\\n::: isOutDated() :::', JSON.stringify({localTime, remoteTime, local: this.local, remote: this.remote}, null, 1), '\\n\\n::: /isOutDated() :::');\n    if (!remoteTime || !localTime) throw new Error('Missing modified time');\n    return new Date(localTime) >= new Date(remoteTime);\n  }\n\n  isOutOfOrder(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    const keys = Object.keys({...this.local, ...remote}).filter(k => k !== localId);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const drift = Math.abs((local[k] ?? 0) - (remote[k] ?? 0));\n      this.isWrongOrder = drift > 1;\n    }\n    return this.isWrongOrder;\n  }\n\n  merge() {\n    const merged: VClock = {};\n    const participants = new Set(Object.keys(this.local).concat(Object.keys(this.remote)));\n    // If the incoming participant vclock is lower, discard\n    for (const p of participants) {\n      const localP = this.local[p] || 0;\n      const remoteP = this.remote[p] || 0;\n      merged[p] = Math.max(localP, remoteP);\n    }\n    if (merged[this.localId] === undefined) {\n      merged[this.localId] = 0;\n    }\n    return merged;\n  }\n}","import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { ApplyChangeParams, Change, LogLevel, QueryParams, TinySynqOperation, TinySynqOptions, SyncableTable, TableNameRowParams, VClock, LatestChangesOptions } from './types.js';\nimport { Logger, ILogObj } from 'tslog';\nimport { VCompare } from './vcompare.class.js';\nimport { nanoid } from 'nanoid';\n\nconst log = new Logger({ name: 'tinysynq-web-init', minLevel: LogLevel.Info });\nconst strftimeAsISO8601 = `STRFTIME('%Y-%m-%d %H:%M:%f','NOW')`;\n\ntype PreProcessChangeOptions = {\n  change: Change, restore?: boolean\n}\n\ntype PreProcessChangeResult = { \n  valid: boolean;\n  reason: string;\n  vclock: VClock;\n  checks: Record<string, boolean>,\n  record: any;\n  meta: any;\n}\n\n/**\n * Basic utilities, mainly date-oriented.\n */\nexport type Utils = {\n  strftimeAsISO8601: string,\n  nowAsISO8601: string,\n  utcNowAsISO8601: () => string,\n  isSafeISO8601: (date: string) => boolean\n}\n\n/**\n * Parameters for retrieving table's ID column.\n * \n * @public\n */\nexport type GetTableIdColumnParams = {\n  table_name: string;\n}\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq extends EventTarget {\n  private _db: any;\n  private _dbPath: string;\n  private _deviceId: string | undefined;\n  private _synqPrefix?: string;\n  private _synqTables?: Record<string, SyncableTable>;\n  private _synqBatchSize: number = 20;\n  private _wal = true;\n  private log: Logger<ILogObj>;\n\n  /**\n   * Basic Helpers.\n   * \n   * @TODO move to a separate file.\n   * \n   * @public\n   */\n  readonly utils: Utils = {\n    strftimeAsISO8601,\n    nowAsISO8601: strftimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date().toISOString().replace(/[TZ]/g, ' ').trim();\n    },\n    isSafeISO8601: (date: string) => {\n      return (/^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,3})?$/.test(date));\n    },\n  }\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    super();\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n    const _synqTables: Record<string, SyncableTable> = {};\n    opts.tables.forEach(t => {\n      _synqTables[t.name] = t;\n    })\n    this._dbPath = opts.filePath || '';\n    this._db = opts.sqlite3 || undefined;\n    this._synqPrefix = opts.prefix?.trim().replace(/[^a-z0-9]+$/i, '');\n    this._synqTables = _synqTables;\n    this._synqBatchSize = opts.batchSize || this._synqBatchSize;\n    this._wal = opts.wal ?? false;\n    this.log = new Logger({\n      name: 'tinysynq-web',\n      minLevel: opts.logOptions?.minLevel ?? LogLevel.Info,\n      type: opts.logOptions?.type || 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(opts.logOptions || {})\n    });\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbPath) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.log.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              this.log.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              this.log.debug(...args);\n            },\n            onunhandled: (event: any) => {\n              this.log.error('@UNHANDLED', event);\n            }\n          });\n        });\n        \n        this.log.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          this.log.debug(`open ${this.dbPath}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}?vfs=opfs`,\n          });\n  \n          this.log.info(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}`\n          });\n          this.log.warn(\n            `OPFS not available, created in-memory database at ${res.result.filename}`\n          );\n        }\n\n        if (!res) return reject('Unable to start DB');\n        \n        const { dbId } = res;      \n        const conf = await promiser('config-get', {});\n        this.log.info('Running SQLite3 version', conf.result.version.libVersion);\n        this._db = promiser;\n        this._deviceId = dbId;\n        this.setDeviceId();\n    \n        // Set WAL mode if necessary\n        if (this._wal === true) {\n          await this.runQuery({\n            sql: `PRAGMA journal_mode=WAL;`\n          });\n        }\n        const timeout = 5000; // If it hasn't loaded in 5 seconds, it ain't loadin'.\n        let waited = 0;\n        let increment = 50;\n        const interval = setInterval(() => {\n          waited += increment;\n          if (this.db) {\n            clearInterval(interval);\n            this.dispatchEvent(new CustomEvent('ready'));\n            return resolve(this);\n          }\n\n          if (waited >= timeout && !this._db) {\n            this.log.error('@db', this.db)\n            clearInterval(interval);\n            return reject(`TinySynq failed to load. (waited ${waited}ms`);\n          }\n          this.log.error('::: Impossible. :::');\n        }, increment);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        this.log.error(err.name, err.message);\n        this.log.error(err)\n        reject('DB setup failed.');\n      }\n    });\n  };\n\n  /**\n   * SQLiteWASM instance (See {@link https://github.com/sqlite/sqlite-wasm | SQLite Wasm})\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Path to DB file\n   * \n   * @example\n   * \n   * `./app.db` or `/tmp/app.db`\n   */\n  get dbPath() {\n    return this._dbPath;\n  }\n\n  /**\n   * Automatically generated ID for device's DB instance.\n   * \n   * @remarks\n   * \n   * This ID is used by the sync protocol to identify the database.\n   * One it is generated once during setup and does not change. The\n   * value is stored in the `_meta` table (`meta_name='device_id'`).\n   * __Do not edit this value; doing so would corrupt synchronisation__.\n   */\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  /**\n   * Alias for {@link TinySynq.deviceId}.\n   */\n  get synqDbId() {\n    return this._deviceId;\n  }\n\n  /**\n   * The prefix used for TinySynq's tables.\n   * \n   * @defaultValue `tinysynq`\n   */\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  /**\n   * Object containing {@link SyncableTable}s, keyed by table name.\n   * \n   * @remarks\n   * \n   * A {@link SyncableTable} structure is never modified. TinySynq maintains \n   * its own tables and triggers for tracking and responding to changes.\n   * \n   * @returns Record\\<string, SyncableTable\\>\n   */\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  /**\n   * Number of records to process in each batch when syncing changes. \n   */\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  /**\n   * Enable or disable WAL mode.\n   * \n   * @defaultValue true\n   */\n  get wal() {\n    return this._wal;\n  }\n\n  /**\n   * Get a random 16-character ID generated by nanoid\n   * \n   * @returns string\n   */\n  getNewId() {\n    return nanoid(16);\n  }\n\n  /**\n   * Get the column used as identifier for the {@link SyncableTable}.\n   * \n   * @param params - Details of table for which to retrieve ID column.\n   * @returns Column name\n   */\n  getTableIdColumn(params: GetTableIdColumnParams) {\n    const {table_name} = params;\n    return this.synqTables![table_name]?.id as string;\n  }\n\n  /**\n   * If not already set, generates and sets deviceId.\n   */\n  async setDeviceId() {\n    // Set the device ID\n    let existing: any;\n    try {\n      existing = (await this.runQuery<any[]>({\n        sql: `SELECT meta_value FROM ${this.synqPrefix}_meta WHERE meta_name = 'device_id'`\n      }))[0];\n    }\n    catch(err) {\n      this.log.warn(`Couldn't retrieve device ID`);\n    }\n\n    log.warn('@device_id', existing);\n    if (!existing?.meta_value) {\n      const res = await this.runQuery<any[]>({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES (?,?) RETURNING *`,\n        values: ['device_id', this.deviceId]\n      });\n      log.warn('@created record for device_id:', res);\n      existing = res[0];\n    }\n    this._deviceId = existing?.meta_value;\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @remarks\n   * This method does not return any records, only the result of the operation.\n   * \n   * @param params - The SQL query and optionally any values.\n   * @returns\n   */\n  async run<T = any>(params: QueryParams): Promise<T> {\n    return this.runQuery(params);\n  }\n\n  /**\n   * Run multiple operations against the DB\n   * \n   * @remarks\n   * This method does not return any records.\n   * \n   * @param params - The SQL query and optionally an array of arrays or key/value pairs\n   * @returns Undefined or an error, if one occurred\n   */\n  async runMany(params: QueryParams) {\n    const {sql, values, prefix = ':'} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    const dbId = this.synqDbId;\n    this.log.debug('@runMany', {quid, sql, values});\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (const v of values) {\n          const bind = this.reformatQueryValues({values: v, prefix});\n          await this.db('exec', {dbId, sql, bind});\n        }\n      }\n      catch(err) {\n        this.log.error({quid, err, stack: (err as Error).stack});\n        reject(err);\n      }\n      resolve(true);\n    });\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @param params - The SQL query and optionally any values\n   * @returns Array of records returned from the database\n   */\n  async runQuery<T = any>(params: QueryParams): Promise<T> {\n    if (!this._db) {\n      const interval = setInterval(async () => {\n        if (!this._db) return;\n        clearInterval(interval);\n      }, 50);\n    }\n    const {sql, prefix = ':'} = params;\n    const values = this.reformatQueryValues({values: params.values, prefix});\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', quid, sql, values, '/');\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql,\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) {\n              this.log.debug('@runQuery RESOLVED', results.length, quid);\n              this.log.trace(sql, values);\n              return resolve(results as any);\n            }\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        this.log.error(quid, err, (err as Error).stack);\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Renames keys of a query's value object to make them compatible\n   * with the SQLiteWASM API's bind parameters.\n   * \n   * @param\n   * @returns \n   */\n  reformatQueryValues({values, prefix = ':'}: {values: any, prefix?: string}) {\n    if (Array.isArray(values)) return values;\n    if (typeof values === 'object') {\n      const keys = Object.keys(values);\n      const remapped: Record<string, any> = {};\n      keys.forEach(k => {\n        const newK = k.startsWith(prefix) ? k : `${prefix}${k}`;\n        remapped[newK] = values[k];\n      });\n      return remapped;\n    }\n    return values;\n  }\n\n  /**\n   * Returns the current device's unique TinySynq ID.\n   * \n   * @returns The device's assigned ID.\n   */\n  async getDeviceId(): Promise<string> {\n    if (this._deviceId) return this._deviceId;\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'device_id'`\n    });\n    return res[0].meta_value;\n  }\n\n  /**\n   * Returns an ISO8601 formatted date and time of the last successful local sync.\n   * \n   * @remarks\n   * \n   * A \"local sync\" is the process of sending local changes to the remote hub.\n   * \n   * @returns The time of the last sync.\n   */\n  async getLastSync(): Promise<string> {\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    this.log.trace('@getLastSync', res[0]);\n    return res[0]?.meta_value;\n  }\n  \n  /**\n   * Returns matching {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChanges(params?: {lastLocalSync?: string, columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync: string = params?.lastLocalSync || await this.getLastSync();\n    let { columns = ['c.*'] } = params || {};\n    this.log.debug('@getChanges', lastLocalSync);\n  \n    let where: string = '';\n    let columnSelection = columns\n      .map(c => c.replace(/[^*._a-z0-9]+/gi, ''))\n      .join(',') || '*';\n  \n    if (lastLocalSync) {\n      where = 'WHERE c.modified > ?'\n    }\n    const sql = `\n      SELECT ${columnSelection}\n      FROM ${this._synqPrefix}_changes c\n      ${where}\n      ORDER BY c.modified ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  /**\n   * Returns {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChangesSinceLastSync(params?: {columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync = await this.getLastSync() || undefined;\n    return this.getChanges({...params, lastLocalSync});\n  };\n\n  /**\n   * Writes debug mode value (true) which disables recording \n   * of operations on syncable tables.\n   * \n   * @remarks\n   * \n   * The value set by this method is checked by dedicated triggers.\n   * If the value is `1`, the active trigger writes the data to the\n   * `*_dump` table. It's worth purging the table data once done \n   * with debugging.\n   * \n   * @returns Result of the operation.\n   */\n  async enableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Writes debug mode value (false) which disables recording \n   * of operations on syncable tables.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   * \n   * @returns Result of the operation.\n   */\n  async disableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Empties the `*_dump` table.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   */\n  async clearDebugData() {\n    await this.run({sql: `DELETE FROM ${this._synqPrefix}_dump`});\n    await this.run({sql: `UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = ${this._synqPrefix}_dump`});\n  }\n  \n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private enableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');`\n    });\n  }\n\n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private async disableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');`\n    });\n  }\n\n  async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.run({sql});\n    return savepoint;\n  }\n\n  async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  /**\n   * Retrieves a single record.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  private async getRecord<T>(params: TableNameRowParams): Promise<T | any> {\n    const {table_name, row_id} = params;\n    const idCol = this.getTableIdColumn({table_name: table_name});\n    const sql = `SELECT * FROM ${table_name} WHERE ${idCol} = ?`;\n    const res = await this.runQuery({sql, values: [row_id]});\n    this.log.debug('@getRecord', res);\n    return res[0];\n  }\n\n  /**\n   * Retrieves a single record by it's ID.\n   * \n   * @remarks\n   * \n   * The column used to identify the record is according to the {@link SyncableTable}\n   * that was provided in {@link TinySynqOptionsBase.tables} at instantiation.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  async getById<T>(params: TableNameRowParams): Promise<T | any> {\n    const{table_name, row_id} = params;\n    return this.getRecord({table_name, row_id});\n  }\n\n  async insertRecordMeta({change, vclock}: any) {\n    if (!this.utils.isSafeISO8601(change.modified)) throw new Error(`Invalid modified data for record meta: ${change.modified}`)\n    this.log.debug('<<< @insertRecordMeta >>>', {change, vclock});\n    const { table_name, row_id, source } = change;\n    const mod = vclock[this._deviceId!] || 0;\n    const values = {\n      table_name,\n      row_id,\n      mod,\n      source,\n      vclock: JSON.stringify(vclock),\n      modified: change.modified,\n    };\n    return this.runQuery({\n      sql: `\n      INSERT INTO ${this._synqPrefix}_record_meta (table_name, row_id, source, mod, vclock, modified)\n      VALUES (:table_name, :row_id, :source, :mod, :vclock, :modified)\n      ON CONFLICT DO UPDATE SET source = :source, mod = :mod, vclock = :vclock, modified = :modified\n      RETURNING *\n      `,\n      values,\n    });\n  }\n\n  /**\n   * Get associated meta data (including `vclock`) for record.\n   * \n   * @param params - Object containing table/row parameters.\n   * \n   * @returns Object containing row data from `*_record_meta`.\n   */\n  async getRecordMeta(params: {table_name: string, row_id: string}) {\n    const {table_name, row_id} = params;\n    const sql = `\n    SELECT *\n    FROM ${this.synqPrefix}_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id`;\n    const res = await this.runQuery({sql, values: {table_name, row_id}});\n    return res[0];\n  }\n\n  /**\n   * Returns changes that couldn't be applied yet because they\n   * were received out of sequence.\n   * \n   * @returns Array of pending changes.\n   */\n  async getPending() {\n    const sql = `\n    SELECT *\n    FROM ${this._synqPrefix}_pending\n    ORDER BY id ASC\n    `;\n    const res = await this.runQuery({sql});\n    return res;\n  }\n\n  /**\n   * Returns the most recent change for a specific record.\n   * \n   * @param params \n   * @returns A single change record, if one exists\n   */\n  async getMostRecentChange(params: {table_name: string, row_id: string, operation?: TinySynqOperation}) {\n    const conditions = [\n      'table_name = :table_name',\n      'row_id = :row_id'\n    ];\n    if (params.operation) {\n      conditions.push('operation = :operation');\n    }\n\n    const sql = `\n    SELECT * FROM ${this._synqPrefix}_changes\n    WHERE ${conditions.join(' AND ')}\n    ORDER BY modified DESC\n    LIMIT 1`;\n    const res = await this.runQuery({sql, values: params});\n    return res[0];\n  }\n\n  /**\n   * Creates new pending record to be applied later.\n   * \n   * @param opts - Options for processing out-of-order change\n   * @returns Newly created pending record\n   */\n  private async processOutOfOrderChange({change}: {change: Change}) {\n    const {id, ...data} = change;\n    const sql = this.createInsertFromSystemObject({\n      data,\n      table_name: `${this._synqPrefix}_pending`,\n    });\n    this.log.trace('@processOutOfOrderChange\\n', sql, change);\n    const values: any = { ...data};\n    values.vclock = JSON.stringify(data.vclock);\n    const res = await this.runQuery({sql, values});\n    this.log.trace('@processOutOfOrderChange\\n', {res});\n    return res;\n  }\n\n  /**\n   * Determines whether to treat conflicted change as valid or invalid.\n   * \n   * @param opts - Options for processing concurrent change\n   * @returns boolean \n   */\n  private async processConflictedChange<T>(\n    { record, change, meta: localMeta }: \n    {record: T|any, meta: any, change: Change}\n  ): Promise<boolean> {\n    this.log.debug('@processConflictedChange START', record, change)\n    // INSERT won't have a local record so accept the incoming change\n    if (change.operation === TinySynqOperation.INSERT) return true;\n\n    this.log.trace('<<<@ processConflictedChange LLW @>>>', change.id, change.table_name, change.row_id, {record, localMeta, change});\n    if (change.modified > localMeta.modified) {\n      this.log.debug('<!> INTEGRATING REMOTE', change.id, change.table_name, change.row_id);\n      // Update local with the incoming changes\n      return true;\n    }\n    else {\n      this.log.debug('<!> KEEPING LOCAL', change.id, change.table_name, change.row_id);\n      // Keep the local change, but record receipt of the record.\n      return false;\n    }\n  }\n\n  /**\n   * Checks for and handles issues with incoming change to be applied.\n   * \n   * @returns Result of pre-processing.\n   */\n  private async preProcessChange(\n    {change, restore}: PreProcessChangeOptions\n  ): Promise<PreProcessChangeResult> {\n    this.log.trace('@preProcess change', change)\n    let defaultReason = 'unknown';\n    let valid = false;\n    let reason = defaultReason;\n    const localId = this.deviceId!;\n    const { table_name, row_id, vclock: remote = {} } = change;\n    const record = await this.getRecord({table_name, row_id});\n    this.log.trace('@preProcess record:', record)\n    const meta = await this.getRecordMeta({table_name, row_id});\n    this.log.trace('@preProcess meta:', meta)\n    const local = meta?.vclock ? JSON.parse(meta.vclock) : {};\n    // If it's an insert, there won't be any meta.\n    const localTime = meta?.modified || '1970-01-01';\n    const remoteTime = change?.modified;\n\n    let latest: VClock = {};\n    const localV = new VCompare({ local, remote, localId, localTime, remoteTime });\n    let displaced = false;\n    let conflicted = false;\n    let stale = false;\n\n    // If we don't have the record, treat it as new\n    if (!restore && !record && change.operation !== TinySynqOperation.INSERT) {\n      // But skip potential update-after-delete, which is handled later\n      if (!!meta && change.operation === TinySynqOperation.UPDATE) {\n        this.log.warn('SKIPPED: non-existent record with existing meta', meta);\n      }\n      else {\n        reason = 'update before insert';\n        this.processOutOfOrderChange({change});\n      }\n    }\n    else if (restore || !record || !local || !local[localId]) {\n      latest = change.vclock;\n    }\n    \n    if (restore) {\n      valid = true;\n      reason = 'restoration';\n      latest = localV.merge();\n      return { record, meta, valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n    }\n    else if (displaced = localV.isOutOfOrder()) {  \n      reason = 'received out of order';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (conflicted = localV.isConflicted()) {\n      valid = await this.processConflictedChange({record, change, meta});\n      if (!valid) {\n        reason = 'concurrent writes'; \n      }\n      else {\n        latest = localV.merge();\n      }\n    }\n    else if (stale = localV.isOutDated()) {\n      reason = 'stale';\n    }\n    else if (reason === defaultReason) {\n      valid = true;\n      reason = '';\n      latest = localV.merge();\n    }\n\n    return { record, meta, valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n  }\n\n  /**\n   * Checks for incoming update on deleted record and attempts to resurrect it.\n   * \n   * @param params \n   * @returns Object with `valid` property\n   */\n  private async processUpdateAfterDelete(params: PreProcessChangeResult & { change: Change, restore: boolean | undefined}) {\n    const { restore, record, change, meta } = params;\n    const { table_name, row_id } = change;\n    let valid = true;\n\n    if (!restore && !record && !!meta && change.operation === TinySynqOperation.UPDATE) {\n      // If meta exists but the record doesn't, most likely it's\n      // because the record was deleted. If possible, restore it.\n      const lastChange = await this.getMostRecentChange({\n        table_name,\n        row_id,\n        operation: TinySynqOperation.DELETE\n      });\n\n      if (lastChange) {\n        let recordData: any = {};\n        try {\n           recordData = JSON.parse(lastChange.data);\n        }\n        catch(err) {\n          valid = false;\n          this.log.error(err);\n        }\n\n        if (recordData) {\n          // Restore the record\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          await this.run({sql: insertSql, values: recordData});\n          // @TODO: insert notice that record was resurrected\n        }\n      }\n      else {\n        valid = false;\n      }\n    }\n\n    return {valid};\n  }\n\n  /**\n   * Creates an insert query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string.\n   */\n  createInsertFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    const columnsToInsert = Object.keys(data).join(',');\n    //const editable = this._synqTables![table].editable || [];\n    const updates = Object.keys(data)\n      // @TODO: There's no need to restrict editable fields here, but check again.\n      //.filter(key => editable.includes(key))\n      .map(k => `${k} = :${k}`)\n      .join(',');    \n    if (!updates) throw new Error(`No insertable data: ${JSON.stringify(data)}`);\n\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  /**\n   * Creates an update query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string. \n   */\n  createUpdateFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    if (!this._synqTables![table]) throw new Error(`Not a synced table for update: ${table}`);\n\n    const idCol = this._synqTables![table].id;\n    const updates = Object.keys(data)\n      .filter(k => k !== idCol)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    if (!updates) throw new Error(`No updates available: ${JSON.stringify(data)}`);\n  \n    const updateSql = `\n      UPDATE ${table} SET ${updates}\n      WHERE ${idCol} = :${idCol}\n      RETURNING *;`;\n\n    return updateSql;\n  }\n\n  /**\n   * Creates an insert query based on the system table name and data provided.\n   *  \n   * @param param0 - Parameters from which to create the query.\n   * \n   * @returns A SQL query string. \n   */\n  private createInsertFromSystemObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    this.log.silly('@createInsert...', {data});\n    const columnsToInsert = Object.keys(data).join(',');\n    const updates = Object.keys(data)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n    return insertSql;\n  }\n\n  private async updateLastSync({change}: {change: Change}) {\n    const lastSyncTime = await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      values: { name: 'last_local_sync' },\n    });\n    const lastSyncId = await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, :value)`,\n      values: { name: 'last_sync', value: change.id }\n    });\n    return {lastSyncTime, lastSyncId}\n  }\n\n  private async applyChange({\n    change,\n    restore,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      // Check that the changes can actually be applied\n      const changeStatus = await this.preProcessChange({change, restore});\n\n      this.log.debug([\n        '\\n\\n ::: STATUS :::', \n        JSON.stringify({changeStatus, change}, null, 2), \n        '\\n\\n ::: /STATUS :::'\n      ]);\n      if (!changeStatus?.valid) {\n        this.log.warn('>>> Invalid change', changeStatus);\n        this.updateLastSync({change});\n        return;\n      }\n\n      // Check for update-after-delete. It's done here so that stale changes are skipped.\n      const uadStatus = await this.processUpdateAfterDelete({\n        ...changeStatus,\n        change,\n        restore\n      });\n      if (!uadStatus.valid) {\n        this.log.warn(changeStatus);\n        this.updateLastSync({change});\n        return; \n      }\n\n      const table = this.synqTables![change.table_name];\n      const idCol = this.getTableIdColumn(change);\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n          recordData[idCol] = change.row_id;\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n      else {\n        // There's no data so bail\n        throw new Error(`Cannot perform update with empty data:\\n${JSON.stringify(change, null, 2)}`);\n      }\n \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n\n      this.log.silly('@applyChange', {change, table, changeStatus});\n      switch(change.operation) {\n        case 'INSERT':\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'UPDATE':\n          const updateSql = this.createUpdateFromObject({\n            data: recordData,\n            table_name: change.table_name,\n          });\n          this.run({sql: updateSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          this.log.debug('>>> DELETE SQL <<<', sql, change.row_id);\n          await this.run({sql, values: [change.row_id]});\n          break;\n      }\n      const lastSyncResult = await this.updateLastSync({change});\n      this.log.info({lastSyncResult});\n\n      // Insert merged VClock data\n      const updatedRecordMeta = await this.insertRecordMeta({change, vclock: changeStatus.vclock});\n      this.log.silly({updatedRecordMeta});\n    }\n    catch (error: any) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}. Rolled back.`, {change});\n      this.log.error(error.stack)\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB({ changes, restore = false }: { changes: Change[], restore?: boolean }) {\n    await this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, restore, savepoint});\n        }\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    await this.enableTriggers();\n    this.log.silly(`Applied ${changes.length} change(s)`);\n  };\n\n  /**\n   * Get items that have been recently changed.\n   * \n   * @param opts \n   */\n  getFilteredChanges(opts?: LatestChangesOptions) {\n    let conditions: string[] = [];\n    let values: any = {};\n    if (opts?.exclude) {\n      conditions.push('source != :exclude');\n      values.exclude = opts.exclude;\n    }\n    if (opts?.checkpoint) {\n      conditions.push('id > :checkpoint');\n      values.checkpoint = opts.checkpoint;\n    }\n    else if (opts?.since) {\n      conditions.push('modified > :since');\n      values.since = opts.since\n    }\n    const where = conditions.length ? `WHERE ${conditions.join(' AND ')}` : '';\n    const sql = `\n    SELECT id, table_name, row_id, data, operation, source, vclock, modified\n    FROM ${this.synqPrefix}_changes\n    ${where} \n    ORDER BY modified ASC`;\n\n    return this.runQuery({sql, values});\n  }\n\n  async updateLastPush(params: {time: string; id: string}) {\n    const lastPush = await this.runQuery({\n      sql: `\n      SELECT * FROM ${this._synqPrefix}_meta\n      WHERE meta_name IN ('lastPushTime','lastPushId')\n      ORDER BY meta_name ASC`\n    });\n    if (lastPush[0].meta_value > params.id || lastPush[1].meta_value > params.time) {\n      console.warn('Request lastPush update is older than current values.')\n      console.warn('@Existing meta:', lastPush);\n      console.warn('@Incoming meta:', params);\n    } \n    const savepoint = await this.beginTransaction();\n    const timeResult = await this.runQuery({\n      sql:`\n      UPDATE ${this._synqPrefix}_meta\n      SET meta_value = :value\n      WHERE meta_name = 'lastPushTime'\n      RETURNING *`,\n      values: {value: params.time}\n    });\n    const idResult = await this.runQuery({\n      sql:`\n      UPDATE ${this._synqPrefix}_meta\n      SET meta_value = :value\n      WHERE meta_name = 'lastPushId'\n      RETURNING *`,\n      values: {value: params.id}\n    });\n    await this.commitTransaction({savepoint});\n    return {timeResult, idResult}\n  }\n\n  async tablesReady(): Promise<void> {\n    await this.enableTriggers();\n  }\n\n  async obliterate(): Promise<void> {\n    return await this.db({\n      type: 'close', \n      dbId: this.deviceId,\n      args: {unlink: true}\n    });\n  }\n}\n","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, SyncableTable } from \"./types.js\";\nimport { getUpdateTriggerDiffQuery } from \"./trigger.js\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst initTinySynq = async (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysynq-setup', ...logOptions});\n  const ts = new TinySynq(config);\n\n  /**\n   * Pretty important: make sure to call `init()` :-)\n   */\n\n  await ts.init();\n\n  const getRecordMetaInsertQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    /* \n    db.is kind of insane, but it works. A rundown of what's happening:\n    - We're creating a trigger after a deletion (the easy part)\n    - Aside from recording the changes, we also need to add record-specific metadata:\n      - table name and row identifier,\n      - the number of times the record has been touched (including creation)\n      - the map of all changes across all devices — a Vector Clock (JSON format)\n    - Getting the vector clock is tricky, partly because of SQLite limitations\n      (no variables, control structures), and partly because it's possible that\n      no meta exists for the record.\n    - To work around db.we do a select to get the meta, but perform a union with\n      another select that just selects insert values.\n    - Included in both selects is\n      a 'peg' which we use to sort the UNIONed rows to ensure that if a valid row\n      exists, it's the first row returned.\n    - Now we select from db.union and limit to 1 result. If a record exists\n      then we get that record. If not, we get the values ready for insertion.\n    - Finally, if there's a conflict on PRIMAY KEY or UNIQUE contraints, we update\n      only the columns configured as editable.\n    */\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n    INSERT INTO ${ts.synqPrefix}_record_meta (table_name, row_id, source, mod, vclock)\n    SELECT table_name, row_id, source, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '${table.name}' as table_name,\n        ${version}.${table.id} as row_id, \n        '${ts.deviceId}' as source, \n        IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$.${ts.deviceId}', IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1) as vclock\n      FROM ${ts.synqPrefix}_record_meta\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id}\n      UNION\n      SELECT 0 as peg, '${table.name}' as table_name, ${version}.${table.id} as row_id, '${ts.deviceId}' as source, 1, json_object('${ts.deviceId}', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      source = '${ts.deviceId}',\n      mod = json_extract(excluded.vclock,'$.${ts.deviceId}'),\n      vclock = json_extract(excluded.vclock,'$'),\n      modified = '${ts.utils.utcNowAsISO8601().replace('Z', '')}'\n    ;`;\n    log.silly(sql);\n    return sql;\n  }\n\n  const getChangeUpdateQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n      UPDATE ${ts.synqPrefix}_changes\n      SET vclock = trm.vclock, source = trm.source\n      FROM (\n        SELECT vclock, source\n        FROM ${ts.synqPrefix}_record_meta\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n      ) AS trm\n      WHERE id IN (\n        SELECT id FROM ${ts.synqPrefix}_changes\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n        ORDER by id desc\n        LIMIT 1\n      );\n    `;\n    return sql;\n  }\n\n  const setupTriggersForTable = async ({ table }: { table: SyncableTable }) => {\n    log.debug('Setting up triggers for', table.name);\n\n    // Template for inserting the new value as JSON in the `*_changes` table.\n    const jsonObject = (await ts.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n\n    const oldJsonObject = jsonObject.jo.replace(/NEW/g, 'OLD');\n    log.silly('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    /**\n     * These triggers run for changes originating locally. They are disabled\n     * when remote changes are being applied (`triggers_on` in `*_meta` table).\n     */\n\n    // Ensure triggers are up to date\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_insert_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_update_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    await ts.run({sql});\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        ${await getUpdateTriggerDiffQuery({ts, table})}\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    });\n\n    /*\n    Stores current record as JSON in `data` column as is done for INSERTs.\n    This will act as a \"tombstone\" record in case of update-after-delete.\n\n    Restoration will involve checking for a DELETE change for the table/row_id\n    and reinserting it if it exists, then applying the incoming update. Finally,\n    a record is added to `*_notice` informing of the resurrection.\n    */\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', OLD.${table.id}, 'DELETE', ${oldJsonObject});\n        \n        ${getRecordMetaInsertQuery({table, remove: true})}\n        \n        ${getChangeUpdateQuery({table, remove: true})}\n      END;`\n    });\n\n    /**\n     * All the triggers below will only be executed if `meta_name=\"debug_on\"`\n     * has the `meta_value=1` in the *_meta table, regardless of `triggers_on`.\n     */\n\n    // Remove previous versions\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_record_meta`});\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow a rudimentary tracing of DB actions on the synced tables.\n     */\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'INSERT', ${jsonObject.jo});\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n \n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'DELETE', ${oldJsonObject});\n      END;`\n    });\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow comparison record meta before and after insert.\n     */\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta\n      BEFORE INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta\n      AFTER INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_record_meta\n      AFTER UPDATE ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    /* END OF DEBUG TRIGGERS */\n  }\n\n  // Create a change-tracking table and index\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      source TEXT,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_modified_idx ON ${ts.synqPrefix}_changes(modified)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_table_row_idx ON ${ts.synqPrefix}_changes(table_name, row_id)`\n  });\n\n  // Change *_pending is essentially a clone of *_changes used to hold items that\n  // cannot be applied yet because intermediate/preceding changes haven't been received.\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      source TEXT NOT NULL,\n      vclock BLOB NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_pending_table_row_idx ON ${ts.synqPrefix}_pending(table_name, row_id)`\n  });\n\n  // Create a notice table\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  }); \n\n  // Create record meta table and index\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER,\n      source TEXT NOT NULL,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n\n  await ts.run({\n    sql:`CREATE UNIQUE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_idx ON ${ts.synqPrefix}_record_meta(table_name, row_id)`\n  });\n  // @TODO: These may actually need to be compound indexes; need to evaluate queries.\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_source_idx ON ${ts.synqPrefix}_record_meta(source)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_modified_idx ON ${ts.synqPrefix}_record_meta(modified)`\n  });\n\n  // Create meta table\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  `});\n\n  await ts.run({\n    sql: `\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  `});\n\n  await ts.run({\n    sql: `CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_meta_name_idx ON ${ts.synqPrefix}_meta(meta_name)`\n  });\n  \n  // Enable debug mode\n  if (debug) await ts.enableDebug();\n\n  // Set the device ID\n  await ts.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n      await ts.run({\n        sql: preInitQuery\n      });\n    }\n  }\n\n  log.debug(`@${ts.synqPrefix}_meta`, ts.runQuery({sql:`SELECT * FROM pragma_table_info('${ts.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, ts.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = await ts.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    log.debug('@exists?', table.name, exists);\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    await setupTriggersForTable({ table });\n    ts.tablesReady();\n  }\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.debug(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      await ts.run({\n        sql: postInitQuery\n      });\n    }\n  }\n\n  return ts;\n};\n\nexport default initTinySynq;","import { nanoid } from \"nanoid\";\nimport { ILogObj, Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { Change, SyncRequestType, SyncResponseType } from \"./types.js\";\n\ninterface TinySynqClientConfig {\n  /**\n   * Initialised TinySynq instance.\n   */\n  ts: TinySynq;\n  /**\n   * The domain or IP address (no protocol or port).\n   * \n   * @default localhost\n   */\n  hostname?: string;\n  /**\n   * The port number on which to connect.\n   *\n   * @default 7174\n   */\n  port?: number;\n  /**\n   * Whether or not it should a secure connection (wss://)\n   * \n   * @default false\n   */\n  secure?: boolean;\n}\n\nlet socket: WebSocket;\n\nconst defaultConfig = {\n  hostname: 'localhost',\n  port: 7174,\n  secure: false,\n};\n\nexport class TinySynqClient extends EventTarget {\n\n  private _config: TinySynqClientConfig;\n  private _serverUrl: string;\n  private _ts: TinySynq;\n  private _ws: WebSocket | undefined;\n  private log: Logger<ILogObj>;\n\n  get serverUrl() {\n    return this._serverUrl;\n  }\n\n  get ts() {\n    return this._ts;\n  }\n\n  get ws() {\n    return this._ws;\n  }\n\n  constructor(config: TinySynqClientConfig) {\n    super();\n    if (!config?.ts) throw new Error('Invalid client configuration');\n    this.log = new Logger({name: 'TinySynqClient'});\n    this._config = config;\n    this._ts = config.ts;\n    const finalConfig = {...defaultConfig, ...this._config};\n    const { secure, hostname, port = '' } = finalConfig;\n    const ws = 'ws' + (secure ? 's' : '');\n    this._serverUrl = `${ws}://${hostname}${port ? ':' : ''}${port}`;\n  }\n\n  isOpenOrConnecting() {\n    return this.ws && [Number(this.ws.OPEN), Number(this.ws.CONNECTING)].includes(this.ws.readyState)\n  }\n  \n  async connect(): Promise<WebSocket> {\n    return new Promise((resolve, reject) => {\n      if (this.isOpenOrConnecting()) {\n        return resolve(this.ws as WebSocket);\n      }\n      this._ws = new WebSocket(this.serverUrl);\n      this._ws.addEventListener('open', (e) => {\n        this.log.info(\"TinySynq socket ready.\", e);\n        resolve(this.ws as WebSocket);\n      });\n      this._ws.addEventListener('error', (e) => {\n        this.log.error(\"TinySynq socket error:\", e);\n        if (this.isOpenOrConnecting()) reject(e);\n      });\n      this._ws.addEventListener('close', (e) => {\n        this.log.info('Closing TinySynq socket...', e);\n      });\n      this._ws.addEventListener('message', this.handleMessage.bind(this));\n    });\n  }\n\n  async push() {\n    if (!this.ts) return;\n    const lastSync = await this.ts.getLastSync();\n    const changes = await this.ts.getFilteredChanges({since: lastSync});\n    if (!changes) return this.log.info('no changes');\n    const payload = {\n      type: SyncRequestType.push,\n      changes,\n      source: this._ts.deviceId,\n      requestId: nanoid(16)\n    };\n    this._ws?.send(JSON.stringify(payload));\n  }\n\n  async pull() {\n    const payload = {type: SyncRequestType.pull, source: this._ts.deviceId};\n    console.debug('@pull', payload);\n    this._ws?.send(JSON.stringify(payload));\n  }\n\n  private async handleMessage(e: any) {\n    console.debug('@message', e);\n    const data = JSON.parse(e.data);\n    console.debug('@parsed', data)\n    if (data.type !== SyncResponseType.nack) {\n      if (data.changes) {\n        console.warn('@client processing changes')\n        const changes = data.changes.map((c: Change) => {\n          if (typeof c.vclock === 'string') {\n            c.vclock = JSON.parse(c.vclock);\n          }\n          return c;\n        });\n        console.debug('@client changes', changes)\n        await this.ts.applyChangesToLocalDB({changes});\n        const event = new CustomEvent('changes', {\n          detail: data.changes\n        });\n        console.debug('::: Disptaching event...', event);\n        this.dispatchEvent(event)\n      }\n      else if (data.lastChangeId) {\n       const result = await this.ts.updateLastPush({time: data.lastChangeTime, id: data.lastChangeId});\n       this.log.debug('Stored last push', result);\n      }\n    }\n    else {\n      console.error('Sync failed', data);\n      this.dispatchEvent(\n        new CustomEvent('error', {\n          detail: data\n        })\n      );\n    }\n  }\n}\n\n","\n\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { SyncableTable } from \"./types.js\";\n\nexport const getOldVsNewUnionColumnSelection = (params: {columns: any[]}) => {\n  if (!params.columns) throw new Error('Missing table column data to generate trigger union column selection'); \n\n  return params.columns.map((c) => `SELECT '${c.name}' AS col, OLD.${c.name} AS old_val, NEW.${c.name} AS new_val`);\n}\n\nexport const getUpdateTriggerDiffQuery = async (params: {ts: TinySynq, table: SyncableTable}) => {\n  const { ts, table } = params;\n  // Need to get the table schema in order to generate the query.\n  const columns = await ts.runQuery({\n    sql: `SELECT * FROM pragma_table_info('${table.name}')`\n  });\n\n  const unionSelects = getOldVsNewUnionColumnSelection({columns});\n  const sql = `\n  INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n  SELECT * FROM (\n    WITH RECURSIVE all_cols AS (\n      ${unionSelects.join('\\n    UNION ALL\\n    ')}\n    ),\n    changed_cols AS (\n      SELECT col, new_val\n      FROM all_cols\n      WHERE new_val != old_val\n    )\n    SELECT '${table.name}', NEW.${table.id}, 'UPDATE', json_group_object(col, new_val)\n    FROM changed_cols\n  );`;\n\n  return sql;\n};"],"names":["TinySynqOperation","SyncRequestType","SyncResponseType","LogLevel","VCompare","_ref","local","remote","localId","localTime","remoteTime","this","isGreater","isLess","isWrongOrder","JSON","parse","_proto","prototype","setRemote","_ref2","isConflicted","data","_this","Object","keys","_extends","forEach","k","localCount","remoteCount","isOutDated","_this$localTime","console","debug","stringify","Error","Date","isOutOfOrder","filter","i","length","_local$k","_remote$k","drift","Math","abs","merge","_step","merged","_iterator","_createForOfIteratorHelperLoose","Set","concat","done","p","value","max","undefined","_excluded","_catch","body","recover","result","e","then","_settle","pact","state","s","_Pact","o","bind","v","observer","onRejected","callback","onFulfilled","_isSettledPact","thenable","log","Logger","name","minLevel","Info","_forOf","target","check","_iteratorSymbol","step","reject","iterator","_cycle","_fixup","TypeError","values","push","array","_forTo","strftimeAsISO8601","TinySynq","_EventTarget","opts","_opts$prefix","_opts$wal","_opts$logOptions$minL","_opts$logOptions","_opts$logOptions2","_this2","call","_db","_dbPath","_deviceId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","toISOString","replace","trim","isSafeISO8601","date","test","filePath","sqlite3","tables","t","prefix","batchSize","wal","logOptions","type","maskValuesOfKeys","hideLogPositionForProduction","_inheritsLoose","init","_this3","db","Promise","resolve","dbPath","res","_promiser","sqlite3Worker1Promiser","onready","onerror","err","error","_this$log","apply","slice","arguments","onunhandled","event","promiser","_temp4","dbId","conf","_temp2","waited","interval","setInterval","clearInterval","dispatchEvent","CustomEvent","info","version","libVersion","setDeviceId","_temp","runQuery","sql","_temp3","filename","_promiser2","_promiser3","warn","message","getNewId","nanoid","getTableIdColumn","params","_this$synqTables$tabl","synqTables","table_name","id","_temp8","existing","_temp6","_existing","_this4","meta_value","_temp5","_existing2","synqPrefix","deviceId","_temp7","_this4$runQuery","run","runMany","_this6","_params$prefix","quid","ceil","random","synqDbId","_temp11","_temp10","_temp9","reformatQueryValues","stack","_this7","_params$prefix2","results","row","trace","col","columnNames","_ref$prefix","Array","isArray","remapped","newK","startsWith","getDeviceId","_this8","getLastSync","_this9","_res$","getChanges","_temp12","lastLocalSync","_ref2$columns","columns","_this10","where","columnSelection","map","c","join","_params$lastLocalSync","getChangesSinceLastSync","_this11","enableDebug","_this12","disableDebug","_this13","clearDebugData","_this14","enableTriggers","disableTriggers","_this15","beginTransaction","savepoint","now","commitTransaction","_ref3","rollbackTransaction","_ref4","getRecord","_this19","row_id","idCol","getById","insertRecordMeta","_ref5","change","vclock","_this21","modified","mod","source","getRecordMeta","_this22","getPending","getMostRecentChange","_this24","conditions","operation","processOutOfOrderChange","_ref6","_this25","_objectWithoutPropertiesLoose","createInsertFromSystemObject","processConflictedChange","_ref7","record","localMeta","meta","_this26","INSERT","preProcessChange","_ref8","restore","_this27","defaultReason","valid","reason","_change$vclock","_exit","_temp16","_result2","latest","checks","stale","displaced","conflicted","localV","UPDATE","_temp15","_temp17","_temp18","_this27$processConfli","processUpdateAfterDelete","_temp22","_this28","_temp21","DELETE","lastChange","_temp20","recordData","_temp19","insertSql","createInsertFromObject","_ref9","table","columnsToInsert","updates","insertPlaceholders","createUpdateFromObject","_ref10","_ref11","silly","updateLastSync","_ref12","_this29","lastSyncTime","lastSyncId","applyChange","_ref13","_this30","changeStatus","uadStatus","_temp24","lastSyncResult","updatedRecordMeta","_temp23","discriminant","cases","awaitBody","dispatchIndex","testValue","outer","_resumeAfterTest","_resumeAfterBody","fallthroughCheck","_switch","_interrupt","updateSql","applyChangesToLocalDB","_ref14","changes","_ref14$restore","_this31","_temp29","_temp28","update","stage","shouldContinue","updateValue","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp27","_temp26","_temp25","getFilteredChanges","exclude","checkpoint","since","updateLastPush","_this32","lastPush","time","timeResult","idResult","tablesReady","obliterate","args","unlink","_createClass","key","get","_wrapNativeSuper","EventTarget","Symbol","return","defaultConfig","hostname","port","secure","TinySynqClient","config","_config","_serverUrl","_ts","_ws","ts","finalConfig","_finalConfig$port","isOpenOrConnecting","ws","Number","OPEN","CONNECTING","includes","readyState","connect","WebSocket","serverUrl","addEventListener","handleMessage","lastSync","_this3$_ws","payload","requestId","send","pull","_this4$_ws","_this5","nack","detail","lastChangeId","lastChangeTime","preInit","postInit","getRecordMetaInsertQuery","_ref$remove","remove","getChangeUpdateQuery","_ref2$remove","_result","postInitQuery","exists","_ts$runQuery","jsonObject","oldJsonObject","jo","_run","unionSelects","getOldVsNewUnionColumnSelection","getUpdateTriggerDiffQuery","_getUpdateTriggerDiff","setupTriggersForTable","preInitQuery"],"mappings":"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"}