{"version":3,"file":"tinysynq.umd.js","sources":["../src/lib/types.ts","../src/lib/vcompare.class.ts","../src/lib/tinysynq.class.ts","../src/lib/index.ts"],"sourcesContent":["import { ISettingsParam, ILogObj } from 'tslog';\n\n/**\n * A {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance.\n * \n * @public\n */\nexport type SQLiteWASM = any\n\n/**\n * Provided to TinySynq constructor.\n * \n * @public\n */\nexport interface SyncableTable {\n  /**\n   * Table name.\n   */\n  name: string;\n  /**\n   * Row identifier; typically the column used as primary key.\n   */\n  id: string;\n  /**\n   * Columns that can be updated by a sync-based change.\n   */\n  editable: string[];\n}\n\n/**\n * Base options for TinySynq constructor.\n * \n * @public\n */\nexport interface TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   * \n   * @remarks\n   * \n   * If not provided, {@link TinySynqOptionsBase.filePath} must be set.\n   * \n   */\n  sqlite3?: SQLiteWASM;\n  /**\n   * Path to SQLite3 database file.\n   * \n   * @remarks\n   * If not provided, {@link TinySynqOptionsBase.sqlite3} must be set.\n   */\n  filePath?: string;\n  /**\n   * Prefix to use for TinySynq tables (trailing underscores will be removed).\n   */\n  prefix: string;\n  /**\n   * Tables that should be synced between devices.\n   */\n  tables: SyncableTable[];\n  /**\n   * Maximum number of changes to process at once.\n   */\n  batchSize?: number;\n  /**\n   * Enable or disable WAL mode.\n   */\n  wal?: boolean;\n  /**\n   * Array of queries to run before TinySynq's change tracking is configured.\n   * \n   * @remarks\n   * Include create statements for syncable tables here.\n   */\n  preInit?: string[];\n  /**\n   * Array of queries to run after TinySynq's change tracking is configured\n   * \n   * @remarks\n   * You might place any insert queries here.\n   */\n  postInit?: string[];\n  /**\n   * Configure logging options.\n   * \n   * @remarks\n   * TinySynq uses TSLog for logging. All optiions are passed directly to it.\n   * See https://tslog.js.org/#/?id=settings for details\n   */\n  logOptions?: ISettingsParam<ILogObj>;\n  /**\n   * Enable/disable debug mode\n   * \n   * When enabled, all INSERT/UPDATE/DELETE actions on syncable tables are written \n   * to the *_dump table for inspection.\n   */\n  debug?: boolean;\n}\n\n/** \n * Constructor options TinySynq instance.\n * \n * Provide either an existing {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance (`sqlite3`) or the `filePath`.\n * \n * @public\n */\nexport interface TinySynqOptionsWithInstance extends TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   */\n  sqlite3: SQLiteWASM;\n}\n\nexport interface TinySynqOptionsWithFilePath extends TinySynqOptionsBase{\n  /**\n   * Path to SQLite3 database file.\n   */\n  filePath: string;\n}\n\n/** \n * {@inheritdoc TinySynqOptionsBase}\n * \n * @public\n */\nexport type TinySynqOptions = TinySynqOptionsWithInstance | TinySynqOptionsWithFilePath\n\nexport type SQLite3 = any\n\n/**\n * Basic query params for methods that read from/write to DB.\n * \n * @public\n */\nexport type QueryParams = {\n  sql: string;\n  values?: any;\n}\n\n/**\n * Table name and row parameters for retrieving data for a specific record.\n */\nexport interface TableNameRowParams {\n  table_name: string;\n  row_id: string;\n}\n\nexport interface ApplyChangeParams {\n  change: Change,\n  restore?: boolean,\n  savepoint: string\n}\n\nexport interface MetaRowData {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type VClock = {\n  [deviceId: string]: number;\n}\n\nexport enum TinySynqOperation {\n  'INSERT' = 'INSERT',\n  'UPDATE' = 'UPDATE',\n  'DELETE' = 'DELETE'\n}\n\n/**\n * Object transferred between devices to convey individual record changes.\n * \n * @public\n */\nexport interface Change {\n  /**\n   * Change record ID from central server.\n   */\n  id?: number;\n  /**\n   * Table name of the record that was modified.\n   */\n  table_name: string;\n  /**\n   * Row ID of the record that was modified.\n   */\n  row_id: string;\n  /**\n   * The type of operation that took place.\n   */\n  operation: keyof typeof TinySynqOperation;\n  /**\n   * The serialised object in the post-modified state. \n   */\n  data: string; // JSON string\n  /**\n   * Vector Clock holding all device values for the record, as known by the source device of the change.\n   */\n  vclock: VClock;\n  /**\n   * An ISO8601 formatted date and time that the change was recorded on the source device.\n   */\n  modified: string;\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { VClock } from \"./types.js\";\n\ntype VectorClockParams = {\n  local: VClock;\n  remote: VClock;\n  localId: string;\n}\n\ntype RemoteVClockParams = {\n  remote: VClock;\n}\n\nexport class VCompare { // @TODO: rename to VCompare\n\n  private local: VClock;\n  private isGreater = false;\n  private isLess = false;\n  private isWrongOrder = false;\n  private remote: VClock = {};\n  private localId: string;\n\n  constructor({ local, remote, localId }: VectorClockParams) {\n    this.local = local;\n    this.remote = typeof remote === 'string'\n      ? JSON.parse(remote)\n      : remote;\n    this.localId = localId;\n  }\n\n  setRemote({ remote }: RemoteVClockParams) {\n    this.remote = remote;\n  }\n\n  isConflicted(data?: RemoteVClockParams): boolean {\n    const remote = data?.remote || this.remote;\n    const keys = Object.keys({...this.local, ...remote});\n    keys.forEach(k => {\n      const localCount = this.local[k] || 0;\n      const remoteCount = remote[k] || 0;\n      this.isGreater = this.isGreater || localCount > remoteCount;\n      this.isLess = this.isLess || localCount < remoteCount;\n    });\n    \n    return this.isGreater && this.isLess;\n  }\n\n  isOutDated(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    // Locally changes have taken places that the remote is missing.\n    return local[localId] > remote[localId];\n  }\n\n  isOutOfOrder(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    const keys = Object.keys({...this.local, ...remote}).filter(k => k !== localId);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const drift = Math.abs((local[k] ?? 0) - (remote[k] ?? 0));\n      this.isWrongOrder = drift > 1;\n    }\n    return this.isWrongOrder;\n  }\n\n  merge() {\n    const merged: VClock = {};\n    const participants = new Set(Object.keys(this.local).concat(Object.keys(this.remote)));\n    // If the incoming participant vclock is lower, discard\n    for (const p of participants) {\n      const localP = this.local[p] || 0;\n      const remoteP = this.remote[p] || 0;\n      merged[p] = Math.max(localP, remoteP);\n    }\n    if (merged[this.localId] === undefined) {\n      merged[this.localId] = 0;\n    }\n    return merged;\n  }\n}","import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { ApplyChangeParams, Change, LogLevel, QueryParams, TinySynqOperation, TinySynqOptions, SyncableTable, TableNameRowParams, VClock } from './types.js';\nimport { Logger, ILogObj } from 'tslog';\nimport { VCompare } from './vcompare.class.js';\n\nconst log = new Logger({ name: 'tinysynq-web-init', minLevel: LogLevel.Info });\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\ntype PreProcessChangeOptions = {\n  change: Change, restore?: boolean\n}\n\ntype PreProcessChangeResult = { \n  valid: boolean;\n  reason: string;\n  vclock: VClock;\n  checks: Record<string, boolean>\n}\n\n/**\n * Basic utilities, mainly date-oriented.\n */\nexport type Utils = {\n  strtimeAsISO8601: string,\n  nowAsISO8601: string,\n  utcNowAsISO8601: () => string\n}\n\n/**\n * Parameters for retrieving table's ID column.\n * \n * @public\n */\nexport type GetTableIdColumnParams = {\n  table_name: string;\n}\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq {\n  private _db: any;\n  private _dbPath: string;\n  private _deviceId: string | undefined;\n  private _synqPrefix?: string;\n  private _synqTables?: Record<string, SyncableTable>;\n  private _synqBatchSize: number = 20;\n  private _wal = true;\n  private log: Logger<ILogObj>;\n\n  /**\n   * Basic Helpers.\n   * \n   * @TODO move to a separate file.\n   * \n   * @public\n   */\n  readonly utils: Utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date((new Date()).toUTCString()).toISOString();\n    }\n  }\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n    const _synqTables: Record<string, SyncableTable> = {};\n    opts.tables.forEach(t => {\n      _synqTables[t.name] = t;\n    })\n    this._dbPath = opts.filePath || '';\n    this._db = opts.sqlite3 || undefined;\n    this._synqPrefix = opts.prefix?.trim().replace(/[^a-z0-9]+$/i, '');\n    this._synqTables = _synqTables;\n    this._synqBatchSize = opts.batchSize || this._synqBatchSize;\n    this._wal = opts.wal ?? false;\n    this.log = new Logger({\n      name: 'tinysynq-node',\n      minLevel: LogLevel.Debug,\n      type: 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(opts.logOptions || {})\n    });\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbPath) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.log.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              this.log.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              this.log.debug(...args);\n            },\n            onunhandled: (event: any) => {\n              this.log.error('@UNHANDLED', event);\n            }\n          });\n        });\n        \n        this.log.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          this.log.debug(`open ${this.dbPath}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}?vfs=opfs`,\n          });\n  \n          this.log.info(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}`\n          });\n          this.log.info(\n            'OPFS not available, created in-memory database at',\n            res.result.filename, '$1'\n          );\n        }\n  \n        if (!res) return reject('Unable to start DB');\n\n        const { dbId } = res;\n        this._deviceId = dbId;\n        this.setDeviceId();\n      \n        const conf = await promiser('config-get', {});\n        this.log.info('Running SQLite3 version', conf.result.version.libVersion);\n        \n        this._db = promiser;\n    \n        // Set WAL mode if necessary\n        if (this._wal === true) {\n          await this.runQuery({\n            sql: `PRAGMA journal_mode=WAL;`\n          });\n        }\n        resolve(this);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        this.log.error(err.name, err.message);\n        this.log.error(err)\n        reject('DB setup failed.');\n      }\n    });\n  };\n\n  /**\n   * SQLiteWASM instance (See {@link https://github.com/sqlite/sqlite-wasm | SQLite Wasm})\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Path to DB file\n   * \n   * @example\n   * \n   * `./app.db` or `/tmp/app.db`\n   */\n  get dbPath() {\n    return this._dbPath;\n  }\n\n  /**\n   * Automatically generated ID for device's DB instance.\n   * \n   * @remarks\n   * \n   * This ID is used by the sync protocol to identify the database.\n   * One it is generated once during setup and does not change. The\n   * value is stored in the `_meta` table (`meta_name='device_id'`).\n   * __Do not edit this value; doing so would corrupt synchronisation__.\n   */\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  /**\n   * Alias for {@link TinySynq.deviceId}.\n   */\n  get synqDbId() {\n    return this._deviceId;\n  }\n\n  /**\n   * The prefix used for TinySynq's tables.\n   * \n   * @defaultValue `tinysynq`\n   */\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  /**\n   * Object containing {@link SyncableTable}s, keyed by table name.\n   * \n   * @remarks\n   * \n   * A {@link SyncableTable} structure is never modified. TinySynq maintains \n   * its own tables and triggers for tracking and responding to changes.\n   * \n   * @returns Record\\<string, SyncableTable\\>\n   */\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  /**\n   * Number of records to process in each batch when syncing changes. \n   */\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  /**\n   * Enable or disable WAL mode.\n   * \n   * @defaultValue true\n   */\n  get wal() {\n    return this._wal;\n  }\n\n  /**\n   * Get the column used as identifier for the {@link SyncableTable}.\n   * \n   * @param params - Details of table for which to retrieve ID column.\n   * @returns Column name\n   */\n  getTableIdColumn(params: GetTableIdColumnParams) {\n    const {table_name} = params;\n    return this.synqTables![table_name]?.id as string;\n  }\n\n  /**\n   * If not already set, generates and sets deviceId.\n   */\n  async setDeviceId() {\n    // Set the device ID\n    let existing: any;\n    try {\n      existing = (await this.runQuery<any[]>({\n        sql: `SELECT meta_value FROM ${this.synqPrefix}_meta WHERE meta_name = 'device_id'`\n      }))[0];\n    }\n    catch(err) {\n      this.log.warn(`Couldn't retrieve device ID`);\n    }\n\n    log.warn('@device_id', existing);\n    if (!existing?.meta_value) {\n      const res = await this.runQuery<any[]>({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES (?,?) RETURNING *`,\n        values: ['device_id', this.deviceId]\n      });\n      log.warn('@created record for device_id:', res);\n      existing = res[0];\n    }\n    this._deviceId = existing?.meta_value;\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @remarks\n   * This method does not return any records, only the result of the operation.\n   * \n   * @param params - The SQL query and optionally any values.\n   * @returns\n   */\n  async run<T = any>(params: QueryParams): Promise<T> {\n    return this.runQuery(params);\n  }\n\n  /**\n   * Run multiple operations against the DB\n   * \n   * @remarks\n   * This method does not return any records.\n   * \n   * @param params - The SQL query and optionally an array of arrays or key/value pairs\n   * @returns Undefined or an error, if one occurred\n   */\n  async runMany(params: {sql: string, values: any[]}) {\n    const {sql, values} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runMany', quid, sql, values, '/');\n    try {\n      const query = this.db.prepare(sql);\n      for (const v of values) {\n        query.run(v);\n      }\n      this.log.debug({quid, result: 'done'});\n    }\n    catch(err: any) {\n      this.log.error(quid, err);\n      return err;\n    }\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @param params - The SQL query and optionally any values\n   * @returns Array of records returned from the database\n   */\n  async runQuery<T = any>(params: QueryParams): Promise<T> {\n    const {sql, values} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', quid, sql, values, '/');\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql, // I think we can make this sexier, like in Minmail\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) {\n              this.log.debug('@runQuery RESOLVED', quid);\n              return resolve(results as any);\n            }\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        this.log.error(quid, err);\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Returns the current device's unique TinySynq ID.\n   * \n   * @returns The device's assigned ID.\n   */\n  async getDeviceId(): Promise<string> {\n    if (this._deviceId) return this._deviceId;\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'device_id'`\n    });\n    return res[0].meta_value;\n  }\n\n  /**\n   * Returns an ISO8601 formatted date and time of the last successful local sync.\n   * \n   * @remarks\n   * \n   * A \"local sync\" is the process of sending local changes to the remote hub.\n   * \n   * @returns The time of the last sync.\n   */\n  async getLastSync(): Promise<string> {\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    this.log.trace('@getLastSync', res[0]);\n    return res[0]?.meta_value;\n  }\n  \n  /**\n   * Returns matching {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChanges(params?: {lastLocalSync?: string, columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync: string = params?.lastLocalSync || await this.getLastSync();\n    let { columns = [] } = params || {};\n    this.log.debug('@getChanges', lastLocalSync);\n  \n    let where: string = '';\n    let columnSelection = columns\n      .map(c => c.replace(/[^*._a-z0-9]+/gi, ''))\n      .join(',') || '*';\n  \n    if (lastLocalSync) {\n      where = 'WHERE c.modified > ?'\n    }\n    const sql = `\n      SELECT ${columnSelection}\n      FROM ${this._synqPrefix}_changes c\n      INNER JOIN ${this._synqPrefix}_record_meta trm\n      ON trm.table_name = c.table_name\n      AND trm.row_id = c.row_id\n      ${where}\n      ORDER BY c.modified ASC\n    `;\n    console.log(sql)\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  /**\n   * Returns {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChangesSinceLastSync(params?: {columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync = await this.getLastSync() || undefined;\n    return this.getChanges({...params, lastLocalSync});\n  };\n\n  /**\n   * Writes debug mode value (true) which disables recording \n   * of operations on syncable tables.\n   * \n   * @remarks\n   * \n   * The value set by this method is checked by dedicated triggers.\n   * If the value is `1`, the active trigger writes the data to the\n   * `*_dump` table. It's worth purging the table data once done \n   * with debugging.\n   * \n   * @returns Result of the operation.\n   */\n  async enableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Writes debug mode value (false) which disables recording \n   * of operations on syncable tables.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   * \n   * @returns Result of the operation.\n   */\n  async disableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Empties the `*_dump` table.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   */\n  async clearDebugData() {\n    await this.run({sql: `DELETE FROM ${this._synqPrefix}_dump`});\n    await this.run({sql: `UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = ${this._synqPrefix}_dump`});\n  }\n  \n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private enableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');`\n    });\n  }\n\n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private async disableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');`\n    });\n  }\n\n  async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.run({sql});\n    return savepoint;\n  }\n\n  async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  /**\n   * Retrieves a single record.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  private async getRecord<T>(params: TableNameRowParams): Promise<T | any> {\n    const {table_name, row_id} = params;\n    const idCol = this.getTableIdColumn({table_name: table_name});\n    const sql = `SELECT * FROM ${table_name} WHERE ${idCol} = ?`;\n    const res = await this.runQuery({sql, values: [row_id]});\n    this.log.debug('@getRecord', res);\n    return res[0];\n  }\n\n  /**\n   * Retrieves a single record by it's ID.\n   * \n   * @remarks\n   * \n   * The column used to identify the record is according to the {@link SyncableTable}\n   * that was provided in {@link TinySynqOptionsBase.tables} at instantiation.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  async getById<T>(params: TableNameRowParams): Promise<T | any> {\n    const{table_name, row_id} = params;\n    return this.getRecord({table_name, row_id});\n  }\n\n  async insertRecordMeta({change, vclock}: any) {\n    //this.log.warn('<<< @insertRecordMeta >>>', {change, vclock});\n    const { table_name, row_id } = change;\n    const mod = vclock[this._deviceId!] || 0;\n    const values = {\n      table_name,\n      row_id,\n      mod,\n      vclock: JSON.stringify(vclock)\n    };\n    return this.runQuery({\n      sql: `\n      INSERT INTO ${this._synqPrefix}_record_meta (table_name, row_id, mod, vclock)\n      VALUES (:table_name, :row_id, :mod, :vclock)\n      ON CONFLICT DO UPDATE SET mod = :mod, vclock = :vclock\n      RETURNING *\n      `,\n      values,\n    });\n  }\n\n  /**\n   * Get associated meta data (including `vclock`) for record.\n   * \n   * @param params - Object containing table/row parameters.\n   * \n   * @returns Object containing row data from `*_record_meta`.\n   */\n  async getRecordMeta(params: {table_name: string, row_id: string}) {\n    const {table_name, row_id} = params;\n    const sql = `\n    SELECT *\n    FROM ${this.synqPrefix}_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id`;\n    const res = await this.db.prepare(sql).get({table_name, row_id});\n    return res;\n  }\n\n  /**\n   * Returns changes that couldn't be applied yet because they\n   * were received out of sequence.\n   * \n   * @returns Array of pending changes.\n   */\n  async getPending() {\n    const sql = `\n    SELECT *\n    FROM ${this._synqPrefix}_pending\n    ORDER BY id ASC\n    `;\n    const res = await this.runQuery({sql});\n    return res;\n  }\n\n  /**\n   * Creates new pending record to be applied later.\n   * \n   * @param opts - Options for processing out-of-order change\n   * @returns Newly created pending record\n   */\n  private async processOutOfOrderChange({change}: {change: Change}) {\n    const {id, ...data} = change;\n    const sql = this.createInsertFromSystemObject({\n      data,\n      table_name: `${this._synqPrefix}_pending`,\n    });\n    this.log.trace('@processOutOfOrderChange\\n', sql, change);\n    const values: any = { ...data};\n    values.vclock = JSON.stringify(data.vclock);\n    const res = await this.runQuery({sql, values});\n    this.log.trace('@processOutOfOrderChange\\n', {res});\n    return res;\n  }\n\n  /**\n   * Determines whether to treat conflicted change as valid or invalid.\n   * \n   * @param opts - Options for processing concurrent change\n   * @returns boolean \n   */\n  private async processConflictedChange<T>({ record, change }: {record: T|any, change: Change}): Promise<boolean> {\n    const localMeta = await this.getRecordMeta({...change});\n    this.log.trace('<<<@ processConflictedChange LLW @>>>', change.id, change.table_name, change.row_id, {record, localMeta, change});\n    if (change.modified > localMeta.modified) {\n      this.log.trace('<!> INTEGRATING REMOTE', change.id, change.table_name, change.row_id);\n      // Update local with the incoming changes\n      return true;\n    }\n    else {\n      this.log.warn('<!> KEEPING LOCAL', change.id, change.table_name, change.row_id);\n      // Keep the local change, but record receipt of the record.\n      return false;\n    }\n  }\n\n  /**\n   * Checks for and handles issues with incoming change to be applied.\n   * \n   * @returns Result of pre-processing.\n   */\n  private async preProcessChange(\n    {change, restore}: PreProcessChangeOptions\n  ): Promise<PreProcessChangeResult> {\n    let defaultReason = 'unknown';\n    let valid = false;\n    let reason = defaultReason;\n    const localId = this.deviceId!;\n    const { table_name, row_id, vclock: remote = {} } = change;\n    const record = await this.getRecord({table_name, row_id});\n    const meta = await this.getRecordMeta({table_name, row_id});\n    const local = meta?.vclock ? JSON.parse(meta.vclock) : {};\n\n    let latest: VClock = {};\n    const localV = new VCompare({ local, remote, localId });\n    let displaced = false;\n    let conflicted = false;\n    let stale = false;\n\n    // If we don't have the record, treat it as new\n    if (!restore && !record && change.operation !== TinySynqOperation.INSERT) {\n      reason = 'update before insert';\n      this.processOutOfOrderChange({change});\n    }\n    else if (restore || !record || !local || !local[localId]) {\n      latest = change.vclock;\n    }\n    \n    validationCondition:\n    if (restore) {\n      valid = true;\n      reason = 'restoration';\n      latest = localV.merge();\n      break validationCondition;\n    }\n    else if (displaced = localV.isOutOfOrder()) {  \n      reason = 'received out of order';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (conflicted = localV.isConflicted()) {\n      valid = await this.processConflictedChange({record, change});\n      if (!valid) {\n        reason = 'concurrent writes'; \n      }\n      else {\n        latest = localV.merge();\n      }\n    }\n    else if (stale = localV.isOutDated()) {\n      reason = 'stale';\n    }\n    else if (reason === defaultReason) {\n      valid = true;\n      reason = '';\n      latest = localV.merge();\n    }\n\n    this.log.debug({table_name, row_id, conflicted, displaced, stale});\n\n    return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n  }\n\n  /**\n   * Creates an insert query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string.\n   */\n  createInsertFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    const columnsToInsert = Object.keys(data).join(',');\n    const editable = this._synqTables![table].editable;\n    const updates = Object.keys(data)\n      .filter(key => editable.includes(key))\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  /**\n   * Creates an insert query based on the system table name and data provided.\n   *  \n   * @param param0 - Parameters from which to create the query.\n   * \n   * @returns A SQL query string. \n   */\n  private createInsertFromSystemObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    this.log.silly('@createInsert...', {data});\n    const columnsToInsert = Object.keys(data).join(',');\n    const updates = Object.keys(data)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  private async updateLastSync({change}: {change: Change}) {\n    const sql = `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, :value)`;\n    const data = [\n      { name: 'last_local_sync', value: `STRFTIME('%Y-%m-%d %H:%M:%f','NOW')`},\n      { name: 'last_sync', value: change.id }\n    ];\n    for (const values of data) {\n      await this.runQuery({sql, values});\n    };\n  }\n\n  private async applyChange({\n    change,\n    restore,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      // Check that the changes can actually be applied\n      const changeStatus = await this.preProcessChange({change, restore});\n      if (!changeStatus.valid) {\n        this.log.warn(changeStatus);\n        this.updateLastSync({change});\n        return;\n      }\n\n      const table = this.synqTables![change.table_name];\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n      else {\n        // There's no data so bail\n        throw new Error(`Cannot perform update with empty data:\\n${JSON.stringify(change, null, 2)}`);\n      }\n \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n      this.log.silly('@applyChange', {change, table, changeStatus});\n      switch(change.operation) {\n        case 'INSERT':\n        case 'UPDATE':\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          await this.run({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          this.log.warn('>>> DELETE SQL <<<', sql, change.row_id);\n          await this.run({sql, values: [change.row_id]});\n          break;\n      }\n\n      await this.updateLastSync({change});\n\n      // Insert merged VClock data\n      const updatedRecordMeta = await this.insertRecordMeta({change, vclock: changeStatus.vclock});\n      this.log.silly({updatedRecordMeta});\n    }\n    catch (error) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}. Rolled back.`);\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB({ changes, restore = false }: { changes: Change[], restore?: boolean }) {\n    await this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, restore, savepoint})\n        }\n\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    await this.enableTriggers();\n    this.log.silly(`Applied ${changes.length} change(s)`);\n  };\n\n  async tablesReady(): Promise<void> {\n    await this.enableTriggers();\n  }\n}","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, SyncableTable } from \"./types.js\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst setupDatabase = async (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysynq-setup', ...logOptions});\n  const db = new TinySynq(config);\n\n  /**\n   * Pretty important: make sure to call `init()` :-)\n   */\n\n  await db.init();\n\n  const getRecordMetaInsertQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    /* \n    db.is kind of insane, but it works. A rundown of what's happening:\n    - We're creating a trigger after a deletion (the easy part)\n    - Aside from recording the changes, we also need to add record-specific metadata:\n      - table name and row identifier,\n      - the number of times the record has been touched (including creation)\n      - the map of all changes across all devices — a Vector Clock (JSON format)\n    - Getting the vector clock is tricky, partly because of SQLite limitations\n      (no variables, control structures), and partly because it's possible that\n      no meta exists for the record.\n    - To work around db.we do a select to get the meta, but perform a union with\n      another select that just selects insert values.\n    - Included in both selects is\n      a 'peg' which we use to sort the UNIONed rows to ensure that if a valid row\n      exists, it's the first row returned.\n    - Now we select from db.union and limit to 1 result. If a record exists\n      then we get that record. If not, we get the values ready for insertion.\n    - Finally, if there's a conflict on PRIMAY KEY or UNIQUE contraints, we update\n      only the columns configured as editable.\n    */\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n    INSERT INTO ${db.synqPrefix}_record_meta (table_name, row_id, mod, vclock)\n    SELECT table_name, row_id, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '${table.name}' as table_name,\n        ${version}.${table.id} as row_id, \n        IFNULL(json_extract(vclock,'$.${db.deviceId}'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$.${db.deviceId}', IFNULL(json_extract(vclock,'$.${db.deviceId}'), 0) + 1) as vclock\n      FROM ${db.synqPrefix}_record_meta\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id}\n      UNION\n      SELECT 0 as peg, '${table.name}' as table_name, ${version}.${table.id} as row_id, 1, json_object('${db.deviceId}', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      mod = json_extract(excluded.vclock,'$.${db.deviceId}'),\n      vclock = json_extract(excluded.vclock,'$')\n    ;`;\n    log.silly(sql);\n    return sql;\n  }\n\n  const setupTriggersForTable = async ({ table }: { table: SyncableTable }) => {\n    log.debug('Setting up triggers for', table.name);\n\n    // Template for inserting the new value as JSON in the `*_changes` table.\n    const jsonObject = (await db.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    log.silly('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    /**\n     * These triggers run for changes originating locally. They are disabled\n     * when remote changes are being applied (`triggers_on` in `*_meta` table).\n     */\n\n    // Ensure triggers are up to date\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_insert_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_update_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n      END;`\n    await db.run({sql});\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n        \n        ${getRecordMetaInsertQuery({table, remove: true})}\n      END;`\n    });\n\n    /**\n     * All the triggers below will only be executed if `meta_name=\"debug_on\"`\n     * has the `meta_value=1` in the *_meta table, regardless of `triggers_on`.\n     */\n\n    // Remove previous versions\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_insert_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_update_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_delete_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_before_insert_record_meta`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_insert_record_meta`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_update_record_meta`});\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow a rudimentary tracing of DB actions on the synced tables.\n     */\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'INSERT', ${jsonObject.jo});\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    const oldJsonObject = jsonObject.jo.replace(/NEW/g, 'OLD');\n    \n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'DELETE', ${oldJsonObject});\n      END;`\n    });\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow comparison record meta before and after insert.\n     */\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_before_insert_record_meta\n      BEFORE INSERT ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_insert_record_meta\n      AFTER INSERT ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_update_record_meta\n      AFTER UPDATE ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    /* END OF DEBUG TRIGGERS */\n  }\n\n  // Create a change-tracking table and index\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await db.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_change_modified_idx ON ${db.synqPrefix}_changes(modified)`\n  });\n\n  // Change *_pending is essentially a clone of *_changes used to hold items that\n  // cannot be applied yet because intermediate/preceding changes haven't been received.\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      vclock BLOB NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await db.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_pending_table_row_idx ON ${db.synqPrefix}_pending(table_name, row_id)`\n  });\n\n  // Create a notice table\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  }); \n\n  // Create record meta table and index\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  });\n\n  await db.run({\n    sql:`CREATE UNIQUE INDEX IF NOT EXISTS ${db.synqPrefix}_record_meta_idx ON ${db.synqPrefix}_record_meta(table_name, row_id)`\n  });\n\n  // Create meta table\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  `});\n\n  await db.run({\n    sql: `\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  `});\n\n  await db.run({\n    sql: `CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_meta_name_idx ON ${db.synqPrefix}_meta(meta_name)`\n  });\n  \n  // Enable debug mode\n  if (debug) await db.enableDebug();\n\n  // Set the device ID\n  await db.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n      await db.run({\n        sql: preInitQuery\n      });\n    }\n  }\n\n  log.debug(`@${db.synqPrefix}_meta`, db.runQuery({sql:`SELECT * FROM pragma_table_info('${db.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, db.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = await db.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    log.debug('@exists?', table.name, exists);\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    await setupTriggersForTable({ table });\n    db.tablesReady();\n  }\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.debug(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      await db.run({\n        sql: postInitQuery\n      });\n    }\n  }\n\n  return db;\n};\n\nexport default setupDatabase;"],"names":["TinySynqOperation","LogLevel","VCompare","_ref","local","remote","localId","isGreater","this","isLess","isWrongOrder","JSON","parse","_proto","prototype","setRemote","_ref2","isConflicted","data","_this","Object","keys","_extends","forEach","k","localCount","remoteCount","isOutDated","Error","isOutOfOrder","filter","i","length","_local$k","_remote$k","drift","Math","abs","merge","_step","merged","_iterator","_createForOfIteratorHelperLoose","Set","concat","done","p","value","max","undefined","recover","e","result","then","_iteratorSymbol","Symbol","iterator","_Pact","s","o","_settle","bind","pact","state","v","observer","onRejected","onFulfilled","_isSettledPact","thenable","log","Logger","name","minLevel","Info","_forOf","target","body","check","step","next","_fixup","TypeError","values","push","array","reject","_forTo","strtimeAsISO8601","TinySynq","opts","_opts$prefix","_opts$wal","_db","_dbPath","_deviceId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","Date","toUTCString","toISOString","filePath","sqlite3","tables","t","prefix","trim","replace","batchSize","wal","Debug","type","maskValuesOfKeys","hideLogPositionForProduction","logOptions","init","_this2","db","Promise","resolve","dbPath","_catch","debug","res","_promiser","sqlite3Worker1Promiser","onready","onerror","err","error","_this$log","apply","slice","call","arguments","onunhandled","event","promiser","_temp4","dbId","setDeviceId","conf","_temp2","info","version","libVersion","_temp","runQuery","sql","_temp3","filename","_promiser2","_promiser3","message","getTableIdColumn","params","_this$synqTables$tabl","synqTables","table_name","id","existing","_temp8","_temp6","_existing","_this3","meta_value","warn","_temp5","_existing2","synqPrefix","deviceId","_temp7","_this3$runQuery","run","runMany","_this5","quid","ceil","random","query","prepare","_this6","synqDbId","results","callback","row","col","columnNames","getDeviceId","_this7","getLastSync","_this8","_res$","trace","getChanges","_temp9","lastLocalSync","_ref$columns","columns","_this9","where","columnSelection","map","c","join","console","_params$lastLocalSync","getChangesSinceLastSync","_this10","enableDebug","_this11","disableDebug","clearDebugData","_this13","enableTriggers","disableTriggers","_this14","beginTransaction","savepoint","now","commitTransaction","rollbackTransaction","_ref3","getRecord","_this18","row_id","idCol","getById","insertRecordMeta","_ref4","change","vclock","_this20","mod","stringify","getRecordMeta","get","getPending","processOutOfOrderChange","_ref5","_this23","_objectWithoutPropertiesLoose","_excluded","createInsertFromSystemObject","processConflictedChange","_ref6","record","_this24","localMeta","modified","preProcessChange","_ref7","restore","_this25","defaultReason","reason","_change$vclock","meta","localV","operation","INSERT","_temp12","_temp13","_temp14","_this25$processConfli","createInsertFromObject","_ref8","table","columnsToInsert","editable","updates","key","includes","_ref9","silly","updateLastSync","_ref10","_this26","_temp15","applyChange","_ref11","_this27","changeStatus","_temp17","updatedRecordMeta","valid","recordData","_temp16","awaitBody","dispatchIndex","cases","test","testValue","outer","fallthroughCheck","_resumeAfterBody","_resumeAfterTest","discriminant","_switch","insertSql","_interrupt","applyChangesToLocalDB","_ref12","changes","_ref12$restore","_this28","_temp22","_temp21","shouldContinue","stage","updateValue","_resumeAfterUpdate","update","_for","synqBatchSize","batch","_temp20","_temp19","_temp18","tablesReady","_createClass","_cycle","return","config","preInit","postInit","getRecordMetaInsertQuery","_ref$remove","remove","_result","postInitQuery","exists","_db$runQuery","jsonObject","jo","oldJsonObject","setupTriggersForTable","_exit","preInitQuery"],"mappings":"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"}