{"version":3,"file":"tinysynq.umd.js","sources":["../src/lib/types.ts","../src/lib/vcompare.class.ts","../src/lib/tinysynq.class.ts","../src/lib/index.ts","../src/lib/client.ts","../src/lib/trigger.ts"],"sourcesContent":["import { ISettingsParam, ILogObj } from 'tslog';\n\n/**\n * A {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance.\n * \n * @public\n */\nexport type SQLiteWASM = any\n\n/**\n * Provided to TinySynq constructor.\n * \n * @public\n */\nexport interface SyncableTable {\n  /**\n   * Table name.\n   */\n  name: string;\n  /**\n   * Row identifier; typically the column used as primary key.\n   */\n  id: string;\n  /**\n   * Columns that can be updated by a sync-based change.\n   */\n  editable: string[];\n}\n\n/**\n * Base options for TinySynq constructor.\n * \n * @public\n */\nexport interface TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   * \n   * @remarks\n   * \n   * If not provided, {@link TinySynqOptionsBase.filePath} must be set.\n   * \n   */\n  sqlite3?: SQLiteWASM;\n  /**\n   * Path to SQLite3 database file.\n   * \n   * @remarks\n   * If not provided, {@link TinySynqOptionsBase.sqlite3} must be set.\n   */\n  filePath?: string;\n  /**\n   * Prefix to use for TinySynq tables (trailing underscores will be removed).\n   */\n  prefix: string;\n  /**\n   * Tables that should be synced between devices.\n   */\n  tables: SyncableTable[];\n  /**\n   * Maximum number of changes to process at once.\n   */\n  batchSize?: number;\n  /**\n   * Enable or disable WAL mode.\n   */\n  wal?: boolean;\n  /**\n   * Array of queries to run before TinySynq's change tracking is configured.\n   * \n   * @remarks\n   * Include create statements for syncable tables here.\n   */\n  preInit?: string[];\n  /**\n   * Array of queries to run after TinySynq's change tracking is configured\n   * \n   * @remarks\n   * You might place any insert queries here.\n   */\n  postInit?: string[];\n  /**\n   * Configure logging options.\n   * \n   * @remarks\n   * TinySynq uses TSLog for logging. All optiions are passed directly to it.\n   * See https://tslog.js.org/#/?id=settings for details\n   */\n  logOptions?: ISettingsParam<ILogObj>;\n  /**\n   * Enable/disable debug mode\n   * \n   * When enabled, all INSERT/UPDATE/DELETE actions on syncable tables are written \n   * to the *_dump table for inspection.\n   */\n  debug?: boolean;\n}\n\n/** \n * Constructor options TinySynq instance.\n * \n * Provide either an existing {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance (`sqlite3`) or the `filePath`.\n * \n * @public\n */\nexport interface TinySynqOptionsWithInstance extends TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   */\n  sqlite3: SQLiteWASM;\n}\n\nexport interface TinySynqOptionsWithFilePath extends TinySynqOptionsBase{\n  /**\n   * Path to SQLite3 database file.\n   */\n  filePath: string;\n}\n\n/** \n * {@inheritdoc TinySynqOptionsBase}\n * \n * @public\n */\nexport type TinySynqOptions = TinySynqOptionsWithInstance | TinySynqOptionsWithFilePath\n\nexport type SQLite3 = any\n\n/**\n * Basic query params for methods that read from/write to DB.\n * \n * @public\n */\nexport type QueryParams = {\n  sql: string;\n  values?: any;\n  prefix?: string;\n}\n\n/**\n * Table name and row parameters for retrieving data for a specific record.\n */\nexport interface TableNameRowParams {\n  table_name: string;\n  row_id: string;\n}\n\nexport interface ApplyChangeParams {\n  change: Change,\n  restore?: boolean,\n  savepoint: string\n}\n\nexport interface MetaRowData {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type VClock = {\n  [deviceId: string]: number;\n}\n\nexport enum TinySynqOperation {\n  'INSERT' = 'INSERT',\n  'UPDATE' = 'UPDATE',\n  'DELETE' = 'DELETE'\n}\n\n/**\n * Object transferred between devices to convey individual record changes.\n * \n * @public\n */\nexport interface Change {\n  /**\n   * Change record ID from central server.\n   */\n  id?: number;\n  /**\n   * Table name of the record that was modified.\n   */\n  table_name: string;\n  /**\n   * Row ID of the record that was modified.\n   */\n  row_id: string;\n  /**\n   * The type of operation that took place.\n   */\n  operation: keyof typeof TinySynqOperation;\n  /**\n   * The serialised object in the post-modified state. \n   */\n  data: string; // JSON string\n  /**\n   * Vector Clock holding all device values for the record, as known by the source device of the change.\n   */\n  vclock: VClock;\n  /**\n   * An ISO8601 formatted date and time that the change was recorded on the source device.\n   */\n  modified: string;\n}\n\ninterface BaseLatestChangesOptions {\n  /**\n   * A device ID whose changes should be excluded from retrieval (usually the requester).\n   */\n  exclude?: string;\n\n  since?: string;\n\n  checkpoint?: number;\n}\n\ninterface LatestChangesWithSince extends BaseLatestChangesOptions {\n  /**\n   * An ISO8601 date string. Providing this will limit retrieved changes to this date/time onwards.\n   */\n  since: string;\n\n}\n\ninterface LatestChangesWithCheckpoint extends BaseLatestChangesOptions {\n  /**\n   * A server-specific change ID.\n   * \n   * @remarks\n   * \n   * When provided it will limit retrieved changes to those _after_ the specified change ID.\n   * The change ID is specific to the hub/root server (of which there should be only one).\n   */\n  checkpoint: number;\n}\n\nexport type LatestChangesOptions = LatestChangesWithSince | LatestChangesWithCheckpoint\n\nexport enum SyncRequestType {\n  push = 'push',\n  pull = 'pull'\n}\n\nexport enum SyncResponseType {\n  ack = 'ack',\n  nack = 'nack'\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { VClock } from \"./types.js\";\n\ntype VectorClockParams = {\n  local: VClock;\n  remote: VClock;\n  localId: string;\n  localTime: string;\n  remoteTime: string;\n}\n\ntype RemoteVClockParams = {\n  remote: VClock;\n}\n\nexport class VCompare {\n\n  private local: VClock;\n  private isGreater = false;\n  private isLess = false;\n  private isWrongOrder = false;\n  private remote: VClock = {};\n  private localId: string;\n  private localTime: string;\n  private remoteTime: string;\n\n  constructor({ local, remote, localId, localTime, remoteTime }: VectorClockParams) {\n    this.local = local;\n    this.remote = typeof remote === 'string'\n      ? JSON.parse(remote)\n      : remote;\n    this.localId = localId;\n    this.localTime = localTime;\n    this.remoteTime = remoteTime;\n  }\n\n  setRemote({ remote }: RemoteVClockParams) {\n    this.remote = remote;\n  }\n\n  isConflicted(data?: RemoteVClockParams): boolean {\n    const remote = data?.remote || this.remote;\n    const keys = Object.keys({...this.local, ...remote});\n    keys.forEach(k => {\n      const localCount = this.local[k] || 0;\n      const remoteCount = remote[k] || 0;\n      this.isGreater = this.isGreater || localCount > remoteCount;\n      this.isLess = this.isLess || localCount < remoteCount;\n    });\n    return this.isGreater && this.isLess;\n  }\n\n  isOutDated(): boolean {\n    // Default localTime to any early date so that \n    // remote always wins when local is empty.\n    const { remoteTime, localTime = '1970-01-01' } = this;\n    console.debug('\\n\\n::: isOutDated() :::', JSON.stringify({localTime, remoteTime, local: this.local, remote: this.remote}, null, 1), '\\n\\n::: /isOutDated() :::');\n    if (!remoteTime || !localTime) throw new Error('Missing modified time');\n    return new Date(localTime) >= new Date(remoteTime);\n  }\n\n  isOutOfOrder(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    const keys = Object.keys({...this.local, ...remote}).filter(k => k !== localId);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const drift = Math.abs((local[k] ?? 0) - (remote[k] ?? 0));\n      this.isWrongOrder = drift > 1;\n    }\n    return this.isWrongOrder;\n  }\n\n  merge() {\n    const merged: VClock = {};\n    const participants = new Set(Object.keys(this.local).concat(Object.keys(this.remote)));\n    // If the incoming participant vclock is lower, discard\n    for (const p of participants) {\n      const localP = this.local[p] || 0;\n      const remoteP = this.remote[p] || 0;\n      merged[p] = Math.max(localP, remoteP);\n    }\n    if (merged[this.localId] === undefined) {\n      merged[this.localId] = 0;\n    }\n    return merged;\n  }\n}","import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { ApplyChangeParams, Change, LogLevel, QueryParams, TinySynqOperation, TinySynqOptions, SyncableTable, TableNameRowParams, VClock, LatestChangesOptions } from './types.js';\nimport { Logger, ILogObj } from 'tslog';\nimport { VCompare } from './vcompare.class.js';\nimport { nanoid } from 'nanoid';\n\nconst log = new Logger({ name: 'tinysynq-web-init', minLevel: LogLevel.Info });\nconst strftimeAsISO8601 = `STRFTIME('%Y-%m-%d %H:%M:%f','NOW')`;\n\ntype PreProcessChangeOptions = {\n  change: Change, restore?: boolean\n}\n\ntype PreProcessChangeResult = { \n  valid: boolean;\n  reason: string;\n  vclock: VClock;\n  meta?: any;\n  checks: Record<string, boolean>\n}\n\n/**\n * Basic utilities, mainly date-oriented.\n */\nexport type Utils = {\n  strftimeAsISO8601: string,\n  nowAsISO8601: string,\n  utcNowAsISO8601: () => string,\n  isSafeISO8601: (date: string) => boolean\n}\n\n/**\n * Parameters for retrieving table's ID column.\n * \n * @public\n */\nexport type GetTableIdColumnParams = {\n  table_name: string;\n}\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq extends EventTarget {\n  private _db: any;\n  private _dbPath: string;\n  private _deviceId: string | undefined;\n  private _synqPrefix?: string;\n  private _synqTables?: Record<string, SyncableTable>;\n  private _synqBatchSize: number = 20;\n  private _wal = true;\n  private log: Logger<ILogObj>;\n\n  /**\n   * Basic Helpers.\n   * \n   * @TODO move to a separate file.\n   * \n   * @public\n   */\n  readonly utils: Utils = {\n    strftimeAsISO8601,\n    nowAsISO8601: strftimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date().toISOString().replace(/[TZ]/g, ' ').trim();\n    },\n    isSafeISO8601: (date: string) => {\n      return (/^\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,3})?$/.test(date));\n    },\n  }\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    super();\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n    const _synqTables: Record<string, SyncableTable> = {};\n    opts.tables.forEach(t => {\n      _synqTables[t.name] = t;\n    })\n    this._dbPath = opts.filePath || '';\n    this._db = opts.sqlite3 || undefined;\n    this._synqPrefix = opts.prefix?.trim().replace(/[^a-z0-9]+$/i, '');\n    this._synqTables = _synqTables;\n    this._synqBatchSize = opts.batchSize || this._synqBatchSize;\n    this._wal = opts.wal ?? false;\n    this.log = new Logger({\n      name: 'tinysynq-node',\n      minLevel: opts.logOptions?.minLevel ?? LogLevel.Info,\n      type: opts.logOptions?.type || 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(opts.logOptions || {})\n    });\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbPath) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.log.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              this.log.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              this.log.debug(...args);\n            },\n            onunhandled: (event: any) => {\n              this.log.error('@UNHANDLED', event);\n            }\n          });\n        });\n        \n        this.log.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          this.log.debug(`open ${this.dbPath}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}?vfs=opfs`,\n          });\n  \n          this.log.info(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}`\n          });\n          this.log.info(\n            `OPFS not available, created in-memory database at ${res.result.filename}`\n          );\n        }\n\n        if (!res) return reject('Unable to start DB');\n        \n        const { dbId } = res;      \n        const conf = await promiser('config-get', {});\n        this.log.info('Running SQLite3 version', conf.result.version.libVersion);\n        this._db = promiser;\n        this._deviceId = dbId;\n        this.setDeviceId();\n    \n        // Set WAL mode if necessary\n        if (this._wal === true) {\n          await this.runQuery({\n            sql: `PRAGMA journal_mode=WAL;`\n          });\n        }\n        const timeout = 5000; // If it hasn't loaded in 5 seconds, it ain't loadin'.\n        let waited = 0;\n        let increment = 50;\n        const interval = setInterval(() => {\n          waited += increment;\n          if (this.db) {\n            clearInterval(interval);\n            this.dispatchEvent(new CustomEvent('ready'));\n            return resolve(this);\n          }\n\n          if (waited >= timeout && !this._db) {\n            this.log.error('@db', this.db)\n            clearInterval(interval);\n            return reject(`TinySynq failed to load. (waited ${waited}ms`);\n          }\n          this.log.error('::: Impossible. :::');\n        }, increment);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        this.log.error(err.name, err.message);\n        this.log.error(err)\n        reject('DB setup failed.');\n      }\n    });\n  };\n\n  /**\n   * SQLiteWASM instance (See {@link https://github.com/sqlite/sqlite-wasm | SQLite Wasm})\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Path to DB file\n   * \n   * @example\n   * \n   * `./app.db` or `/tmp/app.db`\n   */\n  get dbPath() {\n    return this._dbPath;\n  }\n\n  /**\n   * Automatically generated ID for device's DB instance.\n   * \n   * @remarks\n   * \n   * This ID is used by the sync protocol to identify the database.\n   * One it is generated once during setup and does not change. The\n   * value is stored in the `_meta` table (`meta_name='device_id'`).\n   * __Do not edit this value; doing so would corrupt synchronisation__.\n   */\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  /**\n   * Alias for {@link TinySynq.deviceId}.\n   */\n  get synqDbId() {\n    return this._deviceId;\n  }\n\n  /**\n   * The prefix used for TinySynq's tables.\n   * \n   * @defaultValue `tinysynq`\n   */\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  /**\n   * Object containing {@link SyncableTable}s, keyed by table name.\n   * \n   * @remarks\n   * \n   * A {@link SyncableTable} structure is never modified. TinySynq maintains \n   * its own tables and triggers for tracking and responding to changes.\n   * \n   * @returns Record\\<string, SyncableTable\\>\n   */\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  /**\n   * Number of records to process in each batch when syncing changes. \n   */\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  /**\n   * Enable or disable WAL mode.\n   * \n   * @defaultValue true\n   */\n  get wal() {\n    return this._wal;\n  }\n\n  /**\n   * Get a random 16-character ID generated by nanoid\n   * \n   * @returns string\n   */\n  getNewId() {\n    return nanoid(16);\n  }\n\n  /**\n   * Get the column used as identifier for the {@link SyncableTable}.\n   * \n   * @param params - Details of table for which to retrieve ID column.\n   * @returns Column name\n   */\n  getTableIdColumn(params: GetTableIdColumnParams) {\n    const {table_name} = params;\n    return this.synqTables![table_name]?.id as string;\n  }\n\n  /**\n   * If not already set, generates and sets deviceId.\n   */\n  async setDeviceId() {\n    // Set the device ID\n    let existing: any;\n    try {\n      existing = (await this.runQuery<any[]>({\n        sql: `SELECT meta_value FROM ${this.synqPrefix}_meta WHERE meta_name = 'device_id'`\n      }))[0];\n    }\n    catch(err) {\n      this.log.warn(`Couldn't retrieve device ID`);\n    }\n\n    log.warn('@device_id', existing);\n    if (!existing?.meta_value) {\n      const res = await this.runQuery<any[]>({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES (?,?) RETURNING *`,\n        values: ['device_id', this.deviceId]\n      });\n      log.warn('@created record for device_id:', res);\n      existing = res[0];\n    }\n    this._deviceId = existing?.meta_value;\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @remarks\n   * This method does not return any records, only the result of the operation.\n   * \n   * @param params - The SQL query and optionally any values.\n   * @returns\n   */\n  async run<T = any>(params: QueryParams): Promise<T> {\n    return this.runQuery(params);\n  }\n\n  /**\n   * Run multiple operations against the DB\n   * \n   * @remarks\n   * This method does not return any records.\n   * \n   * @param params - The SQL query and optionally an array of arrays or key/value pairs\n   * @returns Undefined or an error, if one occurred\n   */\n  async runMany(params: QueryParams) {\n    const {sql, values, prefix = ':'} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    const dbId = this.synqDbId;\n    this.log.debug('@runMany', {quid, sql, values});\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (const v of values) {\n          const bind = this.reformatQueryValues({values: v, prefix});\n          await this.db('exec', {dbId, sql, bind});\n        }\n      }\n      catch(err) {\n        this.log.error({quid, err, stack: (err as Error).stack});\n        reject(err);\n      }\n      resolve(true);\n    });\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @param params - The SQL query and optionally any values\n   * @returns Array of records returned from the database\n   */\n  async runQuery<T = any>(params: QueryParams): Promise<T> {\n    if (!this._db) {\n      const interval = setInterval(async () => {\n        if (!this._db) return;\n        clearInterval(interval);\n      }, 50);\n    }\n    const {sql, prefix = ':'} = params;\n    const values = this.reformatQueryValues({values: params.values, prefix});\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', quid, sql, values, '/');\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql,\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) {\n              this.log.debug('@runQuery RESOLVED', results.length, quid);\n              this.log.trace(sql, values);\n              return resolve(results as any);\n            }\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        this.log.error(quid, err, (err as Error).stack);\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Renames keys of a query's value object to make them compatible\n   * with the SQLiteWASM API's bind parameters.\n   * \n   * @param\n   * @returns \n   */\n  reformatQueryValues({values, prefix = ':'}: {values: any, prefix?: string}) {\n    if (Array.isArray(values)) return values;\n    if (typeof values === 'object') {\n      const keys = Object.keys(values);\n      const remapped: Record<string, any> = {};\n      keys.forEach(k => {\n        const newK = k.startsWith(prefix) ? k : `${prefix}${k}`;\n        remapped[newK] = values[k];\n      });\n      return remapped;\n    }\n    return values;\n  }\n\n  /**\n   * Returns the current device's unique TinySynq ID.\n   * \n   * @returns The device's assigned ID.\n   */\n  async getDeviceId(): Promise<string> {\n    if (this._deviceId) return this._deviceId;\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'device_id'`\n    });\n    return res[0].meta_value;\n  }\n\n  /**\n   * Returns an ISO8601 formatted date and time of the last successful local sync.\n   * \n   * @remarks\n   * \n   * A \"local sync\" is the process of sending local changes to the remote hub.\n   * \n   * @returns The time of the last sync.\n   */\n  async getLastSync(): Promise<string> {\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    this.log.trace('@getLastSync', res[0]);\n    return res[0]?.meta_value;\n  }\n  \n  /**\n   * Returns matching {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChanges(params?: {lastLocalSync?: string, columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync: string = params?.lastLocalSync || await this.getLastSync();\n    let { columns = ['c.*'] } = params || {};\n    this.log.debug('@getChanges', lastLocalSync);\n  \n    let where: string = '';\n    let columnSelection = columns\n      .map(c => c.replace(/[^*._a-z0-9]+/gi, ''))\n      .join(',') || '*';\n  \n    if (lastLocalSync) {\n      where = 'WHERE c.modified > ?'\n    }\n    const sql = `\n      SELECT ${columnSelection}\n      FROM ${this._synqPrefix}_changes c\n      ${where}\n      ORDER BY c.modified ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  /**\n   * Returns {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChangesSinceLastSync(params?: {columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync = await this.getLastSync() || undefined;\n    return this.getChanges({...params, lastLocalSync});\n  };\n\n  /**\n   * Writes debug mode value (true) which disables recording \n   * of operations on syncable tables.\n   * \n   * @remarks\n   * \n   * The value set by this method is checked by dedicated triggers.\n   * If the value is `1`, the active trigger writes the data to the\n   * `*_dump` table. It's worth purging the table data once done \n   * with debugging.\n   * \n   * @returns Result of the operation.\n   */\n  async enableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Writes debug mode value (false) which disables recording \n   * of operations on syncable tables.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   * \n   * @returns Result of the operation.\n   */\n  async disableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Empties the `*_dump` table.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   */\n  async clearDebugData() {\n    await this.run({sql: `DELETE FROM ${this._synqPrefix}_dump`});\n    await this.run({sql: `UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = ${this._synqPrefix}_dump`});\n  }\n  \n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private enableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');`\n    });\n  }\n\n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private async disableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');`\n    });\n  }\n\n  async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.run({sql});\n    return savepoint;\n  }\n\n  async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  /**\n   * Retrieves a single record.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  private async getRecord<T>(params: TableNameRowParams): Promise<T | any> {\n    const {table_name, row_id} = params;\n    const idCol = this.getTableIdColumn({table_name: table_name});\n    const sql = `SELECT * FROM ${table_name} WHERE ${idCol} = ?`;\n    const res = await this.runQuery({sql, values: [row_id]});\n    this.log.debug('@getRecord', res);\n    return res[0];\n  }\n\n  /**\n   * Retrieves a single record by it's ID.\n   * \n   * @remarks\n   * \n   * The column used to identify the record is according to the {@link SyncableTable}\n   * that was provided in {@link TinySynqOptionsBase.tables} at instantiation.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  async getById<T>(params: TableNameRowParams): Promise<T | any> {\n    const{table_name, row_id} = params;\n    return this.getRecord({table_name, row_id});\n  }\n\n  async insertRecordMeta({change, vclock}: any) {\n    if (!this.utils.isSafeISO8601(change.modified)) throw new Error(`Invalid modified data for record meta: ${change.modified}`)\n    this.log.debug('<<< @insertRecordMeta >>>', {change, vclock});\n    const { table_name, row_id, source } = change;\n    const mod = vclock[this._deviceId!] || 0;\n    const values = {\n      table_name,\n      row_id,\n      mod,\n      source,\n      vclock: JSON.stringify(vclock),\n      modified: change.modified,\n    };\n    return this.runQuery({\n      sql: `\n      INSERT INTO ${this._synqPrefix}_record_meta (table_name, row_id, source, mod, vclock, modified)\n      VALUES (:table_name, :row_id, :source, :mod, :vclock, :modified)\n      ON CONFLICT DO UPDATE SET source = :source, mod = :mod, vclock = :vclock, modified = :modified\n      RETURNING *\n      `,\n      values,\n    });\n  }\n\n  /**\n   * Get associated meta data (including `vclock`) for record.\n   * \n   * @param params - Object containing table/row parameters.\n   * \n   * @returns Object containing row data from `*_record_meta`.\n   */\n  async getRecordMeta(params: {table_name: string, row_id: string}) {\n    const {table_name, row_id} = params;\n    const sql = `\n    SELECT *\n    FROM ${this.synqPrefix}_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id`;\n    const res = await this.runQuery({sql, values: {table_name, row_id}});\n    return res[0];\n  }\n\n  /**\n   * Returns changes that couldn't be applied yet because they\n   * were received out of sequence.\n   * \n   * @returns Array of pending changes.\n   */\n  async getPending() {\n    const sql = `\n    SELECT *\n    FROM ${this._synqPrefix}_pending\n    ORDER BY id ASC\n    `;\n    const res = await this.runQuery({sql});\n    return res;\n  }\n\n  /**\n   * Creates new pending record to be applied later.\n   * \n   * @param opts - Options for processing out-of-order change\n   * @returns Newly created pending record\n   */\n  private async processOutOfOrderChange({change}: {change: Change}) {\n    const {id, ...data} = change;\n    const sql = this.createInsertFromSystemObject({\n      data,\n      table_name: `${this._synqPrefix}_pending`,\n    });\n    this.log.trace('@processOutOfOrderChange\\n', sql, change);\n    const values: any = { ...data};\n    values.vclock = JSON.stringify(data.vclock);\n    const res = await this.runQuery({sql, values});\n    this.log.trace('@processOutOfOrderChange\\n', {res});\n    return res;\n  }\n\n  /**\n   * Determines whether to treat conflicted change as valid or invalid.\n   * \n   * @param opts - Options for processing concurrent change\n   * @returns boolean \n   */\n  private async processConflictedChange<T>(\n    { record, change, meta: localMeta }: \n    {record: T|any, meta: any, change: Change}\n  ): Promise<boolean> {\n    this.log.debug('@processConflictedChange START', record, change)\n    // INSERT won't have a local record so accept the incoming change\n    if (change.operation === TinySynqOperation.INSERT) return true;\n\n    this.log.trace('<<<@ processConflictedChange LLW @>>>', change.id, change.table_name, change.row_id, {record, localMeta, change});\n    if (change.modified > localMeta.modified) {\n      this.log.debug('<!> INTEGRATING REMOTE', change.id, change.table_name, change.row_id);\n      // Update local with the incoming changes\n      return true;\n    }\n    else {\n      this.log.debug('<!> KEEPING LOCAL', change.id, change.table_name, change.row_id);\n      // Keep the local change, but record receipt of the record.\n      return false;\n    }\n  }\n\n  /**\n   * Checks for and handles issues with incoming change to be applied.\n   * \n   * @returns Result of pre-processing.\n   */\n  private async preProcessChange(\n    {change, restore}: PreProcessChangeOptions\n  ): Promise<PreProcessChangeResult> {\n    this.log.trace('@preProcess change', change)\n    let defaultReason = 'unknown';\n    let valid = false;\n    let reason = defaultReason;\n    const localId = this.deviceId!;\n    const { table_name, row_id, vclock: remote = {} } = change;\n    const record = await this.getRecord({table_name, row_id});\n    this.log.trace('@preProcess record:', record)\n    const meta = await this.getRecordMeta({table_name, row_id});\n    this.log.trace('@preProcess meta:', meta)\n    const local = meta?.vclock ? JSON.parse(meta.vclock) : {};\n    // If it's an insert, there won't be any meta.\n    const localTime = meta?.modified || '1970-01-01';\n    const remoteTime = change?.modified;\n\n    let latest: VClock = {};\n    const localV = new VCompare({ local, remote, localId, localTime, remoteTime });\n    let displaced = false;\n    let conflicted = false;\n    let stale = false;\n\n    // If we don't have the record, treat it as new\n    if (!restore && !record && change.operation !== TinySynqOperation.INSERT) {\n      reason = 'update before insert';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (restore || !record || !local || !local[localId]) {\n      latest = change.vclock;\n    }\n    \n    if (restore) {\n      valid = true;\n      reason = 'restoration';\n      latest = localV.merge();\n      return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n    }\n    else if (displaced = localV.isOutOfOrder()) {  \n      reason = 'received out of order';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (conflicted = localV.isConflicted()) {\n      valid = await this.processConflictedChange({record, change, meta});\n      if (!valid) {\n        reason = 'concurrent writes'; \n      }\n      else {\n        latest = localV.merge();\n      }\n    }\n    else if (stale = localV.isOutDated()) {\n      reason = 'stale';\n    }\n    else if (reason === defaultReason) {\n      valid = true;\n      reason = '';\n      latest = localV.merge();\n    }\n\n    return { valid, reason, vclock: latest, meta, checks: { stale, displaced, conflicted } };\n  }\n\n  /**\n   * Creates an insert query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string.\n   */\n  createInsertFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    const columnsToInsert = Object.keys(data).join(',');\n    //const editable = this._synqTables![table].editable || [];\n    const updates = Object.keys(data)\n      // @TODO: There's no need to restrict editable fields here, but check again.\n      //.filter(key => editable.includes(key))\n      .map(k => `${k} = :${k}`)\n      .join(',');    \n    if (!updates) throw new Error(`No insertable data: ${JSON.stringify(data)}`);\n\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  /**\n   * Creates an update query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string. \n   */\n  createUpdateFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    if (!this._synqTables![table]) throw new Error(`Not a synced table for update: ${table}`);\n\n    const idCol = this._synqTables![table].id;\n    const updates = Object.keys(data)\n      .filter(k => k !== idCol)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    if (!updates) throw new Error(`No updates available: ${JSON.stringify(data)}`);\n  \n    const updateSql = `\n      UPDATE ${table} SET ${updates}\n      WHERE ${idCol} = :${idCol}\n      RETURNING *;`;\n\n    return updateSql;\n  }\n\n  /**\n   * Creates an insert query based on the system table name and data provided.\n   *  \n   * @param param0 - Parameters from which to create the query.\n   * \n   * @returns A SQL query string. \n   */\n  private createInsertFromSystemObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    this.log.silly('@createInsert...', {data});\n    const columnsToInsert = Object.keys(data).join(',');\n    const updates = Object.keys(data)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n    return insertSql;\n  }\n\n  private async updateLastSync({change}: {change: Change}) {\n    const lastSyncTime = await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      values: { name: 'last_local_sync' },\n    });\n    const lastSyncId = await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, :value)`,\n      values: { name: 'last_sync', value: change.id }\n    });\n    return {lastSyncTime, lastSyncId}\n  }\n\n  private async applyChange({\n    change,\n    restore,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      // Check that the changes can actually be applied\n      const changeStatus = await this.preProcessChange({change, restore});\n\n      console.log(\n        '\\n\\n ::: STATUS :::', \n        JSON.stringify({changeStatus, change}, null, 2), \n        '\\n\\n ::: /STATUS :::'\n      );\n      if (!changeStatus?.valid) {\n        this.log.warn('>>> Invalid change', changeStatus);\n        this.updateLastSync({change});\n        return;\n      }\n\n      const table = this.synqTables![change.table_name];\n      const idCol = this.getTableIdColumn(change);\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n          recordData[idCol] = change.row_id;\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n      else {\n        // There's no data so bail\n        throw new Error(`Cannot perform update with empty data:\\n${JSON.stringify(change, null, 2)}`);\n      }\n \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n\n      this.log.silly('@applyChange', {change, table, changeStatus});\n      switch(change.operation) {\n        case 'INSERT':\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'UPDATE':\n          const updateSql = this.createUpdateFromObject({\n            data: recordData,\n            table_name: change.table_name,\n          });\n          this.run({sql: updateSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          this.log.debug('>>> DELETE SQL <<<', sql, change.row_id);\n          await this.run({sql, values: [change.row_id]});\n          break;\n      }\n      const lastSyncResult = await this.updateLastSync({change});\n      console.log({lastSyncResult});\n\n      // Insert merged VClock data\n      const updatedRecordMeta = await this.insertRecordMeta({change, vclock: changeStatus.vclock});\n      this.log.silly({updatedRecordMeta});\n    }\n    catch (error: any) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}. Rolled back.`, {change});\n      this.log.error(error.stack)\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB({ changes, restore = false }: { changes: Change[], restore?: boolean }) {\n    await this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, restore, savepoint});\n        }\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    await this.enableTriggers();\n    this.log.silly(`Applied ${changes.length} change(s)`);\n  };\n\n  /**\n   * Get items that have been recently changed.\n   * \n   * @param opts \n   */\n  getFilteredChanges(opts?: LatestChangesOptions) {\n    let conditions: string[] = [];\n    let values: any = {};\n    if (opts?.exclude) {\n      conditions.push('source != :exclude');\n      values.exclude = opts.exclude;\n    }\n    if (opts?.checkpoint) {\n      conditions.push('id > :checkpoint');\n      values.checkpoint = opts.checkpoint;\n    }\n    else if (opts?.since) {\n      conditions.push('modified > :since');\n      values.since = opts.since\n    }\n    const where = conditions.length ? `WHERE ${conditions.join(' AND ')}` : '';\n    const sql = `\n    SELECT id, table_name, row_id, data, operation, source, vclock, modified\n    FROM ${this.synqPrefix}_changes\n    ${where} \n    ORDER BY modified ASC`;\n\n    return this.runQuery({sql, values});\n  }\n\n  async updateLastPush(params: {time: string; id: string}) {\n    const lastPush = await this.runQuery({\n      sql: `\n      SELECT * FROM ${this._synqPrefix}_meta\n      WHERE meta_name IN ('lastPushTime','lastPushId')\n      ORDER BY meta_name ASC`\n    });\n    if (lastPush[0].meta_value > params.id || lastPush[1].meta_value > params.time) {\n      console.warn('Request lastPush update is older than current values.')\n      console.warn('@Existing meta:', lastPush);\n      console.warn('@Incoming meta:', params);\n    } \n    const savepoint = await this.beginTransaction();\n    const timeResult = await this.runQuery({\n      sql:`\n      UPDATE ${this._synqPrefix}_meta\n      SET meta_value = :value\n      WHERE meta_name = 'lastPushTime'\n      RETURNING *`,\n      values: {value: params.time}\n    });\n    const idResult = await this.runQuery({\n      sql:`\n      UPDATE ${this._synqPrefix}_meta\n      SET meta_value = :value\n      WHERE meta_name = 'lastPushId'\n      RETURNING *`,\n      values: {value: params.id}\n    });\n    await this.commitTransaction({savepoint});\n    return {timeResult, idResult}\n  }\n\n  async tablesReady(): Promise<void> {\n    await this.enableTriggers();\n  }\n\n  async obliterate(): Promise<void> {\n    return await this.db({\n      type: 'close', \n      dbId: this.deviceId,\n      args: {unlink: true}\n    });\n  }\n}","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, SyncableTable } from \"./types.js\";\nimport { getUpdateTriggerDiffQuery } from \"./trigger.js\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst initTinySynq = async (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysynq-setup', ...logOptions});\n  const ts = new TinySynq(config);\n\n  /**\n   * Pretty important: make sure to call `init()` :-)\n   */\n\n  await ts.init();\n\n  const getRecordMetaInsertQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    /* \n    db.is kind of insane, but it works. A rundown of what's happening:\n    - We're creating a trigger after a deletion (the easy part)\n    - Aside from recording the changes, we also need to add record-specific metadata:\n      - table name and row identifier,\n      - the number of times the record has been touched (including creation)\n      - the map of all changes across all devices — a Vector Clock (JSON format)\n    - Getting the vector clock is tricky, partly because of SQLite limitations\n      (no variables, control structures), and partly because it's possible that\n      no meta exists for the record.\n    - To work around db.we do a select to get the meta, but perform a union with\n      another select that just selects insert values.\n    - Included in both selects is\n      a 'peg' which we use to sort the UNIONed rows to ensure that if a valid row\n      exists, it's the first row returned.\n    - Now we select from db.union and limit to 1 result. If a record exists\n      then we get that record. If not, we get the values ready for insertion.\n    - Finally, if there's a conflict on PRIMAY KEY or UNIQUE contraints, we update\n      only the columns configured as editable.\n    */\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n    INSERT INTO ${ts.synqPrefix}_record_meta (table_name, row_id, source, mod, vclock)\n    SELECT table_name, row_id, source, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '${table.name}' as table_name,\n        ${version}.${table.id} as row_id, \n        '${ts.deviceId}' as source, \n        IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$.${ts.deviceId}', IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1) as vclock\n      FROM ${ts.synqPrefix}_record_meta\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id}\n      UNION\n      SELECT 0 as peg, '${table.name}' as table_name, ${version}.${table.id} as row_id, '${ts.deviceId}' as source, 1, json_object('${ts.deviceId}', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      source = '${ts.deviceId}',\n      mod = json_extract(excluded.vclock,'$.${ts.deviceId}'),\n      vclock = json_extract(excluded.vclock,'$'),\n      modified = '${ts.utils.utcNowAsISO8601().replace('Z', '')}'\n    ;`;\n    log.silly(sql);\n    return sql;\n  }\n\n  const getChangeUpdateQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n      UPDATE ${ts.synqPrefix}_changes\n      SET vclock = trm.vclock, source = trm.source\n      FROM (\n        SELECT vclock, source\n        FROM ${ts.synqPrefix}_record_meta\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n      ) AS trm\n      WHERE id IN (\n        SELECT id FROM ${ts.synqPrefix}_changes\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n        ORDER by id desc\n        LIMIT 1\n      );\n    `;\n    return sql;\n  }\n\n  const setupTriggersForTable = async ({ table }: { table: SyncableTable }) => {\n    log.debug('Setting up triggers for', table.name);\n\n    // Template for inserting the new value as JSON in the `*_changes` table.\n    const jsonObject = (await ts.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    log.silly('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    /**\n     * These triggers run for changes originating locally. They are disabled\n     * when remote changes are being applied (`triggers_on` in `*_meta` table).\n     */\n\n    // Ensure triggers are up to date\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_insert_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_update_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    await ts.run({sql});\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        ${await getUpdateTriggerDiffQuery({ts, table})}\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n        \n        ${getRecordMetaInsertQuery({table, remove: true})}\n        \n        ${getChangeUpdateQuery({table, remove: true})}\n      END;`\n    });\n\n    /**\n     * All the triggers below will only be executed if `meta_name=\"debug_on\"`\n     * has the `meta_value=1` in the *_meta table, regardless of `triggers_on`.\n     */\n\n    // Remove previous versions\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_record_meta`});\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow a rudimentary tracing of DB actions on the synced tables.\n     */\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'INSERT', ${jsonObject.jo});\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    const oldJsonObject = jsonObject.jo.replace(/NEW/g, 'OLD');\n    \n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'DELETE', ${oldJsonObject});\n      END;`\n    });\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow comparison record meta before and after insert.\n     */\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta\n      BEFORE INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta\n      AFTER INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_record_meta\n      AFTER UPDATE ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    /* END OF DEBUG TRIGGERS */\n  }\n\n  // Create a change-tracking table and index\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      source TEXT,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_modified_idx ON ${ts.synqPrefix}_changes(modified)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_table_row_idx ON ${ts.synqPrefix}_changes(table_name, row_id)`\n  });\n\n  // Change *_pending is essentially a clone of *_changes used to hold items that\n  // cannot be applied yet because intermediate/preceding changes haven't been received.\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      source TEXT NOT NULL,\n      vclock BLOB NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_pending_table_row_idx ON ${ts.synqPrefix}_pending(table_name, row_id)`\n  });\n\n  // Create a notice table\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  }); \n\n  // Create record meta table and index\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER,\n      source TEXT NOT NULL,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n\n  await ts.run({\n    sql:`CREATE UNIQUE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_idx ON ${ts.synqPrefix}_record_meta(table_name, row_id)`\n  });\n  // @TODO: These may actually need to be compound indexes; need to evaluate queries.\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_source_idx ON ${ts.synqPrefix}_record_meta(source)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_modified_idx ON ${ts.synqPrefix}_record_meta(modified)`\n  });\n\n  // Create meta table\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  `});\n\n  await ts.run({\n    sql: `\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  `});\n\n  await ts.run({\n    sql: `CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_meta_name_idx ON ${ts.synqPrefix}_meta(meta_name)`\n  });\n  \n  // Enable debug mode\n  if (debug) await ts.enableDebug();\n\n  // Set the device ID\n  await ts.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n      await ts.run({\n        sql: preInitQuery\n      });\n    }\n  }\n\n  log.debug(`@${ts.synqPrefix}_meta`, ts.runQuery({sql:`SELECT * FROM pragma_table_info('${ts.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, ts.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = await ts.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    log.debug('@exists?', table.name, exists);\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    await setupTriggersForTable({ table });\n    ts.tablesReady();\n  }\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.debug(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      await ts.run({\n        sql: postInitQuery\n      });\n    }\n  }\n\n  return ts;\n};\n\nexport default initTinySynq;","import { nanoid } from \"nanoid\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { Change, SyncRequestType, SyncResponseType } from \"./types.js\";\n\ninterface TinySynqClientConfig {\n  /**\n   * Initialised TinySynq instance.\n   */\n  ts: TinySynq;\n  /**\n   * The domain or IP address (no protocol or port).\n   * \n   * @default localhost\n   */\n  hostname?: string;\n  /**\n   * The port number on which to connect.\n   *\n   * @default 7174\n   */\n  port?: number;\n  /**\n   * Whether or not it should a secure connection (wss://)\n   * \n   * @default false\n   */\n  secure?: boolean;\n}\n\nlet socket: WebSocket;\n\nconst defaultConfig = {\n  hostname: 'localhost',\n  port: 7174,\n  secure: false,\n};\n\nexport class TinySynqClient extends EventTarget {\n\n  private _config: TinySynqClientConfig;\n  private _serverUrl: string;\n  private _ts: TinySynq;\n  private _ws: WebSocket | undefined;\n\n  get serverUrl() {\n    return this._serverUrl;\n  }\n\n  get ts() {\n    return this._ts;\n  }\n\n  get ws() {\n    return this._ws;\n  }\n\n  constructor(config: TinySynqClientConfig) {\n    super();\n    if (!config?.ts) throw new Error('Invalid client configuration');\n    this._config = config;\n    this._ts = config.ts;\n    const finalConfig = {...defaultConfig, ...this._config};\n    const { secure, hostname, port = '' } = finalConfig;\n    const ws = 'ws' + (secure ? 's' : '');\n    this._serverUrl = `${ws}://${hostname}${port ? ':' : ''}${port}`;\n  }\n\n  isOpenOrConnecting() {\n    return this.ws && [Number(this.ws.OPEN), Number(this.ws.CONNECTING)].includes(this.ws.readyState)\n  }\n  \n  async connect(): Promise<WebSocket> {\n    return new Promise((resolve, reject) => {\n      if (this.isOpenOrConnecting()) {\n        return resolve(this.ws as WebSocket);\n      }\n      this._ws = new WebSocket(this.serverUrl);\n      this._ws.addEventListener('open', (e) => {\n        console.log(\"TinySynq socket ready.\", e);\n        resolve(this.ws as WebSocket);\n      });\n      this._ws.addEventListener('error', (e) => {\n        console.log(\"TinySynq socket error:\", e);\n        if (this.isOpenOrConnecting()) reject(e);\n      });\n      this._ws.addEventListener('close', (e) => {\n        console.log('Closing TinySynq socket...', e);\n      });\n      this._ws.addEventListener('message', this.handleMessage.bind(this));\n    });\n  }\n\n  async push() {\n    if (!this.ts) return;\n    const lastSync = await this.ts.getLastSync();\n    const changes = await this.ts.getFilteredChanges({since: lastSync});\n    if (!changes) return console.log('no changes');\n    const payload = {\n      type: SyncRequestType.push,\n      changes,\n      source: this._ts.deviceId,\n      requestId: nanoid(16)\n    };\n    this._ws?.send(JSON.stringify(payload));\n  }\n\n  async pull() {\n    const payload = {type: SyncRequestType.pull, source: this._ts.deviceId};\n    console.debug('@pull', payload);\n    this._ws?.send(JSON.stringify(payload));\n  }\n\n  private async handleMessage(e: any) {\n    console.debug('@message', e);\n    const data = JSON.parse(e.data);\n    console.debug('@parsed', data)\n    if (data.type !== SyncResponseType.nack) {\n      if (data.changes) {\n        console.warn('@client processing changes')\n        const changes = data.changes.map((c: Change) => {\n          if (typeof c.vclock === 'string') {\n            c.vclock = JSON.parse(c.vclock);\n          }\n          return c;\n        });\n        console.debug('@client changes', changes)\n        await this.ts.applyChangesToLocalDB({changes});\n        const event = new CustomEvent('changes', {\n          detail: data.changes\n        });\n        console.debug('::: Disptaching event...', event);\n        this.dispatchEvent(event)\n      }\n      else if (data.lastChangeId) {\n       const result = await this.ts.updateLastPush({time: data.lastChangeTime, id: data.lastChangeId});\n       console.log('Stored last push', result);\n      }\n    }\n    else {\n      console.error('Sync failed', data);\n      this.dispatchEvent(\n        new CustomEvent('error', {\n          detail: data\n        })\n      );\n    }\n  }\n}\n\n","\n\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { SyncableTable } from \"./types.js\";\n\nexport const getOldVsNewUnionColumnSelection = (params: {columns: any[]}) => {\n  if (!params.columns) throw new Error('Missing table column data to generate trigger union column selection'); \n\n  return params.columns.map((c) => `SELECT '${c.name}' AS col, OLD.${c.name} AS old_val, NEW.${c.name} AS new_val`);\n}\n\nexport const getUpdateTriggerDiffQuery = async (params: {ts: TinySynq, table: SyncableTable}) => {\n  const { ts, table } = params;\n  // Need to get the table schema in order to generate the query.\n  const columns = await ts.runQuery({\n    sql: `SELECT * FROM pragma_table_info('${table.name}')`\n  });\n\n  const unionSelects = getOldVsNewUnionColumnSelection({columns});\n  const sql = `\n  INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n  SELECT * FROM (\n    WITH RECURSIVE all_cols AS (\n      ${unionSelects.join('\\n    UNION ALL\\n    ')}\n    ),\n    changed_cols AS (\n      SELECT col, new_val\n      FROM all_cols\n      WHERE new_val != old_val\n    )\n    SELECT '${table.name}', NEW.${table.id}, 'UPDATE', json_group_object(col, new_val)\n    FROM changed_cols\n  );`;\n\n  return sql;\n};"],"names":["TinySynqOperation","SyncRequestType","SyncResponseType","LogLevel","VCompare","_ref","local","remote","localId","localTime","remoteTime","this","isGreater","isLess","isWrongOrder","JSON","parse","_proto","prototype","setRemote","_ref2","isConflicted","data","_this","Object","keys","_extends","forEach","k","localCount","remoteCount","isOutDated","_this$localTime","console","debug","stringify","Error","Date","isOutOfOrder","filter","i","length","_local$k","_remote$k","drift","Math","abs","merge","_step","merged","_iterator","_createForOfIteratorHelperLoose","Set","concat","done","p","value","max","undefined","_catch","body","recover","result","e","then","_settle","pact","state","s","_Pact","o","bind","v","observer","onRejected","callback","onFulfilled","_isSettledPact","thenable","log","Logger","name","minLevel","Info","_forOf","target","check","_iteratorSymbol","step","reject","iterator","_cycle","_fixup","TypeError","values","push","array","_forTo","strftimeAsISO8601","TinySynq","_EventTarget","opts","_opts$prefix","_opts$wal","_opts$logOptions$minL","_opts$logOptions","_opts$logOptions2","_this2","call","_db","_dbPath","_deviceId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","toISOString","replace","trim","isSafeISO8601","date","test","filePath","sqlite3","tables","t","prefix","batchSize","wal","logOptions","type","maskValuesOfKeys","hideLogPositionForProduction","_inheritsLoose","init","_this3","db","Promise","resolve","dbPath","res","_promiser","sqlite3Worker1Promiser","onready","onerror","err","error","_this$log","apply","slice","arguments","onunhandled","event","promiser","_temp4","dbId","conf","_temp2","waited","interval","setInterval","clearInterval","dispatchEvent","CustomEvent","info","version","libVersion","setDeviceId","_temp","runQuery","sql","_temp3","filename","_promiser2","_promiser3","message","getNewId","nanoid","getTableIdColumn","params","_this$synqTables$tabl","synqTables","table_name","id","_temp8","existing","_temp6","_existing","_this4","meta_value","warn","_temp5","_existing2","synqPrefix","deviceId","_temp7","_this4$runQuery","run","runMany","_this6","_params$prefix","quid","ceil","random","synqDbId","_temp11","_temp10","_temp9","reformatQueryValues","stack","_this7","_params$prefix2","results","row","trace","col","columnNames","_ref$prefix","Array","isArray","remapped","newK","startsWith","getDeviceId","_this8","getLastSync","_this9","_res$","getChanges","_temp12","lastLocalSync","_ref2$columns","columns","_this10","where","columnSelection","map","c","join","_params$lastLocalSync","getChangesSinceLastSync","_this11","enableDebug","disableDebug","clearDebugData","_this14","enableTriggers","disableTriggers","beginTransaction","savepoint","now","commitTransaction","_ref3","rollbackTransaction","_ref4","getRecord","_this19","row_id","idCol","getById","insertRecordMeta","_ref5","change","vclock","_this21","modified","mod","source","getRecordMeta","getPending","_this23","processOutOfOrderChange","_ref6","_this24","_objectWithoutPropertiesLoose","_excluded","createInsertFromSystemObject","processConflictedChange","_ref7","record","localMeta","meta","_this25","operation","INSERT","preProcessChange","_ref8","restore","_this26","defaultReason","valid","reason","_change$vclock","_temp18","_exit","_temp16","_result2","latest","checks","stale","displaced","conflicted","_temp15","localV","_temp19","_temp20","_this26$processConfli","_temp17","createInsertFromObject","_ref9","table","columnsToInsert","updates","insertPlaceholders","createUpdateFromObject","_ref10","_ref11","silly","updateLastSync","_ref12","_this27","lastSyncTime","lastSyncId","applyChange","_ref13","_this28","changeStatus","_temp22","lastSyncResult","updatedRecordMeta","recordData","_temp21","discriminant","cases","awaitBody","dispatchIndex","testValue","outer","_resumeAfterTest","_resumeAfterBody","fallthroughCheck","_switch","insertSql","_interrupt","updateSql","applyChangesToLocalDB","_ref14","changes","_ref14$restore","_this29","_temp27","_temp26","update","stage","shouldContinue","updateValue","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp25","_temp24","_temp23","getFilteredChanges","conditions","exclude","checkpoint","since","updateLastPush","_this30","lastPush","time","timeResult","idResult","tablesReady","obliterate","args","unlink","_createClass","key","get","_wrapNativeSuper","EventTarget","next","return","defaultConfig","hostname","port","secure","TinySynqClient","config","_config","_serverUrl","_ts","_ws","ts","finalConfig","_finalConfig$port","isOpenOrConnecting","ws","Number","OPEN","CONNECTING","includes","readyState","connect","WebSocket","serverUrl","addEventListener","handleMessage","lastSync","_this3$_ws","payload","requestId","send","pull","_this4$_ws","_this5","nack","detail","lastChangeId","lastChangeTime","preInit","postInit","getRecordMetaInsertQuery","_ref$remove","remove","getChangeUpdateQuery","_ref2$remove","_result","postInitQuery","exists","_ts$runQuery","jsonObject","jo","_run","unionSelects","getOldVsNewUnionColumnSelection","getUpdateTriggerDiffQuery","_getUpdateTriggerDiff","oldJsonObject","setupTriggersForTable","preInitQuery"],"mappings":"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"}