{"version":3,"file":"tinysynq.umd.js","sources":["../src/lib/types.ts","../src/lib/vcompare.class.ts","../src/lib/tinysynq.class.ts","../src/lib/index.ts","../src/lib/client.ts"],"sourcesContent":["import { ISettingsParam, ILogObj } from 'tslog';\n\n/**\n * A {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance.\n * \n * @public\n */\nexport type SQLiteWASM = any\n\n/**\n * Provided to TinySynq constructor.\n * \n * @public\n */\nexport interface SyncableTable {\n  /**\n   * Table name.\n   */\n  name: string;\n  /**\n   * Row identifier; typically the column used as primary key.\n   */\n  id: string;\n  /**\n   * Columns that can be updated by a sync-based change.\n   */\n  editable: string[];\n}\n\n/**\n * Base options for TinySynq constructor.\n * \n * @public\n */\nexport interface TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   * \n   * @remarks\n   * \n   * If not provided, {@link TinySynqOptionsBase.filePath} must be set.\n   * \n   */\n  sqlite3?: SQLiteWASM;\n  /**\n   * Path to SQLite3 database file.\n   * \n   * @remarks\n   * If not provided, {@link TinySynqOptionsBase.sqlite3} must be set.\n   */\n  filePath?: string;\n  /**\n   * Prefix to use for TinySynq tables (trailing underscores will be removed).\n   */\n  prefix: string;\n  /**\n   * Tables that should be synced between devices.\n   */\n  tables: SyncableTable[];\n  /**\n   * Maximum number of changes to process at once.\n   */\n  batchSize?: number;\n  /**\n   * Enable or disable WAL mode.\n   */\n  wal?: boolean;\n  /**\n   * Array of queries to run before TinySynq's change tracking is configured.\n   * \n   * @remarks\n   * Include create statements for syncable tables here.\n   */\n  preInit?: string[];\n  /**\n   * Array of queries to run after TinySynq's change tracking is configured\n   * \n   * @remarks\n   * You might place any insert queries here.\n   */\n  postInit?: string[];\n  /**\n   * Configure logging options.\n   * \n   * @remarks\n   * TinySynq uses TSLog for logging. All optiions are passed directly to it.\n   * See https://tslog.js.org/#/?id=settings for details\n   */\n  logOptions?: ISettingsParam<ILogObj>;\n  /**\n   * Enable/disable debug mode\n   * \n   * When enabled, all INSERT/UPDATE/DELETE actions on syncable tables are written \n   * to the *_dump table for inspection.\n   */\n  debug?: boolean;\n}\n\n/** \n * Constructor options TinySynq instance.\n * \n * Provide either an existing {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance (`sqlite3`) or the `filePath`.\n * \n * @public\n */\nexport interface TinySynqOptionsWithInstance extends TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   */\n  sqlite3: SQLiteWASM;\n}\n\nexport interface TinySynqOptionsWithFilePath extends TinySynqOptionsBase{\n  /**\n   * Path to SQLite3 database file.\n   */\n  filePath: string;\n}\n\n/** \n * {@inheritdoc TinySynqOptionsBase}\n * \n * @public\n */\nexport type TinySynqOptions = TinySynqOptionsWithInstance | TinySynqOptionsWithFilePath\n\nexport type SQLite3 = any\n\n/**\n * Basic query params for methods that read from/write to DB.\n * \n * @public\n */\nexport type QueryParams = {\n  sql: string;\n  values?: any;\n  prefix?: string;\n}\n\n/**\n * Table name and row parameters for retrieving data for a specific record.\n */\nexport interface TableNameRowParams {\n  table_name: string;\n  row_id: string;\n}\n\nexport interface ApplyChangeParams {\n  change: Change,\n  restore?: boolean,\n  savepoint: string\n}\n\nexport interface MetaRowData {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type VClock = {\n  [deviceId: string]: number;\n}\n\nexport enum TinySynqOperation {\n  'INSERT' = 'INSERT',\n  'UPDATE' = 'UPDATE',\n  'DELETE' = 'DELETE'\n}\n\n/**\n * Object transferred between devices to convey individual record changes.\n * \n * @public\n */\nexport interface Change {\n  /**\n   * Change record ID from central server.\n   */\n  id?: number;\n  /**\n   * Table name of the record that was modified.\n   */\n  table_name: string;\n  /**\n   * Row ID of the record that was modified.\n   */\n  row_id: string;\n  /**\n   * The type of operation that took place.\n   */\n  operation: keyof typeof TinySynqOperation;\n  /**\n   * The serialised object in the post-modified state. \n   */\n  data: string; // JSON string\n  /**\n   * Vector Clock holding all device values for the record, as known by the source device of the change.\n   */\n  vclock: VClock;\n  /**\n   * An ISO8601 formatted date and time that the change was recorded on the source device.\n   */\n  modified: string;\n}\n\ninterface BaseLatestChangesOptions {\n  /**\n   * A device ID whose changes should be excluded from retrieval (usually the requester).\n   */\n  exclude: string;\n  /**\n   * An ISO8601 date string. Providing this will limit retrieved changes to this date/time onwards.\n   */\n  since: string;\n  /**\n   * A\n   */\n  checkpoint: number;\n}\n\ninterface LatestChangesWithSince extends BaseLatestChangesOptions {\n  /**\n   * An ISO8601 date string. Providing this will limit retrieved changes to this date/time onwards.\n   */\n  since: string;\n\n}\n\ninterface LatestChangesWithCheckpoint extends BaseLatestChangesOptions {\n  /**\n   * A server-specific change ID.\n   * \n   * @remarks\n   * \n   * When provided it will limit retrieved changes to those _after_ the specified change ID.\n   * The change ID is specific to the hub/root server (of which there should be only one).\n   */\n  checkpoint: number;\n}\n\nexport type LatestChangesOptions = LatestChangesWithSince | LatestChangesWithCheckpoint\n\nexport enum SyncRequestType {\n  push = 'push',\n  pull = 'pull'\n}\n\nexport enum SyncResponseType {\n  ack = 'ack',\n  nack = 'nack'\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { VClock } from \"./types.js\";\n\ntype VectorClockParams = {\n  local: VClock;\n  remote: VClock;\n  localId: string;\n  localTime: string;\n  remoteTime: string;\n}\n\ntype RemoteVClockParams = {\n  remote: VClock;\n}\n\nexport class VCompare {\n\n  private local: VClock;\n  private isGreater = false;\n  private isLess = false;\n  private isWrongOrder = false;\n  private remote: VClock = {};\n  private localId: string;\n  private localTime: string;\n  private remoteTime: string;\n\n  constructor({ local, remote, localId, localTime, remoteTime }: VectorClockParams) {\n    this.local = local;\n    this.remote = typeof remote === 'string'\n      ? JSON.parse(remote)\n      : remote;\n    this.localId = localId;\n    this.localTime = localTime;\n    this.remoteTime = remoteTime;\n  }\n\n  setRemote({ remote }: RemoteVClockParams) {\n    this.remote = remote;\n  }\n\n  isConflicted(data?: RemoteVClockParams): boolean {\n    const remote = data?.remote || this.remote;\n    const keys = Object.keys({...this.local, ...remote});\n    keys.forEach(k => {\n      const localCount = this.local[k] || 0;\n      const remoteCount = remote[k] || 0;\n      this.isGreater = this.isGreater || localCount > remoteCount;\n      this.isLess = this.isLess || localCount < remoteCount;\n    });\n    return this.isGreater && this.isLess;\n  }\n\n  isOutDated(): boolean {\n    // Default localTime to any early date so that \n    // remote always wins when local is empty.\n    const { remoteTime, localTime = '1970-01-01' } = this;\n    console.debug('\\n\\n::: isOutDated() :::', {localTime, remoteTime, local: this.local, remote: this.remote}, '\\n\\n::: /isOutDated() :::');\n    if (!remoteTime || !localTime) throw new Error('Missing modified time');\n    return new Date(localTime) >= new Date(remoteTime);\n  }\n\n  isOutOfOrder(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    const keys = Object.keys({...this.local, ...remote}).filter(k => k !== localId);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const drift = Math.abs((local[k] ?? 0) - (remote[k] ?? 0));\n      this.isWrongOrder = drift > 1;\n    }\n    return this.isWrongOrder;\n  }\n\n  merge() {\n    const merged: VClock = {};\n    const participants = new Set(Object.keys(this.local).concat(Object.keys(this.remote)));\n    // If the incoming participant vclock is lower, discard\n    for (const p of participants) {\n      const localP = this.local[p] || 0;\n      const remoteP = this.remote[p] || 0;\n      merged[p] = Math.max(localP, remoteP);\n    }\n    if (merged[this.localId] === undefined) {\n      merged[this.localId] = 0;\n    }\n    return merged;\n  }\n}","import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { ApplyChangeParams, Change, LogLevel, QueryParams, TinySynqOperation, TinySynqOptions, SyncableTable, TableNameRowParams, VClock, LatestChangesOptions } from './types.js';\nimport { Logger, ILogObj } from 'tslog';\nimport { VCompare } from './vcompare.class.js';\nimport { nanoid } from 'nanoid';\n\nconst log = new Logger({ name: 'tinysynq-web-init', minLevel: LogLevel.Info });\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\ntype PreProcessChangeOptions = {\n  change: Change, restore?: boolean\n}\n\ntype PreProcessChangeResult = { \n  valid: boolean;\n  reason: string;\n  vclock: VClock;\n  checks: Record<string, boolean>\n}\n\n/**\n * Basic utilities, mainly date-oriented.\n */\nexport type Utils = {\n  strtimeAsISO8601: string,\n  nowAsISO8601: string,\n  utcNowAsISO8601: () => string\n}\n\n/**\n * Parameters for retrieving table's ID column.\n * \n * @public\n */\nexport type GetTableIdColumnParams = {\n  table_name: string;\n}\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq extends EventTarget {\n  private _db: any;\n  private _dbPath: string;\n  private _deviceId: string | undefined;\n  private _synqPrefix?: string;\n  private _synqTables?: Record<string, SyncableTable>;\n  private _synqBatchSize: number = 20;\n  private _wal = true;\n  private log: Logger<ILogObj>;\n\n  /**\n   * Basic Helpers.\n   * \n   * @TODO move to a separate file.\n   * \n   * @public\n   */\n  readonly utils: Utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date().toISOString().replace('Z', '');\n    }\n  }\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    super();\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n    const _synqTables: Record<string, SyncableTable> = {};\n    opts.tables.forEach(t => {\n      _synqTables[t.name] = t;\n    })\n    this._dbPath = opts.filePath || '';\n    this._db = opts.sqlite3 || undefined;\n    this._synqPrefix = opts.prefix?.trim().replace(/[^a-z0-9]+$/i, '');\n    this._synqTables = _synqTables;\n    this._synqBatchSize = opts.batchSize || this._synqBatchSize;\n    this._wal = opts.wal ?? false;\n    this.log = new Logger({\n      name: 'tinysynq-node',\n      minLevel: opts.logOptions?.minLevel ?? LogLevel.Info,\n      type: opts.logOptions?.type || 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(opts.logOptions || {})\n    });\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbPath) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.log.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              this.log.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              this.log.debug(...args);\n            },\n            onunhandled: (event: any) => {\n              this.log.error('@UNHANDLED', event);\n            }\n          });\n        });\n        \n        this.log.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          this.log.debug(`open ${this.dbPath}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}?vfs=opfs`,\n          });\n  \n          this.log.info(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}`\n          });\n          this.log.info(\n            `OPFS not available, created in-memory database at ${res.result.filename}`\n          );\n        }\n\n        if (!res) return reject('Unable to start DB');\n        \n        const { dbId } = res;      \n        const conf = await promiser('config-get', {});\n        this.log.info('Running SQLite3 version', conf.result.version.libVersion);\n        this._db = promiser;\n        this._deviceId = dbId;\n        this.setDeviceId();\n    \n        // Set WAL mode if necessary\n        if (this._wal === true) {\n          await this.runQuery({\n            sql: `PRAGMA journal_mode=WAL;`\n          });\n        }\n        const timeout = 5000; // If it hasn't loaded in 5 seconds, it ain't loadin'.\n        let waited = 0;\n        let increment = 50;\n        const interval = setInterval(() => {\n          waited += increment;\n          if (this.db) {\n            clearInterval(interval);\n            this.dispatchEvent(new CustomEvent('ready'));\n            return resolve(this);\n          }\n\n          if (waited >= timeout && !this._db) {\n            this.log.error('@db', this.db)\n            clearInterval(interval);\n            return reject(`TinySynq failed to load. (waited ${waited}ms`);\n          }\n          this.log.error('::: Impossible. :::');\n        }, increment);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        this.log.error(err.name, err.message);\n        this.log.error(err)\n        reject('DB setup failed.');\n      }\n    });\n  };\n\n  /**\n   * SQLiteWASM instance (See {@link https://github.com/sqlite/sqlite-wasm | SQLite Wasm})\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Path to DB file\n   * \n   * @example\n   * \n   * `./app.db` or `/tmp/app.db`\n   */\n  get dbPath() {\n    return this._dbPath;\n  }\n\n  /**\n   * Automatically generated ID for device's DB instance.\n   * \n   * @remarks\n   * \n   * This ID is used by the sync protocol to identify the database.\n   * One it is generated once during setup and does not change. The\n   * value is stored in the `_meta` table (`meta_name='device_id'`).\n   * __Do not edit this value; doing so would corrupt synchronisation__.\n   */\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  /**\n   * Alias for {@link TinySynq.deviceId}.\n   */\n  get synqDbId() {\n    return this._deviceId;\n  }\n\n  /**\n   * The prefix used for TinySynq's tables.\n   * \n   * @defaultValue `tinysynq`\n   */\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  /**\n   * Object containing {@link SyncableTable}s, keyed by table name.\n   * \n   * @remarks\n   * \n   * A {@link SyncableTable} structure is never modified. TinySynq maintains \n   * its own tables and triggers for tracking and responding to changes.\n   * \n   * @returns Record\\<string, SyncableTable\\>\n   */\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  /**\n   * Number of records to process in each batch when syncing changes. \n   */\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  /**\n   * Enable or disable WAL mode.\n   * \n   * @defaultValue true\n   */\n  get wal() {\n    return this._wal;\n  }\n\n  /**\n   * Get a random 16-character ID generated by nanoid\n   * \n   * @returns string\n   */\n  getNewId() {\n    return nanoid(16);\n  }\n\n  /**\n   * Get the column used as identifier for the {@link SyncableTable}.\n   * \n   * @param params - Details of table for which to retrieve ID column.\n   * @returns Column name\n   */\n  getTableIdColumn(params: GetTableIdColumnParams) {\n    const {table_name} = params;\n    return this.synqTables![table_name]?.id as string;\n  }\n\n  /**\n   * If not already set, generates and sets deviceId.\n   */\n  async setDeviceId() {\n    // Set the device ID\n    let existing: any;\n    try {\n      existing = (await this.runQuery<any[]>({\n        sql: `SELECT meta_value FROM ${this.synqPrefix}_meta WHERE meta_name = 'device_id'`\n      }))[0];\n    }\n    catch(err) {\n      this.log.warn(`Couldn't retrieve device ID`);\n    }\n\n    log.warn('@device_id', existing);\n    if (!existing?.meta_value) {\n      const res = await this.runQuery<any[]>({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES (?,?) RETURNING *`,\n        values: ['device_id', this.deviceId]\n      });\n      log.warn('@created record for device_id:', res);\n      existing = res[0];\n    }\n    this._deviceId = existing?.meta_value;\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @remarks\n   * This method does not return any records, only the result of the operation.\n   * \n   * @param params - The SQL query and optionally any values.\n   * @returns\n   */\n  async run<T = any>(params: QueryParams): Promise<T> {\n    return this.runQuery(params);\n  }\n\n  /**\n   * Run multiple operations against the DB\n   * \n   * @remarks\n   * This method does not return any records.\n   * \n   * @param params - The SQL query and optionally an array of arrays or key/value pairs\n   * @returns Undefined or an error, if one occurred\n   */\n  async runMany(params: QueryParams) {\n    const {sql, values, prefix = ':'} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    const dbId = this.synqDbId;\n    this.log.debug('@runMany', {quid, sql, values});\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (const v of values) {\n          const bind = this.reformatQueryValues({values: v, prefix});\n          await this.db('exec', {dbId, sql, bind});\n        }\n      }\n      catch(err) {\n        this.log.error({quid, err, stack: (err as Error).stack});\n        reject(err);\n      }\n      resolve(true);\n    });\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @param params - The SQL query and optionally any values\n   * @returns Array of records returned from the database\n   */\n  async runQuery<T = any>(params: QueryParams): Promise<T> {\n    if (!this._db) {\n      const interval = setInterval(async () => {\n        if (!this._db) return;\n        clearInterval(interval);\n      }, 50);\n    }\n    const {sql, prefix = ':'} = params;\n    const values = this.reformatQueryValues({values: params.values, prefix});\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', quid, sql, values, '/');\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql,\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) {\n              this.log.debug('@runQuery RESOLVED', results.length, quid);\n              this.log.trace(sql, values);\n              return resolve(results as any);\n            }\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        this.log.error(quid, err, (err as Error).stack);\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Renames keys of a query's value object to make them compatible\n   * with the SQLiteWASM API's bind parameters.\n   * \n   * @param\n   * @returns \n   */\n  reformatQueryValues({values, prefix = ':'}: {values: any, prefix?: string}) {\n    if (Array.isArray(values)) return values;\n    if (typeof values === 'object') {\n      const keys = Object.keys(values);\n      const remapped: Record<string, any> = {};\n      keys.forEach(k => {\n        const newK = k.startsWith(prefix) ? k : `${prefix}${k}`;\n        remapped[newK] = values[k];\n      });\n      return remapped;\n    }\n    return values;\n  }\n\n  /**\n   * Returns the current device's unique TinySynq ID.\n   * \n   * @returns The device's assigned ID.\n   */\n  async getDeviceId(): Promise<string> {\n    if (this._deviceId) return this._deviceId;\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'device_id'`\n    });\n    return res[0].meta_value;\n  }\n\n  /**\n   * Returns an ISO8601 formatted date and time of the last successful local sync.\n   * \n   * @remarks\n   * \n   * A \"local sync\" is the process of sending local changes to the remote hub.\n   * \n   * @returns The time of the last sync.\n   */\n  async getLastSync(): Promise<string> {\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    this.log.trace('@getLastSync', res[0]);\n    return res[0]?.meta_value;\n  }\n  \n  /**\n   * Returns matching {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChanges(params?: {lastLocalSync?: string, columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync: string = params?.lastLocalSync || await this.getLastSync();\n    let { columns = ['c.*', 'trm.vclock'] } = params || {};\n    this.log.debug('@getChanges', lastLocalSync);\n  \n    let where: string = '';\n    let columnSelection = columns\n      .map(c => c.replace(/[^*._a-z0-9]+/gi, ''))\n      .join(',') || '*';\n  \n    if (lastLocalSync) {\n      where = 'WHERE c.modified > ?'\n    }\n    const sql = `\n      SELECT ${columnSelection}\n      FROM ${this._synqPrefix}_changes c\n      INNER JOIN ${this._synqPrefix}_record_meta trm\n      ON trm.table_name = c.table_name\n      AND trm.row_id = c.row_id\n      ${where}\n      ORDER BY c.modified ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  /**\n   * Returns {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChangesSinceLastSync(params?: {columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync = await this.getLastSync() || undefined;\n    return this.getChanges({...params, lastLocalSync});\n  };\n\n  /**\n   * Writes debug mode value (true) which disables recording \n   * of operations on syncable tables.\n   * \n   * @remarks\n   * \n   * The value set by this method is checked by dedicated triggers.\n   * If the value is `1`, the active trigger writes the data to the\n   * `*_dump` table. It's worth purging the table data once done \n   * with debugging.\n   * \n   * @returns Result of the operation.\n   */\n  async enableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Writes debug mode value (false) which disables recording \n   * of operations on syncable tables.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   * \n   * @returns Result of the operation.\n   */\n  async disableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Empties the `*_dump` table.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   */\n  async clearDebugData() {\n    await this.run({sql: `DELETE FROM ${this._synqPrefix}_dump`});\n    await this.run({sql: `UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = ${this._synqPrefix}_dump`});\n  }\n  \n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private enableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');`\n    });\n  }\n\n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private async disableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');`\n    });\n  }\n\n  async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.run({sql});\n    return savepoint;\n  }\n\n  async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  /**\n   * Retrieves a single record.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  private async getRecord<T>(params: TableNameRowParams): Promise<T | any> {\n    const {table_name, row_id} = params;\n    const idCol = this.getTableIdColumn({table_name: table_name});\n    const sql = `SELECT * FROM ${table_name} WHERE ${idCol} = ?`;\n    const res = await this.runQuery({sql, values: [row_id]});\n    this.log.debug('@getRecord', res);\n    return res[0];\n  }\n\n  /**\n   * Retrieves a single record by it's ID.\n   * \n   * @remarks\n   * \n   * The column used to identify the record is according to the {@link SyncableTable}\n   * that was provided in {@link TinySynqOptionsBase.tables} at instantiation.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  async getById<T>(params: TableNameRowParams): Promise<T | any> {\n    const{table_name, row_id} = params;\n    return this.getRecord({table_name, row_id});\n  }\n\n  async insertRecordMeta({change, vclock}: any) {\n    this.log.debug('<<< @insertRecordMeta >>>', {change, vclock});\n    const { table_name, row_id, source } = change;\n    const mod = vclock[this._deviceId!] || 0;\n    const values = {\n      table_name,\n      row_id,\n      mod,\n      source,\n      vclock: JSON.stringify(vclock),\n      modified: change.modified,\n    };\n    return this.runQuery({\n      sql: `\n      INSERT INTO ${this._synqPrefix}_record_meta (table_name, row_id, source, mod, vclock)\n      VALUES (:table_name, :row_id, :source, :mod, :vclock)\n      ON CONFLICT DO UPDATE SET source = :source, mod = :mod, vclock = :vclock, modified = :modified\n      RETURNING *\n      `,\n      values,\n    });\n  }\n\n  /**\n   * Get associated meta data (including `vclock`) for record.\n   * \n   * @param params - Object containing table/row parameters.\n   * \n   * @returns Object containing row data from `*_record_meta`.\n   */\n  async getRecordMeta(params: {table_name: string, row_id: string}) {\n    const {table_name, row_id} = params;\n    const sql = `\n    SELECT *\n    FROM ${this.synqPrefix}_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id`;\n    const res = await this.runQuery({sql, values: {table_name, row_id}});\n    return res[0];\n  }\n\n  /**\n   * Returns changes that couldn't be applied yet because they\n   * were received out of sequence.\n   * \n   * @returns Array of pending changes.\n   */\n  async getPending() {\n    const sql = `\n    SELECT *\n    FROM ${this._synqPrefix}_pending\n    ORDER BY id ASC\n    `;\n    const res = await this.runQuery({sql});\n    return res;\n  }\n\n  /**\n   * Creates new pending record to be applied later.\n   * \n   * @param opts - Options for processing out-of-order change\n   * @returns Newly created pending record\n   */\n  private async processOutOfOrderChange({change}: {change: Change}) {\n    const {id, ...data} = change;\n    const sql = this.createInsertFromSystemObject({\n      data,\n      table_name: `${this._synqPrefix}_pending`,\n    });\n    this.log.trace('@processOutOfOrderChange\\n', sql, change);\n    const values: any = { ...data};\n    values.vclock = JSON.stringify(data.vclock);\n    const res = await this.runQuery({sql, values});\n    this.log.trace('@processOutOfOrderChange\\n', {res});\n    return res;\n  }\n\n  /**\n   * Determines whether to treat conflicted change as valid or invalid.\n   * \n   * @param opts - Options for processing concurrent change\n   * @returns boolean \n   */\n  private async processConflictedChange<T>({ record, change }: {record: T|any, change: Change}): Promise<boolean> {\n    this.log.debug('@processConflictedChange START', record, change)\n    // INSERT won't have a local record so accept the incoming change\n    if (change.operation === TinySynqOperation.INSERT) return true;\n\n    const localMeta = await this.getRecordMeta({...change});\n    this.log.trace('<<<@ processConflictedChange LLW @>>>', change.id, change.table_name, change.row_id, {record, localMeta, change});\n    if (change.modified > localMeta.modified) {\n      this.log.debug('<!> INTEGRATING REMOTE', change.id, change.table_name, change.row_id);\n      // Update local with the incoming changes\n      return true;\n    }\n    else {\n      this.log.debug('<!> KEEPING LOCAL', change.id, change.table_name, change.row_id);\n      // Keep the local change, but record receipt of the record.\n      return false;\n    }\n  }\n\n  /**\n   * Checks for and handles issues with incoming change to be applied.\n   * \n   * @returns Result of pre-processing.\n   */\n  private async preProcessChange(\n    {change, restore}: PreProcessChangeOptions\n  ): Promise<PreProcessChangeResult> {\n    this.log.trace('@preProcess change', change)\n    let defaultReason = 'unknown';\n    let valid = false;\n    let reason = defaultReason;\n    const localId = this.deviceId!;\n    const { table_name, row_id, vclock: remote = {} } = change;\n    const record = await this.getRecord({table_name, row_id});\n    this.log.trace('@preProcess record:', record)\n    const meta = await this.getRecordMeta({table_name, row_id});\n    this.log.trace('@preProcess meta:', meta)\n    const local = meta?.vclock ? JSON.parse(meta.vclock) : {};\n    // If it's an insert, there won't be any meta.\n    const localTime = meta?.modified || '1970-01-01';\n    const remoteTime = change?.modified;\n\n    let latest: VClock = {};\n    const localV = new VCompare({ local, remote, localId, localTime, remoteTime });\n    let displaced = false;\n    let conflicted = false;\n    let stale = false;\n\n    // If we don't have the record, treat it as new\n    if (!restore && !record && change.operation !== TinySynqOperation.INSERT) {\n      reason = 'update before insert';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (restore || !record || !local || !local[localId]) {\n      latest = change.vclock;\n    }\n    \n    if (restore) {\n      valid = true;\n      reason = 'restoration';\n      latest = localV.merge();\n      return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n    }\n    else if (displaced = localV.isOutOfOrder()) {  \n      reason = 'received out of order';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (conflicted = localV.isConflicted()) {\n      valid = await this.processConflictedChange({record, change});\n      if (!valid) {\n        reason = 'concurrent writes'; \n      }\n      else {\n        latest = localV.merge();\n      }\n    }\n    else if (stale = localV.isOutDated()) {\n      reason = 'stale';\n    }\n    else if (reason === defaultReason) {\n      valid = true;\n      reason = '';\n      latest = localV.merge();\n    }\n\n    return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n  }\n\n  /**\n   * Creates an insert query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string.\n   */\n  createInsertFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    const columnsToInsert = Object.keys(data).join(',');\n    const editable = this._synqTables![table].editable || [];\n    const updates = Object.keys(data)\n      .filter(key => editable.includes(key))\n      .map(k => `${k} = :${k}`)\n      .join(',');    \n    if (!updates) throw new Error('No changes available');\n\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  /**\n   * Creates an insert query based on the system table name and data provided.\n   *  \n   * @param param0 - Parameters from which to create the query.\n   * \n   * @returns A SQL query string. \n   */\n  private createInsertFromSystemObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    this.log.silly('@createInsert...', {data});\n    const columnsToInsert = Object.keys(data).join(',');\n    const updates = Object.keys(data)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n    return insertSql;\n  }\n\n  private async updateLastSync({change}: {change: Change}) {\n    await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      values: { name: 'last_local_sync'},\n    });\n    await this.runQuery({\n      sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, :value)`,\n      values: { name: 'last_sync', value: change.id }\n    });\n  }\n\n  private async applyChange({\n    change,\n    restore,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      // Check that the changes can actually be applied\n      const changeStatus = await this.preProcessChange({change, restore});\n      if (!changeStatus?.valid) {\n        this.log.warn('>>> Invalid change', changeStatus);\n        this.updateLastSync({change});\n        return;\n      }\n\n      const table = this.synqTables![change.table_name];\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n      else {\n        // There's no data so bail\n        throw new Error(`Cannot perform update with empty data:\\n${JSON.stringify(change, null, 2)}`);\n      }\n \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n\n      this.log.silly('@applyChange', {change, table, changeStatus});\n      switch(change.operation) {\n        case 'INSERT':\n        case 'UPDATE':\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          this.log.debug('>>> DELETE SQL <<<', sql, change.row_id);\n          await this.run({sql, values: [change.row_id]});\n          break;\n      }\n      await this.updateLastSync({change});\n\n      // Insert merged VClock data\n      const updatedRecordMeta = await this.insertRecordMeta({change, vclock: changeStatus.vclock});\n      this.log.silly({updatedRecordMeta});\n    }\n    catch (error: any) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}. Rolled back.`, {change});\n      this.log.error(error.stack)\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB({ changes, restore = false }: { changes: Change[], restore?: boolean }) {\n    await this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, restore, savepoint});\n        }\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    await this.enableTriggers();\n    this.log.silly(`Applied ${changes.length} change(s)`);\n  };\n\n  /**\n   * Get items that have been recently changed.\n   * \n   * @param opts \n   */\n  getFilteredChanges(opts?: LatestChangesOptions) {\n    let and: string[] = [];\n    let values: any = {};\n    if (opts?.exclude) {\n      and.push('source != :exclude');\n      values.exclude = opts.exclude;\n    }\n    if (opts?.checkpoint) {\n      and.push('id > :checkpoint');\n      values.checkpoint = opts.checkpoint;\n    }\n    else if (opts?.since) {\n      and.push('modified > :since');\n      values.since = opts.since\n    }\n    const sql = `\n    SELECT id, table_name, row_id, data, operation, source, vclock, modified\n    FROM ${this.synqPrefix}_changes\n    WHERE 1=1\n    ${and.join(' AND ')}\n    ORDER BY modified ASC`;\n\n    return this.runQuery({sql, values});\n  }\n\n  async tablesReady(): Promise<void> {\n    await this.enableTriggers();\n  }\n\n  async obliterate(): Promise<void> {\n    return await this.db({\n      type: 'close', \n      dbId: this.deviceId,\n      args: {unlink: true}\n    });\n  }\n}","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, SyncableTable } from \"./types.js\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst initTinySynq = async (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysynq-setup', ...logOptions});\n  const ts = new TinySynq(config);\n\n  /**\n   * Pretty important: make sure to call `init()` :-)\n   */\n\n  await ts.init();\n\n  const getRecordMetaInsertQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    /* \n    db.is kind of insane, but it works. A rundown of what's happening:\n    - We're creating a trigger after a deletion (the easy part)\n    - Aside from recording the changes, we also need to add record-specific metadata:\n      - table name and row identifier,\n      - the number of times the record has been touched (including creation)\n      - the map of all changes across all devices — a Vector Clock (JSON format)\n    - Getting the vector clock is tricky, partly because of SQLite limitations\n      (no variables, control structures), and partly because it's possible that\n      no meta exists for the record.\n    - To work around db.we do a select to get the meta, but perform a union with\n      another select that just selects insert values.\n    - Included in both selects is\n      a 'peg' which we use to sort the UNIONed rows to ensure that if a valid row\n      exists, it's the first row returned.\n    - Now we select from db.union and limit to 1 result. If a record exists\n      then we get that record. If not, we get the values ready for insertion.\n    - Finally, if there's a conflict on PRIMAY KEY or UNIQUE contraints, we update\n      only the columns configured as editable.\n    */\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n    INSERT INTO ${ts.synqPrefix}_record_meta (table_name, row_id, source, mod, vclock)\n    SELECT table_name, row_id, source, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '${table.name}' as table_name,\n        ${version}.${table.id} as row_id, \n        '${ts.deviceId}' as source, \n        IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$.${ts.deviceId}', IFNULL(json_extract(vclock,'$.${ts.deviceId}'), 0) + 1) as vclock\n      FROM ${ts.synqPrefix}_record_meta\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id}\n      UNION\n      SELECT 0 as peg, '${table.name}' as table_name, ${version}.${table.id} as row_id, '${ts.deviceId}' as source, 1, json_object('${ts.deviceId}', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      source = '${ts.deviceId}',\n      mod = json_extract(excluded.vclock,'$.${ts.deviceId}'),\n      vclock = json_extract(excluded.vclock,'$'),\n      modified = '${ts.utils.utcNowAsISO8601().replace('Z', '')}'\n    ;`;\n    log.silly(sql);\n    return sql;\n  }\n\n  const getChangeUpdateQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n      UPDATE ${ts.synqPrefix}_changes\n      SET vclock = trm.vclock, source = trm.source\n      FROM (\n        SELECT vclock, source\n        FROM ${ts.synqPrefix}_record_meta\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n      ) AS trm\n      WHERE id IN (\n        SELECT id FROM ${ts.synqPrefix}_changes\n        WHERE table_name = '${table.name}'\n        AND row_id = ${version}.${table.id}\n        ORDER by id desc\n        LIMIT 1\n      );\n    `;\n    return sql;\n  }\n\n  const setupTriggersForTable = async ({ table }: { table: SyncableTable }) => {\n    log.debug('Setting up triggers for', table.name);\n\n    // Template for inserting the new value as JSON in the `*_changes` table.\n    const jsonObject = (await ts.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    log.silly('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    /**\n     * These triggers run for changes originating locally. They are disabled\n     * when remote changes are being applied (`triggers_on` in `*_meta` table).\n     */\n\n    // Ensure triggers are up to date\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_insert_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_update_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    await ts.run({sql});\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n\n        ${getChangeUpdateQuery({table})}\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n        \n        ${getRecordMetaInsertQuery({table, remove: true})}\n        \n        ${getChangeUpdateQuery({table, remove: true})}\n      END;`\n    });\n\n    /**\n     * All the triggers below will only be executed if `meta_name=\"debug_on\"`\n     * has the `meta_value=1` in the *_meta table, regardless of `triggers_on`.\n     */\n\n    // Remove previous versions\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta`});\n    await ts.run({sql: `DROP TRIGGER IF EXISTS ${ts.synqPrefix}_dump_after_update_record_meta`});\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow a rudimentary tracing of DB actions on the synced tables.\n     */\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'INSERT', ${jsonObject.jo});\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    const oldJsonObject = jsonObject.jo.replace(/NEW/g, 'OLD');\n    \n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'DELETE', ${oldJsonObject});\n      END;`\n    });\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow comparison record meta before and after insert.\n     */\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_before_insert_record_meta\n      BEFORE INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_insert_record_meta\n      AFTER INSERT ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await ts.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${ts.synqPrefix}_dump_after_update_record_meta\n      AFTER UPDATE ON ${ts.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${ts.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${ts.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    /* END OF DEBUG TRIGGERS */\n  }\n\n  // Create a change-tracking table and index\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      source TEXT,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_modified_idx ON ${ts.synqPrefix}_changes(modified)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_change_table_row_idx ON ${ts.synqPrefix}_changes(table_name, row_id)`\n  });\n\n  // Change *_pending is essentially a clone of *_changes used to hold items that\n  // cannot be applied yet because intermediate/preceding changes haven't been received.\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      source TEXT NOT NULL,\n      vclock BLOB NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_pending_table_row_idx ON ${ts.synqPrefix}_pending(table_name, row_id)`\n  });\n\n  // Create a notice table\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  }); \n\n  // Create record meta table and index\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER,\n      source TEXT NOT NULL,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  });\n\n  await ts.run({\n    sql:`CREATE UNIQUE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_idx ON ${ts.synqPrefix}_record_meta(table_name, row_id)`\n  });\n  // @TODO: These may actually need to be compound indexes; need to evaluate queries.\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_source_idx ON ${ts.synqPrefix}_record_meta(source)`\n  });\n  ts.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_record_meta_modified_idx ON ${ts.synqPrefix}_record_meta(modified)`\n  });\n\n  // Create meta table\n  await ts.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  `});\n\n  await ts.run({\n    sql: `\n    CREATE TABLE IF NOT EXISTS ${ts.synqPrefix}_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  `});\n\n  await ts.run({\n    sql: `CREATE INDEX IF NOT EXISTS ${ts.synqPrefix}_meta_name_idx ON ${ts.synqPrefix}_meta(meta_name)`\n  });\n  \n  // Enable debug mode\n  if (debug) await ts.enableDebug();\n\n  // Set the device ID\n  await ts.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n      await ts.run({\n        sql: preInitQuery\n      });\n    }\n  }\n\n  log.debug(`@${ts.synqPrefix}_meta`, ts.runQuery({sql:`SELECT * FROM pragma_table_info('${ts.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, ts.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = await ts.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    log.debug('@exists?', table.name, exists);\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    await setupTriggersForTable({ table });\n    ts.tablesReady();\n  }\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.debug(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      await ts.run({\n        sql: postInitQuery\n      });\n    }\n  }\n\n  return ts;\n};\n\nexport default initTinySynq;","import { TinySynq } from \"./tinysynq.class.js\";\nimport { Change, SyncRequestType, SyncResponseType } from \"./types.js\";\n\ninterface TinySynqClientConfig {\n  /**\n   * Initialised TinySynq instance.\n   */\n  ts: TinySynq;\n  /**\n   * The domain or IP address (no protocol or port).\n   * \n   * @default localhost\n   */\n  hostname?: string;\n  /**\n   * The port number on which to connect.\n   *\n   * @default 7174\n   */\n  port?: number;\n  /**\n   * Whether or not it should a secure connection (wss://)\n   * \n   * @default false\n   */\n  secure?: boolean;\n}\n\nlet socket: WebSocket;\n\nconst defaultConfig = {\n  hostname: 'localhost',\n  port: 7174,\n  secure: false,\n};\n\nexport class TinySynqClient extends EventTarget {\n\n  private _config: TinySynqClientConfig;\n  private _serverUrl: string;\n  private _ts: TinySynq;\n  private _ws: WebSocket | undefined;\n\n  get serverUrl() {\n    return this._serverUrl;\n  }\n\n  get ts() {\n    return this._ts;\n  }\n\n  get ws() {\n    return this._ws;\n  }\n\n  constructor(config: TinySynqClientConfig) {\n    super();\n    if (!config?.ts) throw new Error('Invalid client configuration');\n    this._config = config;\n    this._ts = config.ts;\n    const finalConfig = {...defaultConfig, ...this._config};\n    const { secure, hostname, port = '' } = finalConfig;\n    const ws = 'ws' + (secure ? 's' : '');\n    this._serverUrl = `${ws}://${hostname}${port ? ':' : ''}${port}`;\n  }\n\n  isOpenOrConnecting() {\n    return this.ws && [Number(this.ws.OPEN), Number(this.ws.CONNECTING)].includes(this.ws.readyState)\n  }\n  \n  async connect(): Promise<WebSocket> {\n    return new Promise((resolve, reject) => {\n      if (this.isOpenOrConnecting()) {\n        return resolve(this.ws as WebSocket);\n      }\n      this._ws = new WebSocket(this.serverUrl);\n      this._ws.addEventListener('open', (e) => {\n        console.log(\"TinySynq socket ready.\", e);\n        resolve(this.ws as WebSocket);\n      });\n      this._ws.addEventListener('error', (e) => {\n        console.log(\"TinySynq socket error:\", e);\n        if (this.isOpenOrConnecting()) reject(e);\n      });\n      this._ws.addEventListener('close', (e) => {\n        console.log('Closing TinySynq socket...', e);\n      });\n      this._ws.addEventListener('message', this.handleMessage.bind(this));\n    });\n  }\n\n  async push() {\n    if (!this.ts) return;\n    const changes = await this.ts.getChanges();\n    if (!changes) return console.log('no changes');\n    const payload = {type: SyncRequestType.push, changes, source: this._ts.deviceId};\n    console.debug('@push', payload);\n    this._ws?.send(JSON.stringify(payload));\n  }\n\n  async pull() {\n    const payload = {type: SyncRequestType.pull, source: this._ts.deviceId};\n    console.debug('@pull', payload);\n    this._ws?.send(JSON.stringify(payload));\n  }\n\n  private async handleMessage(e: any) {\n    console.debug('@message', e);\n    const data = JSON.parse(e.data);\n    console.debug('@parsed', data)\n    if (data.type !== SyncResponseType.nack) {\n      if (data.changes) {\n        console.warn('@client processing changes')\n        const changes = data.changes.map((c: Change) => {\n          if (typeof c.vclock === 'string') {\n            c.vclock = JSON.parse(c.vclock);\n          }\n          return c;\n        });\n        console.debug('@client changes', changes)\n        await this.ts.applyChangesToLocalDB({changes});\n        const event = new CustomEvent('changes', {\n          detail: data.changes\n        });\n        console.debug('::: Disptaching event...', event);\n        this.dispatchEvent(event)\n      }\n    }\n    else {\n      console.error('Sync failed', data);\n      this.dispatchEvent(\n        new CustomEvent('error', {\n          detail: data\n        })\n      );\n    }\n  }\n}\n\n"],"names":["TinySynqOperation","SyncRequestType","SyncResponseType","LogLevel","VCompare","_ref","local","remote","localId","localTime","remoteTime","this","isGreater","isLess","isWrongOrder","JSON","parse","_proto","prototype","setRemote","_ref2","isConflicted","data","_this","Object","keys","_extends","forEach","k","localCount","remoteCount","isOutDated","_this$localTime","console","debug","Error","Date","isOutOfOrder","filter","i","length","_local$k","_remote$k","drift","Math","abs","merge","_step","merged","_iterator","_createForOfIteratorHelperLoose","Set","concat","done","p","value","max","undefined","_catch","body","recover","result","e","then","_iteratorSymbol","Symbol","iterator","s","o","_settle","bind","pact","state","v","observer","_Pact","onRejected","callback","onFulfilled","_isSettledPact","thenable","log","Logger","name","minLevel","Info","_cycle","reject","_fixup","values","target","push","array","check","strtimeAsISO8601","TinySynq","_EventTarget","opts","_opts$prefix","_opts$wal","_opts$logOptions$minL","_opts$logOptions","_opts$logOptions2","_this2","call","_db","_dbPath","_deviceId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","toISOString","replace","filePath","sqlite3","tables","t","prefix","trim","batchSize","wal","logOptions","type","maskValuesOfKeys","hideLogPositionForProduction","_inheritsLoose","init","_this3","db","Promise","resolve","dbPath","res","_promiser","sqlite3Worker1Promiser","onready","onerror","err","error","_this$log","apply","slice","arguments","onunhandled","event","promiser","_temp4","dbId","conf","_temp2","waited","interval","setInterval","clearInterval","dispatchEvent","CustomEvent","info","version","libVersion","setDeviceId","_temp","runQuery","sql","_temp3","filename","_promiser2","_promiser3","message","getNewId","nanoid","getTableIdColumn","params","_this$synqTables$tabl","synqTables","table_name","id","_temp8","existing","_temp6","_existing","_this4","meta_value","warn","_temp5","_existing2","synqPrefix","deviceId","_temp7","_this4$runQuery","run","runMany","_this6","_params$prefix","quid","ceil","random","synqDbId","_temp11","_temp10","_temp9","_forOf","reformatQueryValues","stack","_this7","_params$prefix2","results","row","trace","col","columnNames","_ref$prefix","Array","isArray","remapped","newK","startsWith","getDeviceId","_this8","getLastSync","_this9","_res$","getChanges","_temp12","lastLocalSync","_ref2$columns","columns","_this10","where","map","c","join","_params$lastLocalSync","getChangesSinceLastSync","_this11","enableDebug","disableDebug","_this13","clearDebugData","_this14","enableTriggers","disableTriggers","_this15","beginTransaction","savepoint","now","commitTransaction","_ref3","rollbackTransaction","_ref4","getRecord","_this19","row_id","idCol","getById","insertRecordMeta","_ref5","change","vclock","_this21","mod","source","stringify","modified","getRecordMeta","getPending","_this23","processOutOfOrderChange","_ref6","_this24","_objectWithoutPropertiesLoose","_excluded","createInsertFromSystemObject","processConflictedChange","_ref7","record","_this25","operation","INSERT","localMeta","preProcessChange","_ref8","restore","_this26","defaultReason","valid","reason","_change$vclock","meta","_temp18","_exit","_temp16","_result2","latest","checks","stale","displaced","conflicted","_temp15","_valid$reason$vclock$","localV","_temp19","_temp20","_this26$processConfli","_temp17","createInsertFromObject","_ref9","table","columnsToInsert","editable","updates","key","includes","_ref10","silly","insertPlaceholders","updateLastSync","_ref11","_this27","applyChange","_ref12","_this28","changeStatus","_temp22","updatedRecordMeta","recordData","_temp21","awaitBody","dispatchIndex","cases","test","testValue","discriminant","outer","_resumeAfterTest","_resumeAfterBody","fallthroughCheck","_switch","insertSql","_interrupt","applyChangesToLocalDB","_ref13","changes","_ref13$restore","_this29","_temp27","_temp26","update","stage","shouldContinue","updateValue","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp25","_temp24","_temp23","getFilteredChanges","and","exclude","checkpoint","since","tablesReady","obliterate","args","unlink","_createClass","get","_wrapNativeSuper","EventTarget","step","next","return","TypeError","_forTo","defaultConfig","hostname","port","secure","TinySynqClient","config","_config","_serverUrl","_ts","_ws","ts","finalConfig","_finalConfig$port","isOpenOrConnecting","ws","Number","OPEN","CONNECTING","readyState","connect","WebSocket","serverUrl","addEventListener","handleMessage","_this3$_ws","payload","send","pull","_this4$_ws","_this5","nack","detail","preInit","postInit","getRecordMetaInsertQuery","_ref$remove","remove","getChangeUpdateQuery","_ref2$remove","_result","postInitQuery","exists","_ts$runQuery","jsonObject","jo","oldJsonObject","setupTriggersForTable","preInitQuery"],"mappings":"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"}