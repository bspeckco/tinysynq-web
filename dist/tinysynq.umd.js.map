{"version":3,"file":"tinysynq.umd.js","sources":["../src/lib/types.ts","../src/lib/vcompare.class.ts","../src/lib/tinysynq.class.ts","../src/lib/index.ts"],"sourcesContent":["import { ISettingsParam, ILogObj } from 'tslog';\n\n/**\n * A {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance.\n * \n * @public\n */\nexport type SQLiteWASM = any\n\n/**\n * Provided to TinySynq constructor.\n * \n * @public\n */\nexport interface SyncableTable {\n  /**\n   * Table name.\n   */\n  name: string;\n  /**\n   * Row identifier; typically the column used as primary key.\n   */\n  id: string;\n  /**\n   * Columns that can be updated by a sync-based change.\n   */\n  editable: string[];\n}\n\n/**\n * Base options for TinySynq constructor.\n * \n * @public\n */\nexport interface TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   * \n   * @remarks\n   * \n   * If not provided, {@link TinySynqOptionsBase.filePath} must be set.\n   * \n   */\n  sqlite3?: SQLiteWASM;\n  /**\n   * Path to SQLite3 database file.\n   * \n   * @remarks\n   * If not provided, {@link TinySynqOptionsBase.sqlite3} must be set.\n   */\n  filePath?: string;\n  /**\n   * Prefix to use for TinySynq tables (trailing underscores will be removed).\n   */\n  prefix: string;\n  /**\n   * Tables that should be synced between devices.\n   */\n  tables: SyncableTable[];\n  /**\n   * Maximum number of changes to process at once.\n   */\n  batchSize?: number;\n  /**\n   * Enable or disable WAL mode.\n   */\n  wal?: boolean;\n  /**\n   * Array of queries to run before TinySynq's change tracking is configured.\n   * \n   * @remarks\n   * Include create statements for syncable tables here.\n   */\n  preInit?: string[];\n  /**\n   * Array of queries to run after TinySynq's change tracking is configured\n   * \n   * @remarks\n   * You might place any insert queries here.\n   */\n  postInit?: string[];\n  /**\n   * Configure logging options.\n   * \n   * @remarks\n   * TinySynq uses TSLog for logging. All optiions are passed directly to it.\n   * See https://tslog.js.org/#/?id=settings for details\n   */\n  logOptions?: ISettingsParam<ILogObj>;\n  /**\n   * Enable/disable debug mode\n   * \n   * When enabled, all INSERT/UPDATE/DELETE actions on syncable tables are written \n   * to the *_dump table for inspection.\n   */\n  debug?: boolean;\n}\n\n/** \n * Constructor options TinySynq instance.\n * \n * Provide either an existing {@link https://github.com/WiseLibs/better-sqlite3/blob/master/docs/api.md | BetterSqlite3} instance (`sqlite3`) or the `filePath`.\n * \n * @public\n */\nexport interface TinySynqOptionsWithInstance extends TinySynqOptionsBase {\n  /**\n   * A BetterSqlite3 instance.\n   */\n  sqlite3: SQLiteWASM;\n}\n\nexport interface TinySynqOptionsWithFilePath extends TinySynqOptionsBase{\n  /**\n   * Path to SQLite3 database file.\n   */\n  filePath: string;\n}\n\n/** \n * {@inheritdoc TinySynqOptionsBase}\n * \n * @public\n */\nexport type TinySynqOptions = TinySynqOptionsWithInstance | TinySynqOptionsWithFilePath\n\nexport type SQLite3 = any\n\n/**\n * Basic query params for methods that read from/write to DB.\n * \n * @public\n */\nexport type QueryParams = {\n  sql: string;\n  values?: any;\n  prefix?: string;\n}\n\n/**\n * Table name and row parameters for retrieving data for a specific record.\n */\nexport interface TableNameRowParams {\n  table_name: string;\n  row_id: string;\n}\n\nexport interface ApplyChangeParams {\n  change: Change,\n  restore?: boolean,\n  savepoint: string\n}\n\nexport interface MetaRowData {\n  meta_name: string;\n  meta_value: string;\n}\n\nexport type VClock = {\n  [deviceId: string]: number;\n}\n\nexport enum TinySynqOperation {\n  'INSERT' = 'INSERT',\n  'UPDATE' = 'UPDATE',\n  'DELETE' = 'DELETE'\n}\n\n/**\n * Object transferred between devices to convey individual record changes.\n * \n * @public\n */\nexport interface Change {\n  /**\n   * Change record ID from central server.\n   */\n  id?: number;\n  /**\n   * Table name of the record that was modified.\n   */\n  table_name: string;\n  /**\n   * Row ID of the record that was modified.\n   */\n  row_id: string;\n  /**\n   * The type of operation that took place.\n   */\n  operation: keyof typeof TinySynqOperation;\n  /**\n   * The serialised object in the post-modified state. \n   */\n  data: string; // JSON string\n  /**\n   * Vector Clock holding all device values for the record, as known by the source device of the change.\n   */\n  vclock: VClock;\n  /**\n   * An ISO8601 formatted date and time that the change was recorded on the source device.\n   */\n  modified: string;\n}\n\nexport enum LogLevel {\n  Silly,\n  Trace,\n  Debug,\n  Info,\n  Warn,\n  Error,\n  Fatal\n};","import { VClock } from \"./types.js\";\n\ntype VectorClockParams = {\n  local: VClock;\n  remote: VClock;\n  localId: string;\n}\n\ntype RemoteVClockParams = {\n  remote: VClock;\n}\n\nexport class VCompare { // @TODO: rename to VCompare\n\n  private local: VClock;\n  private isGreater = false;\n  private isLess = false;\n  private isWrongOrder = false;\n  private remote: VClock = {};\n  private localId: string;\n\n  constructor({ local, remote, localId }: VectorClockParams) {\n    this.local = local;\n    this.remote = typeof remote === 'string'\n      ? JSON.parse(remote)\n      : remote;\n    this.localId = localId;\n  }\n\n  setRemote({ remote }: RemoteVClockParams) {\n    this.remote = remote;\n  }\n\n  isConflicted(data?: RemoteVClockParams): boolean {\n    const remote = data?.remote || this.remote;\n    const keys = Object.keys({...this.local, ...remote});\n    keys.forEach(k => {\n      const localCount = this.local[k] || 0;\n      const remoteCount = remote[k] || 0;\n      this.isGreater = this.isGreater || localCount > remoteCount;\n      this.isLess = this.isLess || localCount < remoteCount;\n    });\n    \n    return this.isGreater && this.isLess;\n  }\n\n  isOutDated(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    // Locally changes have taken places that the remote is missing.\n    return local[localId] > remote[localId];\n  }\n\n  isOutOfOrder(): boolean {\n    const { remote, local, localId } = this;\n    if (!remote || !local) throw new Error('Remote vector clock not set');\n    const keys = Object.keys({...this.local, ...remote}).filter(k => k !== localId);\n    for (let i = 0; i < keys.length; i++) {\n      const k = keys[i];\n      const drift = Math.abs((local[k] ?? 0) - (remote[k] ?? 0));\n      this.isWrongOrder = drift > 1;\n    }\n    return this.isWrongOrder;\n  }\n\n  merge() {\n    const merged: VClock = {};\n    const participants = new Set(Object.keys(this.local).concat(Object.keys(this.remote)));\n    // If the incoming participant vclock is lower, discard\n    for (const p of participants) {\n      const localP = this.local[p] || 0;\n      const remoteP = this.remote[p] || 0;\n      merged[p] = Math.max(localP, remoteP);\n    }\n    if (merged[this.localId] === undefined) {\n      merged[this.localId] = 0;\n    }\n    return merged;\n  }\n}","import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { ApplyChangeParams, Change, LogLevel, QueryParams, TinySynqOperation, TinySynqOptions, SyncableTable, TableNameRowParams, VClock } from './types.js';\nimport { Logger, ILogObj } from 'tslog';\nimport { VCompare } from './vcompare.class.js';\nimport { nanoid } from 'nanoid';\n\nconst log = new Logger({ name: 'tinysynq-web-init', minLevel: LogLevel.Info });\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\ntype PreProcessChangeOptions = {\n  change: Change, restore?: boolean\n}\n\ntype PreProcessChangeResult = { \n  valid: boolean;\n  reason: string;\n  vclock: VClock;\n  checks: Record<string, boolean>\n}\n\n/**\n * Basic utilities, mainly date-oriented.\n */\nexport type Utils = {\n  strtimeAsISO8601: string,\n  nowAsISO8601: string,\n  utcNowAsISO8601: () => string\n}\n\n/**\n * Parameters for retrieving table's ID column.\n * \n * @public\n */\nexport type GetTableIdColumnParams = {\n  table_name: string;\n}\n\n/**\n * The main class for managing SQLite3 synchronisation.\n * \n * @remarks\n * Expects SQLite3 version \\>=3.45.1\n * \n * @public\n */\nexport class TinySynq {\n  private _db: any;\n  private _dbPath: string;\n  private _deviceId: string | undefined;\n  private _synqPrefix?: string;\n  private _synqTables?: Record<string, SyncableTable>;\n  private _synqBatchSize: number = 20;\n  private _wal = true;\n  private log: Logger<ILogObj>;\n\n  /**\n   * Basic Helpers.\n   * \n   * @TODO move to a separate file.\n   * \n   * @public\n   */\n  readonly utils: Utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date((new Date()).toUTCString()).toISOString();\n    }\n  }\n\n  /**\n   * Configure new TinySynq instance.\n   * \n   * @param opts - Configuration options\n   */\n  constructor(opts: TinySynqOptions) {\n    if (!opts.filePath && !opts.sqlite3) {\n      throw new Error('No DB filePath or connection provided');\n    }\n    const _synqTables: Record<string, SyncableTable> = {};\n    opts.tables.forEach(t => {\n      _synqTables[t.name] = t;\n    })\n    this._dbPath = opts.filePath || '';\n    this._db = opts.sqlite3 || undefined;\n    this._synqPrefix = opts.prefix?.trim().replace(/[^a-z0-9]+$/i, '');\n    this._synqTables = _synqTables;\n    this._synqBatchSize = opts.batchSize || this._synqBatchSize;\n    this._wal = opts.wal ?? false;\n    this.log = new Logger({\n      name: 'tinysynq-node',\n      minLevel: LogLevel.Debug,\n      type: 'json',\n      maskValuesOfKeys: ['password', 'encryption_key'],\n      hideLogPositionForProduction: true,\n      ...(opts.logOptions || {})\n    });\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbPath) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        this.log.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              this.log.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              this.log.debug(...args);\n            },\n            onunhandled: (event: any) => {\n              this.log.error('@UNHANDLED', event);\n            }\n          });\n        });\n        \n        this.log.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          this.log.debug(`open ${this.dbPath}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}?vfs=opfs`,\n          });\n  \n          this.log.info(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbPath}`\n          });\n          this.log.info(\n            'OPFS not available, created in-memory database at',\n            res.result.filename, '$1'\n          );\n        }\n  \n        if (!res) return reject('Unable to start DB');\n\n        const { dbId } = res;\n        this._deviceId = dbId;\n        this.setDeviceId();\n      \n        const conf = await promiser('config-get', {});\n        this.log.info('Running SQLite3 version', conf.result.version.libVersion);\n        \n        this._db = promiser;\n    \n        // Set WAL mode if necessary\n        if (this._wal === true) {\n          await this.runQuery({\n            sql: `PRAGMA journal_mode=WAL;`\n          });\n        }\n        resolve(this);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        this.log.error(err.name, err.message);\n        this.log.error(err)\n        reject('DB setup failed.');\n      }\n    });\n  };\n\n  /**\n   * SQLiteWASM instance (See {@link https://github.com/sqlite/sqlite-wasm | SQLite Wasm})\n   */\n  get db() {\n    return this._db;\n  }\n\n  /**\n   * Path to DB file\n   * \n   * @example\n   * \n   * `./app.db` or `/tmp/app.db`\n   */\n  get dbPath() {\n    return this._dbPath;\n  }\n\n  /**\n   * Automatically generated ID for device's DB instance.\n   * \n   * @remarks\n   * \n   * This ID is used by the sync protocol to identify the database.\n   * One it is generated once during setup and does not change. The\n   * value is stored in the `_meta` table (`meta_name='device_id'`).\n   * __Do not edit this value; doing so would corrupt synchronisation__.\n   */\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  /**\n   * Alias for {@link TinySynq.deviceId}.\n   */\n  get synqDbId() {\n    return this._deviceId;\n  }\n\n  /**\n   * The prefix used for TinySynq's tables.\n   * \n   * @defaultValue `tinysynq`\n   */\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  /**\n   * Object containing {@link SyncableTable}s, keyed by table name.\n   * \n   * @remarks\n   * \n   * A {@link SyncableTable} structure is never modified. TinySynq maintains \n   * its own tables and triggers for tracking and responding to changes.\n   * \n   * @returns Record\\<string, SyncableTable\\>\n   */\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  /**\n   * Number of records to process in each batch when syncing changes. \n   */\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  /**\n   * Enable or disable WAL mode.\n   * \n   * @defaultValue true\n   */\n  get wal() {\n    return this._wal;\n  }\n\n  /**\n   * Get a random 16-character ID generated by nanoid\n   * \n   * @returns string\n   */\n  getNewId() {\n    return nanoid(16);\n  }\n\n  /**\n   * Get the column used as identifier for the {@link SyncableTable}.\n   * \n   * @param params - Details of table for which to retrieve ID column.\n   * @returns Column name\n   */\n  getTableIdColumn(params: GetTableIdColumnParams) {\n    const {table_name} = params;\n    return this.synqTables![table_name]?.id as string;\n  }\n\n  /**\n   * If not already set, generates and sets deviceId.\n   */\n  async setDeviceId() {\n    // Set the device ID\n    let existing: any;\n    try {\n      existing = (await this.runQuery<any[]>({\n        sql: `SELECT meta_value FROM ${this.synqPrefix}_meta WHERE meta_name = 'device_id'`\n      }))[0];\n    }\n    catch(err) {\n      this.log.warn(`Couldn't retrieve device ID`);\n    }\n\n    log.warn('@device_id', existing);\n    if (!existing?.meta_value) {\n      const res = await this.runQuery<any[]>({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES (?,?) RETURNING *`,\n        values: ['device_id', this.deviceId]\n      });\n      log.warn('@created record for device_id:', res);\n      existing = res[0];\n    }\n    this._deviceId = existing?.meta_value;\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @remarks\n   * This method does not return any records, only the result of the operation.\n   * \n   * @param params - The SQL query and optionally any values.\n   * @returns\n   */\n  async run<T = any>(params: QueryParams): Promise<T> {\n    return this.runQuery(params);\n  }\n\n  /**\n   * Run multiple operations against the DB\n   * \n   * @remarks\n   * This method does not return any records.\n   * \n   * @param params - The SQL query and optionally an array of arrays or key/value pairs\n   * @returns Undefined or an error, if one occurred\n   */\n  async runMany(params: QueryParams) {\n    const {sql, values, prefix = ':'} = params;\n    const quid = Math.ceil(Math.random() * 1000000);\n    const dbId = this.synqDbId;\n    this.log.debug('@runMany', {quid, sql, values});\n    return new Promise(async (resolve, reject) => {\n      try {\n        for (const v of values) {\n          const bind = this.reformatQueryValues({values: v, prefix});\n          await this.db('exec', {dbId, sql, bind});\n        }\n      }\n      catch(err) {\n        this.log.error({quid, err, stack: (err as Error).stack});\n        reject(err);\n      }\n      resolve(true);\n    });\n  }\n\n  /**\n   * Run an operation against the DB\n   * \n   * @param params - The SQL query and optionally any values\n   * @returns Array of records returned from the database\n   */\n  async runQuery<T = any>(params: QueryParams): Promise<T> {\n    const {sql, prefix = ':'} = params;\n    const values = this.reformatQueryValues({values: params.values, prefix});\n    const quid = Math.ceil(Math.random() * 1000000);\n    this.log.debug('@runQuery', quid, sql, values, '/');\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql,\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) {\n              this.log.debug('@runQuery RESOLVED', quid);\n              return resolve(results as any);\n            }\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        this.log.error(quid, err, (err as Error).stack);\n        reject(err);\n      }\n    });\n  }\n\n  /**\n   * Renames keys of a query's value object to make them compatible\n   * with the SQLiteWASM API's bind parameters.\n   * \n   * @param\n   * @returns \n   */\n  reformatQueryValues({values, prefix = ':'}: {values: any, prefix?: string}) {\n    if (Array.isArray(values)) return values;\n    if (typeof values === 'object') {\n      const keys = Object.keys(values);\n      const remapped: Record<string, any> = {};\n      keys.forEach(k => {\n        const newK = k.startsWith(prefix) ? k : `${prefix}${k}`;\n        remapped[newK] = values[k];\n      });\n      return remapped;\n    }\n    return values;\n  }\n\n  /**\n   * Returns the current device's unique TinySynq ID.\n   * \n   * @returns The device's assigned ID.\n   */\n  async getDeviceId(): Promise<string> {\n    if (this._deviceId) return this._deviceId;\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'device_id'`\n    });\n    return res[0].meta_value;\n  }\n\n  /**\n   * Returns an ISO8601 formatted date and time of the last successful local sync.\n   * \n   * @remarks\n   * \n   * A \"local sync\" is the process of sending local changes to the remote hub.\n   * \n   * @returns The time of the last sync.\n   */\n  async getLastSync(): Promise<string> {\n    const res = await this.runQuery<any[]>({\n      sql:`\n        SELECT meta_value FROM ${this.synqPrefix}_meta\n        WHERE meta_name = 'last_local_sync'`\n    });\n    this.log.trace('@getLastSync', res[0]);\n    return res[0]?.meta_value;\n  }\n  \n  /**\n   * Returns matching {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChanges(params?: {lastLocalSync?: string, columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync: string = params?.lastLocalSync || await this.getLastSync();\n    let { columns = [] } = params || {};\n    this.log.debug('@getChanges', lastLocalSync);\n  \n    let where: string = '';\n    let columnSelection = columns\n      .map(c => c.replace(/[^*._a-z0-9]+/gi, ''))\n      .join(',') || '*';\n  \n    if (lastLocalSync) {\n      where = 'WHERE c.modified > ?'\n    }\n    const sql = `\n      SELECT ${columnSelection}\n      FROM ${this._synqPrefix}_changes c\n      INNER JOIN ${this._synqPrefix}_record_meta trm\n      ON trm.table_name = c.table_name\n      AND trm.row_id = c.row_id\n      ${where}\n      ORDER BY c.modified ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    this.log.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  /**\n   * Returns {@link Change} objects since the last local sync.\n   * \n   * @remarks\n   * \n   * If `lastLocalSync` is empty, all changes are returned.\n   * \n   * @param params - Object containing retrieval parameters.\n   * @returns An array of {@link Change} objects.\n   */\n  async getChangesSinceLastSync(params?: {columns?: string[]}): Promise<Change[]> {\n    let lastLocalSync = await this.getLastSync() || undefined;\n    return this.getChanges({...params, lastLocalSync});\n  };\n\n  /**\n   * Writes debug mode value (true) which disables recording \n   * of operations on syncable tables.\n   * \n   * @remarks\n   * \n   * The value set by this method is checked by dedicated triggers.\n   * If the value is `1`, the active trigger writes the data to the\n   * `*_dump` table. It's worth purging the table data once done \n   * with debugging.\n   * \n   * @returns Result of the operation.\n   */\n  async enableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '1')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Writes debug mode value (false) which disables recording \n   * of operations on syncable tables.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   * \n   * @returns Result of the operation.\n   */\n  async disableDebug() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('debug_on', '0')\n      RETURNING *;`\n    });\n  }\n\n  /**\n   * Empties the `*_dump` table.\n   * \n   * @see {@link TinySynq.enableDebug} for more details.\n   */\n  async clearDebugData() {\n    await this.run({sql: `DELETE FROM ${this._synqPrefix}_dump`});\n    await this.run({sql: `UPDATE SQLITE_SEQUENCE SET seq = 0 WHERE name = ${this._synqPrefix}_dump`});\n  }\n  \n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private enableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '1');`\n    });\n  }\n\n  /**\n   * Writes value (true) which determines whether or not triggers on syncable\n   * tables are executed.\n   * \n   * @returns Result of operation.\n   */\n  private async disableTriggers() {\n    return this.run({\n      sql: `\n      INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value)\n      VALUES ('triggers_on', '0');`\n    });\n  }\n\n  async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.run({sql});\n    return savepoint;\n  }\n\n  async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.run({sql});\n  }\n\n  /**\n   * Retrieves a single record.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  private async getRecord<T>(params: TableNameRowParams): Promise<T | any> {\n    const {table_name, row_id} = params;\n    const idCol = this.getTableIdColumn({table_name: table_name});\n    const sql = `SELECT * FROM ${table_name} WHERE ${idCol} = ?`;\n    const res = await this.runQuery({sql, values: [row_id]});\n    this.log.debug('@getRecord', res);\n    return res[0];\n  }\n\n  /**\n   * Retrieves a single record by it's ID.\n   * \n   * @remarks\n   * \n   * The column used to identify the record is according to the {@link SyncableTable}\n   * that was provided in {@link TinySynqOptionsBase.tables} at instantiation.\n   * \n   * @param params - Object containing table/row parameters. \n   * @returns \n   */\n  async getById<T>(params: TableNameRowParams): Promise<T | any> {\n    const{table_name, row_id} = params;\n    return this.getRecord({table_name, row_id});\n  }\n\n  async insertRecordMeta({change, vclock}: any) {\n    this.log.warn('<<< @insertRecordMeta >>>', {change, vclock});\n    const { table_name, row_id } = change;\n    const mod = vclock[this._deviceId!] || 0;\n    const values = {\n      table_name,\n      row_id,\n      mod,\n      vclock: JSON.stringify(vclock)\n    };\n    return this.runQuery({\n      sql: `\n      INSERT INTO ${this._synqPrefix}_record_meta (table_name, row_id, mod, vclock)\n      VALUES (:table_name, :row_id, :mod, :vclock)\n      ON CONFLICT DO UPDATE SET mod = :mod, vclock = :vclock\n      RETURNING *\n      `,\n      values,\n    });\n  }\n\n  /**\n   * Get associated meta data (including `vclock`) for record.\n   * \n   * @param params - Object containing table/row parameters.\n   * \n   * @returns Object containing row data from `*_record_meta`.\n   */\n  async getRecordMeta(params: {table_name: string, row_id: string}) {\n    const {table_name, row_id} = params;\n    const sql = `\n    SELECT *\n    FROM ${this.synqPrefix}_record_meta\n    WHERE table_name = :table_name\n    AND row_id = :row_id`;\n    const res = await this.runQuery({sql, values: {table_name, row_id}});\n    return res;\n  }\n\n  /**\n   * Returns changes that couldn't be applied yet because they\n   * were received out of sequence.\n   * \n   * @returns Array of pending changes.\n   */\n  async getPending() {\n    const sql = `\n    SELECT *\n    FROM ${this._synqPrefix}_pending\n    ORDER BY id ASC\n    `;\n    const res = await this.runQuery({sql});\n    return res;\n  }\n\n  /**\n   * Creates new pending record to be applied later.\n   * \n   * @param opts - Options for processing out-of-order change\n   * @returns Newly created pending record\n   */\n  private async processOutOfOrderChange({change}: {change: Change}) {\n    const {id, ...data} = change;\n    const sql = this.createInsertFromSystemObject({\n      data,\n      table_name: `${this._synqPrefix}_pending`,\n    });\n    this.log.trace('@processOutOfOrderChange\\n', sql, change);\n    const values: any = { ...data};\n    values.vclock = JSON.stringify(data.vclock);\n    const res = await this.runQuery({sql, values});\n    this.log.trace('@processOutOfOrderChange\\n', {res});\n    return res;\n  }\n\n  /**\n   * Determines whether to treat conflicted change as valid or invalid.\n   * \n   * @param opts - Options for processing concurrent change\n   * @returns boolean \n   */\n  private async processConflictedChange<T>({ record, change }: {record: T|any, change: Change}): Promise<boolean> {\n    const localMeta = await this.getRecordMeta({...change});\n    this.log.trace('<<<@ processConflictedChange LLW @>>>', change.id, change.table_name, change.row_id, {record, localMeta, change});\n    if (change.modified > localMeta.modified) {\n      this.log.trace('<!> INTEGRATING REMOTE', change.id, change.table_name, change.row_id);\n      // Update local with the incoming changes\n      return true;\n    }\n    else {\n      this.log.warn('<!> KEEPING LOCAL', change.id, change.table_name, change.row_id);\n      // Keep the local change, but record receipt of the record.\n      return false;\n    }\n  }\n\n  /**\n   * Checks for and handles issues with incoming change to be applied.\n   * \n   * @returns Result of pre-processing.\n   */\n  private async preProcessChange(\n    {change, restore}: PreProcessChangeOptions\n  ): Promise<PreProcessChangeResult> {\n    let defaultReason = 'unknown';\n    let valid = false;\n    let reason = defaultReason;\n    const localId = this.deviceId!;\n    const { table_name, row_id, vclock: remote = {} } = change;\n    const record = await this.getRecord({table_name, row_id});\n    const meta = await this.getRecordMeta({table_name, row_id});\n    const local = meta?.vclock ? JSON.parse(meta.vclock) : {};\n\n    let latest: VClock = {};\n    const localV = new VCompare({ local, remote, localId });\n    let displaced = false;\n    let conflicted = false;\n    let stale = false;\nthis.log.warn('{{{ @preProcessChange pre-if }}}', {restore, record})\n\n    // If we don't have the record, treat it as new\n    if (!restore && !record && change.operation !== TinySynqOperation.INSERT) {\nthis.log.warn('{{{ @OutOfOrder }}}')\n      reason = 'update before insert';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (restore || !record || !local || !local[localId]) {\n      latest = change.vclock;\n    }\n    \n    if (restore) {\n      valid = true;\n      reason = 'restoration';\n      latest = localV.merge();\n      return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n    }\n    else if (displaced = localV.isOutOfOrder()) {  \n      reason = 'received out of order';\n      await this.processOutOfOrderChange({change});\n    }\n    else if (conflicted = localV.isConflicted()) {\n      valid = await this.processConflictedChange({record, change});\n      if (!valid) {\n        reason = 'concurrent writes'; \n      }\n      else {\n        latest = localV.merge();\n      }\n    }\n    else if (stale = localV.isOutDated()) {\n      reason = 'stale';\n    }\n    else if (reason === defaultReason) {\n      valid = true;\n      reason = '';\n      latest = localV.merge();\n    }\n\n    return { valid, reason, vclock: latest, checks: { stale, displaced, conflicted } };\n  }\n\n  /**\n   * Creates an insert query based on the syncable table name and data provided.\n   * \n   * @remarks\n   * \n   * This method is specifically for tables that have been registerd as syncable\n   * by passing them in as a {@link SyncableTable} at instantiation.\n   * \n   * @see {@link SyncableTable} for more information.\n   * \n   * @param param0 - Parameters from which to create the query.\n   * @returns A SQL query string.\n   */\n  createInsertFromObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    const columnsToInsert = Object.keys(data).join(',');\n    const editable = this._synqTables![table].editable || [];\n    const updates = Object.keys(data)\n      .filter(key => editable.includes(key))\n      .map(k => `${k} = :${k}`)\n      .join(',');    \n    if (!updates) throw new Error('No changes available');\n\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n\n    return insertSql;\n  }\n\n  /**\n   * Creates an insert query based on the system table name and data provided.\n   *  \n   * @param param0 - Parameters from which to create the query.\n   * \n   * @returns A SQL query string. \n   */\n  private createInsertFromSystemObject({data, table_name: table}: { data: Record<string, any>, table_name: string }) {\n    this.log.silly('@createInsert...', {data});\n    const columnsToInsert = Object.keys(data).join(',');\n    const updates = Object.keys(data)\n      .map(k => `${k} = :${k}`)\n      .join(',');\n    \n    if (!updates) throw new Error('No changes availble');\n    const insertPlaceholders = Object.keys(data).map(k => `:${k}`).join(',');\n    const insertSql = `\n      INSERT INTO ${table} (${columnsToInsert})\n      VALUES (${insertPlaceholders})\n      ON CONFLICT DO UPDATE SET ${updates}\n      RETURNING *;`;\n    return insertSql;\n  }\n\n  private async updateLastSync({change}: {change: Change}) {\n    const sql = `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES(:name, :value)`;\n    const data = [\n      { name: 'last_local_sync', value: `STRFTIME('%Y-%m-%d %H:%M:%f','NOW')`},\n      { name: 'last_sync', value: change.id }\n    ];\n    for (const values of data) {\n      await this.runQuery({sql, values});\n    };\n  }\n\n  private async applyChange({\n    change,\n    restore,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      // Check that the changes can actually be applied\n      const changeStatus = await this.preProcessChange({change, restore});\n\n      if (!changeStatus?.valid) {\n        this.log.warn('>>> Invalid change status')\n        this.log.warn(changeStatus);\n        this.updateLastSync({change});\n        return;\n      }\n\n      const table = this.synqTables![change.table_name];\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          this.log.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n      else {\n        // There's no data so bail\n        throw new Error(`Cannot perform update with empty data:\\n${JSON.stringify(change, null, 2)}`);\n      }\n \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n      this.log.silly('@applyChange', {change, table, changeStatus});\n      switch(change.operation) {\n        case 'INSERT':\n        case 'UPDATE':\n          const insertSql = this.createInsertFromObject({\n            data: recordData,\n            table_name: change.table_name\n          });\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          this.log.warn('>>> DELETE SQL <<<', sql, change.row_id);\n          await this.run({sql, values: [change.row_id]});\n          break;\n      }\n      await this.updateLastSync({change});\n\n      // Insert merged VClock data\n      const updatedRecordMeta = await this.insertRecordMeta({change, vclock: changeStatus.vclock});\n      this.log.silly({updatedRecordMeta});\n    }\n    catch (error) {\n      await this.rollbackTransaction({savepoint})\n      this.log.error(`Error applying change: ${error}. Rolled back.`, {change});\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB({ changes, restore = false }: { changes: Change[], restore?: boolean }) {\n    await this.disableTriggers();\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, restore, savepoint});\n        }\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        this.log.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    await this.enableTriggers();\n    this.log.silly(`Applied ${changes.length} change(s)`);\n  };\n\n  async tablesReady(): Promise<void> {\n    await this.enableTriggers();\n  }\n}","import { Logger } from \"tslog\";\nimport { TinySynq } from \"./tinysynq.class.js\";\nimport { TinySynqOptions, SyncableTable } from \"./types.js\";\n\n/**\n * Returns a configured instance of TinySynq\n * \n * @param config - Configuration object \n * @returns TinySynq instance\n * \n * @public\n */\nconst setupDatabase = async (config: TinySynqOptions) => {\n  const {\n    tables,\n    preInit,\n    postInit,\n    logOptions,\n    debug,\n  } = config;\n\n  if (!tables?.length) throw new Error('Syncable table data required');\n\n  const log = new Logger({ name: 'tinysynq-setup', ...logOptions});\n  const db = new TinySynq(config);\n\n  /**\n   * Pretty important: make sure to call `init()` :-)\n   */\n\n  await db.init();\n\n  const getRecordMetaInsertQuery = ({table, remove = false}: {table: SyncableTable, remove?: boolean}) => {\n    /* \n    db.is kind of insane, but it works. A rundown of what's happening:\n    - We're creating a trigger after a deletion (the easy part)\n    - Aside from recording the changes, we also need to add record-specific metadata:\n      - table name and row identifier,\n      - the number of times the record has been touched (including creation)\n      - the map of all changes across all devices — a Vector Clock (JSON format)\n    - Getting the vector clock is tricky, partly because of SQLite limitations\n      (no variables, control structures), and partly because it's possible that\n      no meta exists for the record.\n    - To work around db.we do a select to get the meta, but perform a union with\n      another select that just selects insert values.\n    - Included in both selects is\n      a 'peg' which we use to sort the UNIONed rows to ensure that if a valid row\n      exists, it's the first row returned.\n    - Now we select from db.union and limit to 1 result. If a record exists\n      then we get that record. If not, we get the values ready for insertion.\n    - Finally, if there's a conflict on PRIMAY KEY or UNIQUE contraints, we update\n      only the columns configured as editable.\n    */\n    const version = remove ? 'OLD' : 'NEW';\n    const sql = `\n    INSERT INTO ${db.synqPrefix}_record_meta (table_name, row_id, mod, vclock)\n    SELECT table_name, row_id, mod, vclock\n    FROM (\n      SELECT\n        1 as peg,\n        '${table.name}' as table_name,\n        ${version}.${table.id} as row_id, \n        IFNULL(json_extract(vclock,'$.${db.deviceId}'), 0) + 1 as mod, \n        json_set(IFNULL(json_extract(vclock, '$'),'{}'), '$.${db.deviceId}', IFNULL(json_extract(vclock,'$.${db.deviceId}'), 0) + 1) as vclock\n      FROM ${db.synqPrefix}_record_meta\n      WHERE table_name = '${table.name}'\n      AND row_id = ${version}.${table.id}\n      UNION\n      SELECT 0 as peg, '${table.name}' as table_name, ${version}.${table.id} as row_id, 1, json_object('${db.deviceId}', 1) as vclock\n    )\n    ORDER BY peg DESC\n    LIMIT 1\n    ON CONFLICT DO UPDATE SET\n      mod = json_extract(excluded.vclock,'$.${db.deviceId}'),\n      vclock = json_extract(excluded.vclock,'$')\n    ;`;\n    log.silly(sql);\n    return sql;\n  }\n\n  const setupTriggersForTable = async ({ table }: { table: SyncableTable }) => {\n    log.debug('Setting up triggers for', table.name);\n\n    // Template for inserting the new value as JSON in the `*_changes` table.\n    const jsonObject = (await db.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    log.silly('@jsonObject', JSON.stringify(jsonObject, null, 2));\n\n    /**\n     * These triggers run for changes originating locally. They are disabled\n     * when remote changes are being applied (`triggers_on` in `*_meta` table).\n     */\n\n    // Ensure triggers are up to date\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_insert_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_update_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n      END;`\n    await db.run({sql});\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n\n        ${getRecordMetaInsertQuery({table})}\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'triggers_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n        \n        ${getRecordMetaInsertQuery({table, remove: true})}\n      END;`\n    });\n\n    /**\n     * All the triggers below will only be executed if `meta_name=\"debug_on\"`\n     * has the `meta_value=1` in the *_meta table, regardless of `triggers_on`.\n     */\n\n    // Remove previous versions\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_insert_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_update_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_delete_${table.name}`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_before_insert_record_meta`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_insert_record_meta`});\n    await db.run({sql: `DROP TRIGGER IF EXISTS ${db.synqPrefix}_dump_after_update_record_meta`});\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow a rudimentary tracing of DB actions on the synced tables.\n     */\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'INSERT', ${jsonObject.jo});\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    const oldJsonObject = jsonObject.jo.replace(/NEW/g, 'OLD');\n    \n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data) VALUES ('${table.name}', 'DELETE', ${oldJsonObject});\n      END;`\n    });\n\n    /**\n     * @Debugging Do not remove\n     * These triggers allow comparison record meta before and after insert.\n     */\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_before_insert_record_meta\n      BEFORE INSERT ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES (NEW.table_name, 'BEFORE_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_insert_record_meta\n      AFTER INSERT ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_INSERT', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    await db.run({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${db.synqPrefix}_dump_after_update_record_meta\n      AFTER UPDATE ON ${db.synqPrefix}_record_meta\n      FOR EACH ROW\n      WHEN (SELECT meta_value FROM ${db.synqPrefix}_meta WHERE meta_name = 'debug_on')='1'\n      BEGIN\n        INSERT INTO ${db.synqPrefix}_dump (table_name, operation, data)\n        VALUES ('${table.name}', 'AFTER_UPDATE', json_object('table_name', NEW.table_name, 'row_id', NEW.row_id, 'mod', NEW.mod, 'vclock', NEW.vclock));\n      END;`\n    });\n\n    /* END OF DEBUG TRIGGERS */\n  }\n\n  // Create a change-tracking table and index\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await db.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_change_modified_idx ON ${db.synqPrefix}_changes(modified)`\n  });\n\n  // Change *_pending is essentially a clone of *_changes used to hold items that\n  // cannot be applied yet because intermediate/preceding changes haven't been received.\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_pending (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE',\n      vclock BLOB NOT NULL,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n  \n  await db.run({\n    sql:`CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_pending_table_row_idx ON ${db.synqPrefix}_pending(table_name, row_id)`\n  });\n\n  // Create a notice table\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_notice (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      conflict BLOB,\n      message TEXT NOT NULL,\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  }); \n\n  // Create record meta table and index\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_record_meta (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      mod INTEGER,\n      vclock BLOB,\n      modified TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%dT%H:%M:%f','NOW'))\n    );`\n  });\n\n  await db.run({\n    sql:`CREATE UNIQUE INDEX IF NOT EXISTS ${db.synqPrefix}_record_meta_idx ON ${db.synqPrefix}_record_meta(table_name, row_id)`\n  });\n\n  // Create meta table\n  await db.run({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );\n  `});\n\n  await db.run({\n    sql: `\n    CREATE TABLE IF NOT EXISTS ${db.synqPrefix}_dump (\n      created TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW')), \n      table_name TEXT NOT NULL,\n      operation TEXT,\n      data BLOB\n    );\n  `});\n\n  await db.run({\n    sql: `CREATE INDEX IF NOT EXISTS ${db.synqPrefix}_meta_name_idx ON ${db.synqPrefix}_meta(meta_name)`\n  });\n  \n  // Enable debug mode\n  if (debug) await db.enableDebug();\n\n  // Set the device ID\n  await db.setDeviceId();\n\n  // Run pre-initialisation queries\n  if (preInit?.length) {\n    for (const preInitQuery of preInit) {\n      log.debug(`\\n@@@ preInit\\n${preInitQuery}\\n@@@`)\n      await db.run({\n        sql: preInitQuery\n      });\n    }\n  }\n\n  log.debug(`@${db.synqPrefix}_meta`, db.runQuery({sql:`SELECT * FROM pragma_table_info('${db.synqPrefix}_meta')`}));\n  log.debug(`@SIMPLE_SELECT`, db.runQuery({sql:`SELECT '@@@ that was easy @@@'`}));\n\n  for (const table of tables) {\n    // Check table exists\n    const exists = await db.runQuery<Record<string, any>>({\n      sql: `SELECT * FROM pragma_table_info('${table.name}')`\n    });\n    log.debug('@exists?', table.name, exists);\n    if (!exists?.length) throw new Error(`${table.name} doesn't exist`);\n    \n    log.debug('Setting up', table.name, table.id);\n\n    await setupTriggersForTable({ table });\n    db.tablesReady();\n  }\n\n  if (postInit?.length) {\n    for (const postInitQuery of postInit) {\n      log.debug(`@@@\\npostInit\\n${postInitQuery}\\n@@@`)\n      await db.run({\n        sql: postInitQuery\n      });\n    }\n  }\n\n  return db;\n};\n\nexport default setupDatabase;"],"names":["TinySynqOperation","LogLevel","VCompare","_ref","local","remote","localId","isGreater","this","isLess","isWrongOrder","JSON","parse","_proto","prototype","setRemote","_ref2","isConflicted","data","_this","Object","keys","_extends","forEach","k","localCount","remoteCount","isOutDated","Error","isOutOfOrder","filter","i","length","_local$k","_remote$k","drift","Math","abs","merge","_step","merged","_iterator","_createForOfIteratorHelperLoose","Set","concat","done","p","value","max","undefined","_catch","body","recover","result","then","s","o","_settle","pact","state","v","bind","observer","_Pact","onRejected","callback","onFulfilled","e","_isSettledPact","thenable","log","Logger","name","minLevel","Info","_forOf","target","check","_iteratorSymbol","step","iterator","next","_cycle","_fixup","values","push","array","reject","_forTo","strtimeAsISO8601","TinySynq","opts","_opts$prefix","_opts$wal","_db","_dbPath","_deviceId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","Date","toUTCString","toISOString","filePath","sqlite3","tables","t","prefix","trim","replace","batchSize","wal","Debug","type","maskValuesOfKeys","hideLogPositionForProduction","logOptions","init","_this2","db","Promise","resolve","dbPath","debug","res","_promiser","sqlite3Worker1Promiser","onready","onerror","err","error","_this$log","apply","slice","call","arguments","onunhandled","event","promiser","_temp4","dbId","setDeviceId","conf","_temp2","info","version","libVersion","_temp","runQuery","sql","_temp3","filename","_promiser2","_promiser3","message","getNewId","nanoid","getTableIdColumn","params","_this$synqTables$tabl","synqTables","table_name","id","existing","_temp8","_temp6","_existing","_this3","meta_value","warn","_temp5","_existing2","synqPrefix","deviceId","_temp7","_this3$runQuery","run","runMany","_this5","_params$prefix","quid","ceil","random","synqDbId","_temp11","_temp10","_temp9","reformatQueryValues","stack","_this6","_params$prefix2","results","row","col","columnNames","_ref$prefix","Array","isArray","remapped","newK","startsWith","getDeviceId","_this7","getLastSync","_this8","_res$","trace","getChanges","_temp12","lastLocalSync","_ref2$columns","columns","_this9","where","columnSelection","map","c","join","_params$lastLocalSync","getChangesSinceLastSync","_this10","enableDebug","_this11","disableDebug","clearDebugData","_this13","enableTriggers","disableTriggers","beginTransaction","_this15","savepoint","now","commitTransaction","_ref3","rollbackTransaction","_ref4","getRecord","_this18","row_id","idCol","getById","insertRecordMeta","_ref5","change","vclock","_this20","mod","stringify","getRecordMeta","_this21","getPending","processOutOfOrderChange","_ref6","_this23","_objectWithoutPropertiesLoose","_excluded","createInsertFromSystemObject","processConflictedChange","_ref7","record","_this24","localMeta","modified","preProcessChange","_ref8","restore","_this25","defaultReason","valid","reason","_change$vclock","meta","_temp18","_exit","_temp16","_result2","latest","checks","stale","displaced","conflicted","_temp15","localV","_temp19","_temp20","_this25$processConfli","_temp17","operation","INSERT","createInsertFromObject","_ref9","table","columnsToInsert","editable","updates","key","includes","_ref10","silly","updateLastSync","_ref11","_this26","_temp21","applyChange","_ref12","_this27","changeStatus","_temp23","updatedRecordMeta","recordData","_temp22","discriminant","cases","dispatchIndex","test","fallthroughCheck","awaitBody","_resumeAfterBody","testValue","_resumeAfterTest","_switch","insertSql","_interrupt","applyChangesToLocalDB","_ref13","changes","_ref13$restore","_this28","_temp28","_temp27","update","stage","shouldContinue","updateValue","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp26","_temp25","_temp24","tablesReady","_createClass","get","return","config","preInit","postInit","getRecordMetaInsertQuery","_ref$remove","remove","_result","postInitQuery","exists","_db$runQuery","jsonObject","jo","oldJsonObject","setupTriggersForTable","preInitQuery"],"mappings":"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"}