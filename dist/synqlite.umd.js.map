{"version":3,"file":"synqlite.umd.js","sources":["../src/lib/index.ts","../src/lib/constants.ts"],"sourcesContent":["import { sqlite3Worker1Promiser } from '@sqlite.org/sqlite-wasm';\nimport { SYNQLITE_BATCH_SIZE, SYNQLITE_PREFIX } from './constants.js';\nimport { Change, SynQLiteOptions, SyncableTable } from './types.js';\n// import pino from 'pino';\n\nconsole.log({ sqlite3Worker1Promiser });\n\ntype ApplyChangeParams = {\n  change: Change,\n  savepoint: string\n}\n\nconst strtimeAsISO8601 = `STRFTIME('%Y-%m-%dT%H:%M:%f','NOW')`;\n\nclass SynQLite {\n  private _db: any;\n  private _dbName: string;\n  private _synqDbId?: string;\n  private _synqPrefix?: string;\n  private _synqTables?: SyncableTable[];\n  private _synqBatchSize: number = 20;\n  private _wal = false;\n\n  utils = {\n    strtimeAsISO8601,\n    nowAsISO8601: strtimeAsISO8601,\n    utcNowAsISO8601: (): string => {\n      return new Date((new Date()).toUTCString()).toISOString();\n    }\n  }\n\n  constructor(initData: SynQLiteOptions) {\n    this._dbName = initData.filename || '';\n    this._db = initData.sqlite3 || undefined;\n    this._synqPrefix = initData.prefix;\n    this._synqTables = initData.tables;\n    this._synqBatchSize = initData.batchSize || this._synqBatchSize;\n    this._wal = initData.wal ?? false;\n  }\n\n  async init() {\n    if (this.db) return Promise.resolve(this.db); // @TODO: test DB connection\n    if (!this.dbName) return Promise.reject('No DB filename or connection provided');\n\n    return new Promise(async (resolve, reject) => {\n      try {\n        console.debug('get promiser...')\n        const promiser: any = await new Promise((res) => {\n          const _promiser = sqlite3Worker1Promiser({\n            onready: () => {\n              res(_promiser);\n            },\n            onerror: (err: any) => {\n              console.error('@ERROR', err);\n            },\n            debug: (...args: any) => {\n              console.debug(...args);\n            }\n          });\n        });\n        \n        console.debug('get config...')\n        await promiser('config-get', {});\n\n        let res;\n  \n        try {\n          console.debug(`open ${this.dbName}...`);\n          res = await promiser('open', {\n            filename: `file:${this.dbName}?vfs=opfs`,\n          });\n  \n          console.log(\n            'OPFS is available, created persisted database at',\n            res.result.filename.replace(/^file:(.*?)\\?vfs=opfs$/, '$1'),\n          );\n        }\n        catch(err) {\n          // Probably no vfs\n          res = await promiser('open', {\n            filename: `file:${this.dbName}`\n          });\n          console.log(\n            'OPFS not available, created in-memory database at',\n            res.result.filename, '$1'\n          );\n        }\n  \n        if (!res) return reject('Unable to start DB');\n\n        const { dbId } = res;\n        this._synqDbId = dbId;\n      \n        const conf = await promiser('config-get', {});\n        console.log('Running SQLite3 version', conf.result.version.libVersion);\n        \n        this._db = promiser;\n        resolve(this);\n      }\n      catch(err: any) {\n        if (!(err instanceof Error)) {\n          err = new Error(err.result.message);\n        }\n        console.error(err.name, err.message);\n        console.error(err)\n        reject('DB setup failed.');\n      }\n      console.groupEnd();\n    });\n  };\n\n  get db() {\n    return this._db;\n  }\n\n  get dbName() {\n    return this._dbName;\n  }\n\n  get synqDbId() {\n    return this._synqDbId;\n  }\n\n  get synqPrefix() {\n    return this._synqPrefix;\n  }\n\n  get synqTables() {\n    return this._synqTables;\n  }\n\n  get synqBatchSize() {\n    return this._synqBatchSize;\n  }\n\n  get wal() {\n    return this._wal;\n  }\n\n  async runQuery<T>({sql, values}: {sql: string, values?: any[]}): Promise<T> {\n    const dbId = this.synqDbId;\n    return new Promise((resolve, reject) => {\n      const results: any[] = [];\n      try {\n        this.db('exec', {\n          dbId,\n          sql, // I think we can make this sexier, in Minmail\n          bind: values,\n          callback: (result: any) => {\n            if (!result.row) return resolve(results as any);\n            const o: any = {};\n            result.row.forEach((col: string, i: number) => o[result.columnNames[i]] = result.row[i]);\n            results.push(o);\n          }\n        });\n      }\n      catch(err) {\n        console.error(err);\n        reject(err);\n      }\n    });\n  }\n\n  async getLastSync() {\n    return this.db.exec(`\n      SELECT * FROM ${this.db.synqPrefix}_meta\n      WHERE meta_name = 'last_local_sync'`\n    ).get();\n  }\n  \n  async getChangesSinceLastSync(db: any, lastSync?: string) {\n    let lastLocalSync: string = lastSync || (await this.getLastSync()).last_local_sync;\n    console.debug('@getChangesSinceLastSync', lastLocalSync);\n  \n    let where: string = '';\n  \n    if (lastLocalSync) {\n      where = 'WHERE modified_at > ?'\n    }\n    const sql = `\n    SELECT * FROM ${db.synqPrefix}_changes\n      ${where}\n      ORDER BY modified_at ASC\n    `;\n    const values = lastLocalSync ? [lastLocalSync] : [];\n    console.debug(sql, values);\n  \n    return this.runQuery<Change[]>({sql, values});\n  };\n\n  private async beginTransaction(): Promise<string> {\n    const savepoint = `SP${Date.now()}`;\n    const sql = `SAVEPOINT ${savepoint};`;\n    await this.runQuery({sql});\n    return savepoint\n  }\n\n  private async commitTransaction({savepoint}: {savepoint: string}) {\n    const sql = `RELEASE SAVEPOINT ${savepoint};`;\n    return this.runQuery({sql});\n  }\n\n  private async rollbackTransaction({savepoint}: {savepoint: string}) {\n    const sql = `ROLLBACK TRANSACTION TO SAVEPOINT ${savepoint};`;\n    return this.runQuery({sql}); \n  }\n\n  async applyChange({\n    change,\n    savepoint\n  }: ApplyChangeParams) {\n    try {\n      const table = this.synqTables?.find(t => t.name === change.table_name);\n      let recordData: any;\n      if (change.data) {\n        try {\n          recordData = JSON.parse(change.data);\n        }\n        catch(err) {\n          console.debug(change);\n          throw new Error('Invalid data for insert or update');\n        }\n      }\n        \n      if (!table) throw new Error(`Unable to find table ${change.table_name}`);\n      switch(change.operation) {\n        case 'UPDATE':\n          const columnsToUpdate = Object.keys(recordData).map(key => `${key} = :${key}`).join(', ');\n          const updateValues = { ...recordData, [table.id]: change.row_id};\n          const updateSql = `UPDATE ${change.table_name} SET ${columnsToUpdate} WHERE ${table.id} = :${table.id}`;\n          // console.debug('@performing update... sql:', updateSql, updateValues);\n          await this.runQuery({sql: updateSql, values: updateValues});\n          break;\n        case 'INSERT':\n          const columnsToInsert = Object.keys(recordData).join(',');\n          const insertPlaceholders = Object.keys(recordData).map(k => `:${k}`).join(',')\n          const insertSql = `INSERT OR REPLACE INTO ${change.table_name} (${columnsToInsert}) VALUES (${insertPlaceholders});`;\n          // console.debug('@performing insert... sql:', insertSql, recordData);\n          await this.runQuery({sql: insertSql, values: recordData});\n          break;\n        case 'DELETE':\n          const sql = `DELETE FROM ${change.table_name} WHERE ${table.id} = ?`;\n          await this.runQuery({sql, values: [change.row_id]});\n          break;\n      }\n\n      // @TODO: do we need last_sync_local per table?\n      this.runQuery({\n        sql: `INSERT OR REPLACE INTO ${this.synqPrefix}_meta (meta_name, meta_value) VALUES('last_local_sync', STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))`,\n      });\n    }\n    catch (error) {\n      await this.rollbackTransaction({savepoint})\n      console.error(`Error applying change: ${error}`);\n      throw error; // Throw the error to trigger rollback\n    }\n  }\n  \n  async applyChangesToLocalDB(changes: Change[]) {\n    // Split changes into batches\n    for (let i = 0; i < changes.length; i += this.synqBatchSize) {\n      const batch = changes.slice(i, i + this.synqBatchSize);\n  \n      // Create savepoint and apply each batch within a transaction\n      const savepoint = await this.beginTransaction();\n      try {\n        for (const change of batch) {\n          await this.applyChange({change, savepoint})\n        }\n\n        // Commit the changes for this batch\n        await this.commitTransaction({savepoint});\n\n      } catch (error) {\n        await this.rollbackTransaction({savepoint})\n        console.error(`Transaction failed, changes rolled back: ${error}`);\n        // Handle transaction failure (e.g., log, retry logic, notification)\n      }\n    }\n    console.debug(`Applied ${changes.length} change(s)`)\n  };\n}\n\nexport const setupDatabase = async ({\n  filename,\n  sqlite3,\n  prefix = SYNQLITE_PREFIX,\n  tables,\n  batchSize = SYNQLITE_BATCH_SIZE,\n  wal = false\n}: SynQLiteOptions) => {\n  /*\n  @TODO:\n   - check if DB path exists (throw if not)\n   - check if table names have been provided (throw if not)\n   - check if table names exist (throw if not)\n  */\n  const db = new SynQLite({\n    filename,\n    sqlite3,\n    prefix,\n    tables,\n    batchSize,\n    wal\n  });\n  console.log('@SynQLite db', db)\n  \n  // Initialise the DB\n  try {\n    await db.init();\n  }\n  catch(err) {\n    console.error(err);\n    throw err;\n  }\n\n  prefix = prefix?.trim().replace(/[^a-z0-9]+$/gi, '');\n  console.debug({prefix, batchSize})\n\n  // Add a 'last_modified' column to each table you want to sync, if not already present.\n  // Example for a table named 'items':\n  // db.exec('ALTER TABLE items ADD COLUMN last_modified TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL');\n\n  // Set WAL mode if necessary\n  if (wal === true) {\n    await db.runQuery({\n      sql: `PRAGMA journal_mode=WAL;`\n    });\n  }\n\n  // Create a change-tracking table\n  await db.runQuery({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${prefix}_changes (\n      id INTEGER PRIMARY KEY AUTOINCREMENT,\n      table_name TEXT NOT NULL,\n      row_id TEXT NOT NULL,\n      data BLOB,\n      operation TEXT NOT NULL, -- 'INSERT', 'UPDATE', 'DELETE'\n      modified_at TIMESTAMP DATETIME DEFAULT(STRFTIME('%Y-%m-%d %H:%M:%f','NOW'))\n    );`\n  });\n    \n  // Create the index\n  db.runQuery({\n    sql: `CREATE INDEX IF NOT EXISTS ${prefix}_change_modified_idx ON ${prefix}_changes(modified_at)`\n  });\n\n  db.runQuery({\n    sql:`\n    CREATE TABLE IF NOT EXISTS ${prefix}_meta (\n      meta_name TEXT NOT NULL PRIMARY KEY,\n      meta_value TEXT NOT NULL\n    );`\n  });\n  db.runQuery({\n    sql: `CREATE INDEX IF NOT EXISTS ${prefix}_meta_name_idx ON ${prefix}_meta(meta_name)`\n  });\n\n  for (const table of tables) {\n    console.debug('Setting up', table.name, table.id);\n    const jsonObject = (await db.runQuery<any>({\n      sql:`\n      SELECT 'json_object(' || GROUP_CONCAT('''' || name || ''', NEW.' || name, ',') || ')' AS jo\n      FROM pragma_table_info('${table.name}');`\n    }))[0];\n    console.log(jsonObject, jsonObject.jo);\n\n    // Ensure triggers are up to date\n    db.runQuery({sql: `DROP TRIGGER IF EXISTS ${prefix}_after_insert_${table.name}`});\n    db.runQuery({sql: `DROP TRIGGER IF EXISTS ${prefix}_after_update_${table.name}`});\n    db.runQuery({sql: `DROP TRIGGER IF EXISTS ${prefix}_after_delete_${table.name}`});\n\n    const sql = `\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_insert_${table.name}\n      AFTER INSERT ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'INSERT', ${jsonObject.jo});\n      END;`\n      console.log(sql)\n    db.runQuery({sql});\n\n    db.runQuery({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_update_${table.name}\n      AFTER UPDATE ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation, data)\n        VALUES ('${table.name}', NEW.${table.id}, 'UPDATE', ${jsonObject.jo});\n      END;`\n    });\n\n    db.runQuery({\n      sql:`\n      CREATE TRIGGER IF NOT EXISTS ${prefix}_after_delete_${table.name}\n      AFTER DELETE ON ${table.name}\n      FOR EACH ROW\n      BEGIN\n        INSERT INTO ${prefix}_changes (table_name, row_id, operation) VALUES ('${table.name}', OLD.${table.id}, 'DELETE');\n      END;`\n    });\n  }\n\n  return db;\n};\n\nexport default setupDatabase;","export const SYNQLITE_PREFIX = 'synql';\nexport const SYNQLITE_BATCH_SIZE = 20;"],"names":["state","value","_Pact","s","o","_settle","bind","pact","then","v","observer","prototype","onFulfilled","onRejected","result","this","callback","e","_this","_iteratorSymbol","Symbol","iterator","_isSettledPact","thenable","_forOf","body","target","step","reject","_cycle","next","done","check","_fixup","TypeError","i","length","array","console","log","sqlite3Worker1Promiser","strtimeAsISO8601","SynQLite","initData","_initData$wal","_db","_dbName","_synqDbId","_synqPrefix","_synqTables","_synqBatchSize","_wal","utils","nowAsISO8601","utcNowAsISO8601","Date","toUTCString","toISOString","filename","sqlite3","undefined","prefix","tables","batchSize","wal","_proto","init","db","Promise","resolve","dbName","_exit","_temp4","_result","groupEnd","_temp3","_catch","debug","res","_promiser","onready","onerror","err","error","_console","apply","slice","call","arguments","promiser","_temp2","_reject","dbId","conf","version","libVersion","_temp","_promiser2","replace","_promiser3","Error","message","name","runQuery","_ref","sql","values","_this2","synqDbId","results","row","forEach","col","columnNames","push","getLastSync","exec","synqPrefix","get","getChangesSinceLastSync","lastSync","_temp5","_this4$getLastSync","lastLocalSync","last_local_sync","where","_this4","beginTransaction","savepoint","now","commitTransaction","_ref2","rollbackTransaction","_ref3","applyChange","_ref4","change","_this8","_this8$synqTables","_temp7","recordData","table","synqTables","find","t","table_name","data","JSON","parse","_temp6","_switch","operation","_extends2","columnsToUpdate","Object","keys","map","key","join","updateValues","_extends","id","row_id","_interrupt","columnsToInsert","insertPlaceholders","k","applyChangesToLocalDB","changes","_temp14","_this9","_temp13","test","update","stage","shouldContinue","_resumeAfterTest","_resumeAfterBody","updateValue","_resumeAfterUpdate","_for","synqBatchSize","batch","_temp12","_temp11","_temp10","_ref5","_ref5$prefix","SYNQLITE_PREFIX","_ref5$batchSize","SYNQLITE_BATCH_SIZE","_ref5$wal","_temp19","_result3","_prefix","_temp17","_temp15","_db$runQuery","jsonObject","jo","trim","_temp16","_exit2","_temp18"],"mappings":"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"}